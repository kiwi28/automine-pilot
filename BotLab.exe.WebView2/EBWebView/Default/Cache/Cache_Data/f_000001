<!DOCTYPE HTML>
<html>
<head>
  <meta charset="UTF-8">
  <title>Frontend.Main</title>
  <style>body { padding: 0; margin: 0; }</style>
</head>

<body>

<pre id="elm"></pre>

<script>
try {
(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}




var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log = F2(function(tag, value)
{
	return value;
});

var _Debug_log_UNUSED = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString(value)
{
	return '<internals>';
}

function _Debug_toString_UNUSED(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash_UNUSED(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.o.bY === region.m.bY)
	{
		return 'on line ' + region.o.bY;
	}
	return 'on lines ' + region.o.bY + ' through ' + region.m.bY;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**_UNUSED/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**_UNUSED/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**/
	if (typeof x.$ === 'undefined')
	//*/
	/**_UNUSED/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0 = 0;
var _Utils_Tuple0_UNUSED = { $: '#0' };

function _Utils_Tuple2(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2_UNUSED(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3_UNUSED(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr(c) { return c; }
function _Utils_chr_UNUSED(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil = { $: 0 };
var _List_Nil_UNUSED = { $: '[]' };

function _List_Cons(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons_UNUSED(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**_UNUSED/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap_UNUSED(value) { return { $: 0, a: value }; }
function _Json_unwrap_UNUSED(value) { return value.a; }

function _Json_wrap(value) { return value; }
function _Json_unwrap(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.lo,
		impl.dq,
		impl.ey,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**_UNUSED/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**/
	var node = args['node'];
	//*/
	/**_UNUSED/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS
//
// For some reason, tabs can appear in href protocols and it still works.
// So '\tjava\tSCRIPT:alert("!!!")' and 'javascript:alert("!!!")' are the same
// in practice. That is why _VirtualDom_RE_js and _VirtualDom_RE_js_html look
// so freaky.
//
// Pulling the regular expressions out to the top level gives a slight speed
// boost in small benchmarks (4-10%) but hoisting values to reduce allocation
// can be unpredictable in large programs where JIT may have a harder time with
// functions are not fully self-contained. The benefit is more that the js and
// js_html ones are so weird that I prefer to see them near each other.


var _VirtualDom_RE_script = /^script$/i;
var _VirtualDom_RE_on_formAction = /^(on|formAction$)/i;
var _VirtualDom_RE_js = /^\s*j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:/i;
var _VirtualDom_RE_js_html = /^\s*(j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:|d\s*a\s*t\s*a\s*:\s*t\s*e\s*x\s*t\s*\/\s*h\s*t\s*m\s*l\s*(,|;))/i;


function _VirtualDom_noScript(tag)
{
	return _VirtualDom_RE_script.test(tag) ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return _VirtualDom_RE_on_formAction.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return _VirtualDom_RE_js.test(value)
		? /**/''//*//**_UNUSED/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return _VirtualDom_RE_js_html.test(value)
		? /**/''//*//**_UNUSED/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlJson(value)
{
	return (typeof _Json_unwrap(value) === 'string' && _VirtualDom_RE_js_html.test(_Json_unwrap(value)))
		? _Json_wrap(
			/**/''//*//**_UNUSED/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		) : value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		lN: func(record.lN),
		mY: record.mY,
		mh: record.mh
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.lN;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.mY;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.mh) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.lo,
		impl.dq,
		impl.ey,
		function(sendToApp, initialModel) {
			var view = impl.eG;
			/**/
			var domNode = args['node'];
			//*/
			/**_UNUSED/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.lo,
		impl.dq,
		impl.ey,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.es && impl.es(sendToApp)
			var view = impl.eG;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.ff);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.jg) && (_VirtualDom_doc.title = title = doc.jg);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.l0;
	var onUrlRequest = impl.l1;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		es: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.h_ === next.h_
							&& curr.le === next.le
							&& curr.hU.a === next.hU.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		lo: function(flags)
		{
			return A3(impl.lo, flags, _Browser_getUrl(), key);
		},
		eG: impl.eG,
		dq: impl.dq,
		ey: impl.ey
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { ld: 'hidden', kl: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { ld: 'mozHidden', kl: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { ld: 'msHidden', kl: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { ld: 'webkitHidden', kl: 'webkitvisibilitychange' }
		: { ld: 'hidden', kl: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		iu: _Browser_getScene(),
		jC: {
			nB: _Browser_window.pageXOffset,
			nC: _Browser_window.pageYOffset,
			u: _Browser_doc.documentElement.clientWidth,
			_: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		u: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		_: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			iu: {
				u: node.scrollWidth,
				_: node.scrollHeight
			},
			jC: {
				nB: node.scrollLeft,
				nC: node.scrollTop,
				u: node.clientWidth,
				_: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			iu: _Browser_getScene(),
			jC: {
				nB: x,
				nC: y,
				u: _Browser_doc.documentElement.clientWidth,
				_: _Browser_doc.documentElement.clientHeight
			},
			fU: {
				nB: x + rect.left,
				nC: y + rect.top,
				u: rect.width,
				_: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}



function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.f2.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.f2.b, xhr)); });
		$elm$core$Maybe$isJust(request.jl) && _Http_track(router, xhr, request.jl.a);

		try {
			xhr.open(request.lO, request.eC, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.eC));
		}

		_Http_configureRequest(xhr, request);

		request.ff.a && xhr.setRequestHeader('Content-Type', request.ff.a);
		xhr.send(request.ff.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.gq; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.no.a || 0;
	xhr.responseType = request.f2.d;
	xhr.withCredentials = request.jZ;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		eC: xhr.responseURL,
		mV: xhr.status,
		dg: xhr.statusText,
		gq: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			mD: event.loaded,
			iO: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			mn: event.loaded,
			iO: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}


// DECODER

var _File_decoder = _Json_decodePrim(function(value) {
	// NOTE: checks if `File` exists in case this is run on node
	return (typeof File !== 'undefined' && value instanceof File)
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FILE', value);
});


// METADATA

function _File_name(file) { return file.name; }
function _File_mime(file) { return file.type; }
function _File_size(file) { return file.size; }

function _File_lastModified(file)
{
	return $elm$time$Time$millisToPosix(file.lastModified);
}


// DOWNLOAD

var _File_downloadNode;

function _File_getDownloadNode()
{
	return _File_downloadNode || (_File_downloadNode = document.createElement('a'));
}

var _File_download = F3(function(name, mime, content)
{
	return _Scheduler_binding(function(callback)
	{
		var blob = new Blob([content], {type: mime});

		// for IE10+
		if (navigator.msSaveOrOpenBlob)
		{
			navigator.msSaveOrOpenBlob(blob, name);
			return;
		}

		// for HTML5
		var node = _File_getDownloadNode();
		var objectUrl = URL.createObjectURL(blob);
		node.href = objectUrl;
		node.download = name;
		_File_click(node);
		URL.revokeObjectURL(objectUrl);
	});
});

function _File_downloadUrl(href)
{
	return _Scheduler_binding(function(callback)
	{
		var node = _File_getDownloadNode();
		node.href = href;
		node.download = '';
		node.origin === location.origin || (node.target = '_blank');
		_File_click(node);
	});
}


// IE COMPATIBILITY

function _File_makeBytesSafeForInternetExplorer(bytes)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/10
	// all other browsers can just run `new Blob([bytes])` directly with no problem
	//
	return new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
}

function _File_click(node)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/11
	// all other browsers have MouseEvent and do not need this conditional stuff
	//
	if (typeof MouseEvent === 'function')
	{
		node.dispatchEvent(new MouseEvent('click'));
	}
	else
	{
		var event = document.createEvent('MouseEvents');
		event.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		document.body.appendChild(node);
		node.dispatchEvent(event);
		document.body.removeChild(node);
	}
}


// UPLOAD

var _File_node;

function _File_uploadOne(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			callback(_Scheduler_succeed(event.target.files[0]));
		});
		_File_click(_File_node);
	});
}

function _File_uploadOneOrMore(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.multiple = true;
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			var elmFiles = _List_fromArray(event.target.files);
			callback(_Scheduler_succeed(_Utils_Tuple2(elmFiles.a, elmFiles.b)));
		});
		_File_click(_File_node);
	});
}


// CONTENT

function _File_toString(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsText(blob);
		return function() { reader.abort(); };
	});
}

function _File_toBytes(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(new DataView(reader.result)));
		});
		reader.readAsArrayBuffer(blob);
		return function() { reader.abort(); };
	});
}

function _File_toUrl(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsDataURL(blob);
		return function() { reader.abort(); };
	});
}




var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});


function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}

// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.lW) { flags += 'm'; }
	if (options.kk) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (!node.$) {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === -2) {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = 1;
var $elm$core$Basics$GT = 2;
var $elm$core$Basics$LT = 0;
var $elm$core$Result$Err = function (a) {
	return {$: 1, a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 0, a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 2, a: a};
};
var $elm$core$Basics$False = 1;
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Maybe$Nothing = {$: 1};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 0:
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 1) {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 1:
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 2:
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 1, a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.z) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.B),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.B);
		} else {
			var treeLen = builder.z * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.D) : builder.D;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.z);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.B) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.B);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{D: nodeList, z: (len / $elm$core$Array$branchFactor) | 0, B: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = 0;
var $elm$core$Result$isOk = function (result) {
	if (!result.$) {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 1, a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 0, a: a};
};
var $elm$browser$Browser$Dom$NotFound = $elm$core$Basics$identity;
var $elm$url$Url$Http = 0;
var $elm$url$Url$Https = 1;
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {gh: fragment, le: host, K: path, hU: port_, h_: protocol, h3: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 1) {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		0,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		1,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = $elm$core$Basics$identity;
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return 0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0;
		return A2($elm$core$Task$map, tagger, task);
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			A2($elm$core$Task$map, toMessage, task));
	});
var $elm$browser$Browser$element = _Browser_element;
var $author$project$Frontend$BrowserElementInitWithTime$TimeHasArrivedEvent = function (a) {
	return {$: 0, a: a};
};
var $author$project$Frontend$BrowserElementInitWithTime$WaitingForTimeState = function (a) {
	return {$: 0, a: a};
};
var $elm$time$Time$Name = function (a) {
	return {$: 0, a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 1, a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$Posix = $elm$core$Basics$identity;
var $elm$time$Time$millisToPosix = $elm$core$Basics$identity;
var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
var $author$project$Frontend$BrowserElementInitWithTime$init = function (flags) {
	return _Utils_Tuple2(
		$author$project$Frontend$BrowserElementInitWithTime$WaitingForTimeState(
			{dU: flags, b6: _List_Nil}),
		A2($elm$core$Task$perform, $author$project$Frontend$BrowserElementInitWithTime$TimeHasArrivedEvent, $elm$time$Time$now));
};
var $author$project$Frontend$BrowserElementInitWithTime$InitializedEvent = function (a) {
	return {$: 1, a: a};
};
var $elm$time$Time$Every = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$time$Time$State = F2(
	function (taggers, processes) {
		return {hX: processes, i7: taggers};
	});
var $elm$core$Dict$RBEmpty_elm_builtin = {$: -2};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$time$Time$init = $elm$core$Task$succeed(
	A2($elm$time$Time$State, $elm$core$Dict$empty, $elm$core$Dict$empty));
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === -2) {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1) {
					case 0:
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 1:
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$Dict$Black = 1;
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: -1, a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = 0;
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === -1) && (!right.a)) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === -1) && (!left.a)) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === -1) && (!left.a)) && (left.d.$ === -1)) && (!left.d.a)) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === -2) {
			return A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1) {
				case 0:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 1:
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$time$Time$addMySub = F2(
	function (_v0, state) {
		var interval = _v0.a;
		var tagger = _v0.b;
		var _v1 = A2($elm$core$Dict$get, interval, state);
		if (_v1.$ === 1) {
			return A3(
				$elm$core$Dict$insert,
				interval,
				_List_fromArray(
					[tagger]),
				state);
		} else {
			var taggers = _v1.a;
			return A3(
				$elm$core$Dict$insert,
				interval,
				A2($elm$core$List$cons, tagger, taggers),
				state);
		}
	});
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === -2) {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$time$Time$setInterval = _Time_setInterval;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$time$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		if (!intervals.b) {
			return $elm$core$Task$succeed(processes);
		} else {
			var interval = intervals.a;
			var rest = intervals.b;
			var spawnTimer = $elm$core$Process$spawn(
				A2(
					$elm$time$Time$setInterval,
					interval,
					A2($elm$core$Platform$sendToSelf, router, interval)));
			var spawnRest = function (id) {
				return A3(
					$elm$time$Time$spawnHelp,
					router,
					rest,
					A3($elm$core$Dict$insert, interval, id, processes));
			};
			return A2($elm$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var $elm$time$Time$onEffects = F3(
	function (router, subs, _v0) {
		var processes = _v0.hX;
		var rightStep = F3(
			function (_v6, id, _v7) {
				var spawns = _v7.a;
				var existing = _v7.b;
				var kills = _v7.c;
				return _Utils_Tuple3(
					spawns,
					existing,
					A2(
						$elm$core$Task$andThen,
						function (_v5) {
							return kills;
						},
						$elm$core$Process$kill(id)));
			});
		var newTaggers = A3($elm$core$List$foldl, $elm$time$Time$addMySub, $elm$core$Dict$empty, subs);
		var leftStep = F3(
			function (interval, taggers, _v4) {
				var spawns = _v4.a;
				var existing = _v4.b;
				var kills = _v4.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, interval, spawns),
					existing,
					kills);
			});
		var bothStep = F4(
			function (interval, taggers, id, _v3) {
				var spawns = _v3.a;
				var existing = _v3.b;
				var kills = _v3.c;
				return _Utils_Tuple3(
					spawns,
					A3($elm$core$Dict$insert, interval, id, existing),
					kills);
			});
		var _v1 = A6(
			$elm$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			processes,
			_Utils_Tuple3(
				_List_Nil,
				$elm$core$Dict$empty,
				$elm$core$Task$succeed(0)));
		var spawnList = _v1.a;
		var existingDict = _v1.b;
		var killTask = _v1.c;
		return A2(
			$elm$core$Task$andThen,
			function (newProcesses) {
				return $elm$core$Task$succeed(
					A2($elm$time$Time$State, newTaggers, newProcesses));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v2) {
					return A3($elm$time$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var $elm$time$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _v0 = A2($elm$core$Dict$get, interval, state.i7);
		if (_v0.$ === 1) {
			return $elm$core$Task$succeed(state);
		} else {
			var taggers = _v0.a;
			var tellTaggers = function (time) {
				return $elm$core$Task$sequence(
					A2(
						$elm$core$List$map,
						function (tagger) {
							return A2(
								$elm$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						taggers));
			};
			return A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$succeed(state);
				},
				A2($elm$core$Task$andThen, tellTaggers, $elm$time$Time$now));
		}
	});
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$time$Time$subMap = F2(
	function (f, _v0) {
		var interval = _v0.a;
		var tagger = _v0.b;
		return A2(
			$elm$time$Time$Every,
			interval,
			A2($elm$core$Basics$composeL, f, tagger));
	});
_Platform_effectManagers['Time'] = _Platform_createManager($elm$time$Time$init, $elm$time$Time$onEffects, $elm$time$Time$onSelfMsg, 0, $elm$time$Time$subMap);
var $elm$time$Time$subscription = _Platform_leaf('Time');
var $elm$time$Time$every = F2(
	function (interval, tagger) {
		return $elm$time$Time$subscription(
			A2($elm$time$Time$Every, interval, tagger));
	});
var $elm$core$Platform$Sub$map = _Platform_map;
var $author$project$Frontend$BrowserElementInitWithTime$subscriptions = F2(
	function (configuration, state) {
		if (!state.$) {
			return A2($elm$time$Time$every, 500, $author$project$Frontend$BrowserElementInitWithTime$TimeHasArrivedEvent);
		} else {
			var initializedState = state.a;
			return A2(
				$elm$core$Platform$Sub$map,
				$author$project$Frontend$BrowserElementInitWithTime$InitializedEvent,
				configuration.ey(initializedState));
		}
	});
var $author$project$Frontend$BrowserElementInitWithTime$InitializedState = function (a) {
	return {$: 1, a: a};
};
var $author$project$Frontend$BrowserElementInitWithTime$completeInit = F3(
	function (configuration, time, stateBefore) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (event, _v0) {
					var state = _v0.a;
					var cmdBefore = _v0.b;
					var _v1 = A2(configuration.dq, event, state);
					var nextState = _v1.a;
					var nextCmd = _v1.b;
					return _Utils_Tuple2(
						nextState,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[cmdBefore, nextCmd])));
				}),
			A2(configuration.lo, stateBefore.dU, time),
			stateBefore.b6);
	});
var $elm$core$Platform$Cmd$map = _Platform_map;
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $author$project$Frontend$BrowserElementInitWithTime$update = F3(
	function (configuration, event, state) {
		if (!state.$) {
			var initState = state.a;
			if (!event.$) {
				var time = event.a;
				return A2(
					$elm$core$Tuple$mapSecond,
					$elm$core$Platform$Cmd$map($author$project$Frontend$BrowserElementInitWithTime$InitializedEvent),
					A2(
						$elm$core$Tuple$mapFirst,
						$author$project$Frontend$BrowserElementInitWithTime$InitializedState,
						A3($author$project$Frontend$BrowserElementInitWithTime$completeInit, configuration, time, initState)));
			} else {
				var initializedEvent = event.a;
				return _Utils_Tuple2(
					$author$project$Frontend$BrowserElementInitWithTime$WaitingForTimeState(
						_Utils_update(
							initState,
							{
								b6: A2($elm$core$List$cons, initializedEvent, initState.b6)
							})),
					$elm$core$Platform$Cmd$none);
			}
		} else {
			var initialized = state.a;
			if (event.$ === 1) {
				var initializedEvent = event.a;
				return A2(
					$elm$core$Tuple$mapSecond,
					$elm$core$Platform$Cmd$map($author$project$Frontend$BrowserElementInitWithTime$InitializedEvent),
					A2(
						$elm$core$Tuple$mapFirst,
						$author$project$Frontend$BrowserElementInitWithTime$InitializedState,
						A2(configuration.dq, initializedEvent, initialized)));
			} else {
				return _Utils_Tuple2(state, $elm$core$Platform$Cmd$none);
			}
		}
	});
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
var $author$project$Frontend$BrowserElementInitWithTime$view = F2(
	function (configuration, state) {
		if (!state.$) {
			return A2($elm$html$Html$map, $author$project$Frontend$BrowserElementInitWithTime$InitializedEvent, configuration.jA);
		} else {
			var initializedState = state.a;
			return A2(
				$elm$html$Html$map,
				$author$project$Frontend$BrowserElementInitWithTime$InitializedEvent,
				configuration.eG(initializedState));
		}
	});
var $author$project$Frontend$BrowserElementInitWithTime$element = function (configuration) {
	return $elm$browser$Browser$element(
		{
			lo: $author$project$Frontend$BrowserElementInitWithTime$init,
			ey: $author$project$Frontend$BrowserElementInitWithTime$subscriptions(configuration),
			dq: $author$project$Frontend$BrowserElementInitWithTime$update(configuration),
			eG: $author$project$Frontend$BrowserElementInitWithTime$view(configuration)
		});
};
var $author$project$Frontend$Main$BrowserOnResizeEvent = function (a) {
	return {$: 14, a: a};
};
var $author$project$HostInterface$CheckInstallStatus = {$: 1};
var $author$project$Frontend$Main$CheckingInstallation = {$: 0};
var $author$project$HostInterface$ReadInitialEvents = {$: 0};
var $author$project$Frontend$Main$SequenceEvent = function (a) {
	return {$: 17, a: a};
};
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			A2(
				$elm$core$Task$onError,
				A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
					$elm$core$Result$Err),
				A2(
					$elm$core$Task$andThen,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Ok),
					task)));
	});
var $elm$browser$Browser$Dom$getViewport = _Browser_withWindow(_Browser_getViewport);
var $author$project$Frontend$Main$ReadCatalogResponseEvent = function (a) {
	return {$: 16, a: a};
};
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 2};
var $elm$http$Http$Receiving = function (a) {
	return {$: 1, a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$Timeout_ = {$: 1};
var $elm$core$Maybe$isJust = function (maybe) {
	if (!maybe.$) {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === -1) && (dict.d.$ === -1)) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.e.d.$ === -1) && (!dict.e.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.d.d.$ === -1) && (!dict.d.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === -1) && (!left.a)) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === -1) && (right.a === 1)) {
					if (right.d.$ === -1) {
						if (right.d.a === 1) {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === -1) && (dict.d.$ === -1)) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor === 1) {
			if ((lLeft.$ === -1) && (!lLeft.a)) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === -1) {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === -2) {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === -1) && (left.a === 1)) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === -1) && (!lLeft.a)) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === -1) {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === -1) {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === -1) {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (!_v0.$) {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (!result.$) {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$http$Http$BadBody = function (a) {
	return {$: 4, a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 3, a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$NetworkError = {$: 2};
var $elm$http$Http$Timeout = {$: 1};
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 0:
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 1:
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 2:
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 3:
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.mV));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectJson = F2(
	function (toMsg, decoder) {
		return A2(
			$elm$http$Http$expectStringResponse,
			toMsg,
			$elm$http$Http$resolve(
				function (string) {
					return A2(
						$elm$core$Result$mapError,
						$elm$json$Json$Decode$errorToString,
						A2($elm$json$Json$Decode$decodeString, decoder, string));
				}));
	});
var $elm$http$Http$emptyBody = _Http_emptyBody;
var $elm$http$Http$Request = function (a) {
	return {$: 1, a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {$8: reqs, i5: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (!cmd.$) {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 1) {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.jl;
							if (_v4.$ === 1) {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.$8));
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (!_v0.$) {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.i5)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (!cmd.$) {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					jZ: r.jZ,
					ff: r.ff,
					f2: A2(_Http_mapExpect, func, r.f2),
					gq: r.gq,
					lO: r.lO,
					no: r.no,
					jl: r.jl,
					eC: r.eC
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{jZ: false, ff: r.ff, f2: r.f2, gq: r.gq, lO: r.lO, no: r.no, jl: r.jl, eC: r.eC}));
};
var $elm$http$Http$get = function (r) {
	return $elm$http$Http$request(
		{ff: $elm$http$Http$emptyBody, f2: r.f2, gq: _List_Nil, lO: 'GET', no: $elm$core$Maybe$Nothing, jl: $elm$core$Maybe$Nothing, eC: r.eC});
};
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$list = _Json_decodeList;
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List = $elm$json$Json$Decode$list;
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$index = _Json_decodeIndex;
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$json$Json$Decode$field,
				'Nothing',
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)),
				A2(
				$elm$json$Json$Decode$field,
				'Just',
				A2(
					$elm$json$Json$Decode$map,
					$elm$core$Maybe$Just,
					A2($elm$json$Json$Decode$index, 0, decoder))),
				A2(
				$elm$json$Json$Decode$field,
				'Just',
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)),
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing)
			]));
};
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap = $elm$json$Json$Decode$map2($elm$core$Basics$apR);
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames = F3(
	function (fieldName, alternateNames, decoder) {
		return $elm$json$Json$Decode$oneOf(
			A2(
				$elm$core$List$map,
				function (name) {
					return A2($elm$json$Json$Decode$field, name, decoder);
				},
				A2($elm$core$List$cons, fieldName, alternateNames)));
	});
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_fa49bd5946 = $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List(
	A2(
		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
		A3(
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
			'recentRunningHours',
			_List_fromArray(
				['RecentRunningHours']),
			$elm$json$Json$Decode$int),
		A2(
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
			A3(
				$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
				'totalRunningHours',
				_List_fromArray(
					['TotalRunningHours']),
				$elm$json$Json$Decode$int),
			A2(
				$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
				A3(
					$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
					'sources',
					_List_fromArray(
						['Sources']),
					$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string)),
				A2(
					$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
					A3(
						$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
						'propertiesFromCode',
						_List_fromArray(
							['PropertiesFromCode']),
						A2(
							$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
							A3(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
								'pathToMainFile',
								_List_fromArray(
									['PathToMainFile']),
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string))),
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'frameworkId',
									_List_fromArray(
										['FrameworkId']),
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'descriptionText',
										_List_fromArray(
											['DescriptionText']),
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'authorsForumUsernames',
											_List_fromArray(
												['AuthorsForumUsernames']),
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string))),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'tags',
												_List_fromArray(
													['Tags']),
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string))),
											$elm$json$Json$Decode$succeed(
												F5(
													function (tags, authorsForumUsernames, descriptionText, frameworkId, pathToMainFile) {
														return {aG: authorsForumUsernames, aL: descriptionText, aO: frameworkId, aT: pathToMainFile, i8: tags};
													})))))))),
					A2(
						$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
						A3(
							$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
							'appId',
							_List_fromArray(
								['AppId']),
							$elm$json$Json$Decode$string),
						$elm$json$Json$Decode$succeed(
							F5(
								function (appId, propertiesFromCode, sources, totalRunningHours, recentRunningHours) {
									return {e4: appId, bB: propertiesFromCode, h8: recentRunningHours, iV: sources, jj: totalRunningHours};
								}))))))));
var $author$project$CompilationInterface$GenerateJsonConverters$jsonDecodeCatalog = $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_fa49bd5946;
var $author$project$Reactor$readCatalogUrl = 'https://catalog.botlab.org/frontend-api/catalog';
var $author$project$Frontend$Main$readCatalogCmd = $elm$http$Http$get(
	{
		f2: A2($elm$http$Http$expectJson, $author$project$Frontend$Main$ReadCatalogResponseEvent, $author$project$CompilationInterface$GenerateJsonConverters$jsonDecodeCatalog),
		eC: $author$project$Reactor$readCatalogUrl
	});
var $elm$core$Basics$round = _Basics_round;
var $author$project$Frontend$Main$MessageToHostResultEvent = F2(
	function (a, b) {
		return {$: 12, a: a, b: b};
	});
var $author$project$HostInterface$CheckInstallStatusResponse = function (a) {
	return {$: 0, a: a};
};
var $author$project$HostInterface$InstallResponse = function (a) {
	return {$: 1, a: a};
};
var $author$project$HostInterface$ListLocalFileSystemDirectoryContentsResponse = function (a) {
	return {$: 4, a: a};
};
var $author$project$HostInterface$ListLocalPlaySessionsNamesResponse = function (a) {
	return {$: 6, a: a};
};
var $author$project$HostInterface$LoadArtifactResponse = function (a) {
	return {$: 7, a: a};
};
var $author$project$HostInterface$LoadPlaySessionSummaryResult = F2(
	function (a, b) {
		return {$: 13, a: a, b: b};
	});
var $author$project$HostInterface$LoadSessionAgentEventByIndexResult = F3(
	function (a, b, c) {
		return {$: 14, a: a, b: b, c: c};
	});
var $author$project$HostInterface$LoadedBundledBot = function (a) {
	return {$: 8, a: a};
};
var $author$project$HostInterface$LoadedOnlineSessionKey = function (a) {
	return {$: 11, a: a};
};
var $author$project$HostInterface$LocalBotLabInstancesSnapshotEvent = function (a) {
	return {$: 3, a: a};
};
var $author$project$HostInterface$PlaySessionStatus = function (a) {
	return {$: 10, a: a};
};
var $author$project$HostInterface$ReadClientSettingsEvent = function (a) {
	return {$: 2, a: a};
};
var $author$project$HostInterface$StartArguments = function (a) {
	return {$: 5, a: a};
};
var $author$project$HostInterface$StartPlaySessionResponse = F2(
	function (a, b) {
		return {$: 9, a: a, b: b};
	});
var $author$project$HostInterface$TestBotSettingsResponse = F2(
	function (a, b) {
		return {$: 15, a: a, b: b};
	});
var $author$project$HostInterface$TestOnlineSessionKeyResult = F2(
	function (a, b) {
		return {$: 12, a: a, b: b};
	});
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $author$project$HostInterface$FromPathAgentEnvironment = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$HostInterface$LiveAgentEnvironment = {$: 0};
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull = function (valueIfNotNull) {
	return A2(
		$elm$json$Json$Decode$andThen,
		function (asValue) {
			return _Utils_eq(asValue, $elm$json$Json$Encode$null) ? $elm$json$Json$Decode$fail('Is null.') : $elm$json$Json$Decode$succeed(valueIfNotNull);
		},
		$elm$json$Json$Decode$value);
};
var $elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		$elm$json$Json$Decode$andThen,
		thunk,
		$elm$json$Json$Decode$succeed(0));
};
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_HostInterface_AgentEnvironment = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'FromPathAgentEnvironment',
			$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$HostInterface$FromPathAgentEnvironment,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string),
						A2(
							$elm$json$Json$Decode$index,
							1,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'replaceBotSettings',
									_List_fromArray(
										['ReplaceBotSettings']),
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
								$elm$json$Json$Decode$succeed(
									function (replaceBotSettings) {
										return {ie: replaceBotSettings};
									}))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'LiveAgentEnvironment',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull($author$project$HostInterface$LiveAgentEnvironment))
		]));
var $author$project$HostInterface$DirectoryDirectoryContent = 1;
var $author$project$HostInterface$FileDirectoryContent = 0;
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_HostInterface_FileSystemDirectoryContent = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'DirectoryDirectoryContent',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull(1)),
			A2(
			$elm$json$Json$Decode$field,
			'FileDirectoryContent',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull(0))
		]));
var $author$project$HostInterface$FinishedState = function (a) {
	return {$: 2, a: a};
};
var $author$project$HostInterface$PausedState = {$: 1};
var $author$project$HostInterface$RunningState = {$: 0};
var $author$project$HostInterface$BotResponseFinishReason = {$: 0};
var $author$project$HostInterface$ConfiguredLengthLimitFinishReason = {$: 2};
var $author$project$HostInterface$FailedToContinueOnlineSessionFinishReason = function (a) {
	return {$: 4, a: a};
};
var $author$project$HostInterface$OfflineSessionLengthLimitFinishReason = {$: 3};
var $author$project$HostInterface$RuntimeExceptionFinishReason = function (a) {
	return {$: 6, a: a};
};
var $author$project$HostInterface$SimulationCompleteFinishReason = {$: 5};
var $author$project$HostInterface$UserStoppedFinishReason = {$: 1};
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_HostInterface_PlaySessionFinishReason = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'BotResponseFinishReason',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull($author$project$HostInterface$BotResponseFinishReason)),
			A2(
			$elm$json$Json$Decode$field,
			'ConfiguredLengthLimitFinishReason',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull($author$project$HostInterface$ConfiguredLengthLimitFinishReason)),
			A2(
			$elm$json$Json$Decode$field,
			'FailedToContinueOnlineSessionFinishReason',
			$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$HostInterface$FailedToContinueOnlineSessionFinishReason,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'OfflineSessionLengthLimitFinishReason',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull($author$project$HostInterface$OfflineSessionLengthLimitFinishReason)),
			A2(
			$elm$json$Json$Decode$field,
			'RuntimeExceptionFinishReason',
			$elm$json$Json$Decode$lazy(
				function (_v1) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$HostInterface$RuntimeExceptionFinishReason,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'SimulationCompleteFinishReason',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull($author$project$HostInterface$SimulationCompleteFinishReason)),
			A2(
			$elm$json$Json$Decode$field,
			'UserStoppedFinishReason',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull($author$project$HostInterface$UserStoppedFinishReason))
		]));
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_HostInterface_SessionControlState = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'FinishedState',
			$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$HostInterface$FinishedState,
						A2($elm$json$Json$Decode$index, 0, $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_HostInterface_PlaySessionFinishReason));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'PausedState',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull($author$project$HostInterface$PausedState)),
			A2(
			$elm$json$Json$Decode$field,
			'RunningState',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull($author$project$HostInterface$RunningState))
		]));
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result = F2(
	function (decodeErr, decodeOk) {
		return $elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$json$Json$Decode$map,
					$elm$core$Result$Err,
					A2(
						$elm$json$Json$Decode$field,
						'Err',
						A2($elm$json$Json$Decode$index, 0, decodeErr))),
					A2(
					$elm$json$Json$Decode$map,
					$elm$core$Result$Ok,
					A2(
						$elm$json$Json$Decode$field,
						'Ok',
						A2($elm$json$Json$Decode$index, 0, decodeOk))),
					A2(
					$elm$json$Json$Decode$map,
					$elm$core$Result$Err,
					A2($elm$json$Json$Decode$field, 'Err', decodeErr)),
					A2(
					$elm$json$Json$Decode$map,
					$elm$core$Result$Ok,
					A2($elm$json$Json$Decode$field, 'Ok', decodeOk))
				]));
	});
var $elm$json$Json$Decode$map3 = _Json_map3;
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_HostInterface_EventFromHost = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'CheckInstallStatusResponse',
			$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$HostInterface$CheckInstallStatusResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'isInstalled',
									_List_fromArray(
										['IsInstalled']),
									$elm$json$Json$Decode$bool),
								$elm$json$Json$Decode$succeed(
									function (isInstalled) {
										return {gU: isInstalled};
									}))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'InstallResponse',
			$elm$json$Json$Decode$lazy(
				function (_v1) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$HostInterface$InstallResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2($author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result, $elm$json$Json$Decode$string, $elm$json$Json$Decode$string)));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'ListLocalFileSystemDirectoryContentsResponse',
			$elm$json$Json$Decode$lazy(
				function (_v2) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$HostInterface$ListLocalFileSystemDirectoryContentsResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List(
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'path',
											_List_fromArray(
												['Path']),
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string)),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'content',
												_List_fromArray(
													['Content']),
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_HostInterface_FileSystemDirectoryContent),
											$elm$json$Json$Decode$succeed(
												F2(
													function (content, path) {
														return {fG: content, K: path};
													}))))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'ListLocalPlaySessionsNamesResponse',
			$elm$json$Json$Decode$lazy(
				function (_v3) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$HostInterface$ListLocalPlaySessionsNamesResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string)));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'LoadArtifactResponse',
			$elm$json$Json$Decode$lazy(
				function (_v4) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$HostInterface$LoadArtifactResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result,
								$elm$json$Json$Decode$string,
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'tryParseAsBotResult',
										_List_fromArray(
											['TryParseAsBotResult']),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result,
											$elm$json$Json$Decode$string,
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'pathToMainFile',
													_List_fromArray(
														['PathToMainFile']),
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string))),
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'frameworkId',
														_List_fromArray(
															['FrameworkId']),
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'catalogTags',
															_List_fromArray(
																['CatalogTags']),
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string))),
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'authorsForumUsernames',
																_List_fromArray(
																	['AuthorsForumUsernames']),
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string))),
															A2(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																A3(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																	'descriptionText',
																	_List_fromArray(
																		['DescriptionText']),
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
																$elm$json$Json$Decode$succeed(
																	F5(
																		function (descriptionText, authorsForumUsernames, catalogTags, frameworkId, pathToMainFile) {
																			return {aG: authorsForumUsernames, bn: catalogTags, aL: descriptionText, aO: frameworkId, aT: pathToMainFile};
																		}))))))))),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'files',
											_List_fromArray(
												['Files']),
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List(
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'contentBase64',
														_List_fromArray(
															['ContentBase64']),
														$elm$json$Json$Decode$string),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'path',
															_List_fromArray(
																['Path']),
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string)),
														$elm$json$Json$Decode$succeed(
															F2(
																function (path, contentBase64) {
																	return {P: contentBase64, K: path};
																})))))),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'artifactId',
												_List_fromArray(
													['ArtifactId']),
												$elm$json$Json$Decode$string),
											$elm$json$Json$Decode$succeed(
												F3(
													function (artifactId, files, tryParseAsBotResult) {
														return {bj: artifactId, br: files, bJ: tryParseAsBotResult};
													}))))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'LoadPlaySessionSummaryResult',
			$elm$json$Json$Decode$lazy(
				function (_v5) {
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$HostInterface$LoadPlaySessionSummaryResult,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string),
						A2(
							$elm$json$Json$Decode$index,
							1,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result,
								$elm$json$Json$Decode$string,
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'loadBotResult',
										_List_fromArray(
											['LoadBotResult']),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result,
											$elm$json$Json$Decode$string,
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'tryParseAsBotResult',
													_List_fromArray(
														['TryParseAsBotResult']),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result,
														$elm$json$Json$Decode$string,
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'pathToMainFile',
																_List_fromArray(
																	['PathToMainFile']),
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string))),
															A2(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																A3(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																	'frameworkId',
																	_List_fromArray(
																		['FrameworkId']),
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
																A2(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																	A3(
																		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																		'catalogTags',
																		_List_fromArray(
																			['CatalogTags']),
																		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
																			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string))),
																	A2(
																		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																		A3(
																			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																			'authorsForumUsernames',
																			_List_fromArray(
																				['AuthorsForumUsernames']),
																			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
																				$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string))),
																		A2(
																			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																			A3(
																				$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																				'descriptionText',
																				_List_fromArray(
																					['DescriptionText']),
																				$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
																			$elm$json$Json$Decode$succeed(
																				F5(
																					function (descriptionText, authorsForumUsernames, catalogTags, frameworkId, pathToMainFile) {
																						return {aG: authorsForumUsernames, bn: catalogTags, aL: descriptionText, aO: frameworkId, aT: pathToMainFile};
																					}))))))))),
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'files',
														_List_fromArray(
															['Files']),
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List(
															A2(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																A3(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																	'contentBase64',
																	_List_fromArray(
																		['ContentBase64']),
																	$elm$json$Json$Decode$string),
																A2(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																	A3(
																		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																		'path',
																		_List_fromArray(
																			['Path']),
																		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string)),
																	$elm$json$Json$Decode$succeed(
																		F2(
																			function (path, contentBase64) {
																				return {P: contentBase64, K: path};
																			})))))),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'artifactId',
															_List_fromArray(
																['ArtifactId']),
															$elm$json$Json$Decode$string),
														$elm$json$Json$Decode$succeed(
															F3(
																function (artifactId, files, tryParseAsBotResult) {
																	return {bj: artifactId, br: files, bJ: tryParseAsBotResult};
																}))))))),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'environmentId',
											_List_fromArray(
												['EnvironmentId']),
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'foundBotComponent',
												_List_fromArray(
													['FoundBotComponent']),
												$elm$json$Json$Decode$bool),
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'durationSeconds',
													_List_fromArray(
														['DurationSeconds']),
													$elm$json$Json$Decode$int),
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'firstAgentEventPosixTime',
														_List_fromArray(
															['FirstAgentEventPosixTime']),
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$int)),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'agentEventCount',
															_List_fromArray(
																['AgentEventCount']),
															$elm$json$Json$Decode$int),
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'onlineSessionId',
																_List_fromArray(
																	['OnlineSessionId']),
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
															A2(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																A3(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																	'botFrameworkId',
																	_List_fromArray(
																		['BotFrameworkId']),
																	$elm$json$Json$Decode$string),
																A2(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																	A3(
																		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																		'botId',
																		_List_fromArray(
																			['BotId']),
																		A2($author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result, $elm$json$Json$Decode$string, $elm$json$Json$Decode$string)),
																	A2(
																		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																		A3(
																			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																			'machineName',
																			_List_fromArray(
																				['MachineName']),
																			$elm$json$Json$Decode$string),
																		A2(
																			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																			A3(
																				$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																				'engineVersion',
																				_List_fromArray(
																					['EngineVersion']),
																				$elm$json$Json$Decode$string),
																			$elm$json$Json$Decode$succeed(
																				function (engineVersion) {
																					return function (machineName) {
																						return function (botId) {
																							return function (botFrameworkId) {
																								return function (onlineSessionId) {
																									return function (agentEventCount) {
																										return function (firstAgentEventPosixTime) {
																											return function (durationSeconds) {
																												return function (foundBotComponent) {
																													return function (environmentId) {
																														return function (loadBotResult) {
																															return {eX: agentEventCount, fh: botFrameworkId, bl: botId, fT: durationSeconds, fW: engineVersion, fY: environmentId, f8: firstAgentEventPosixTime, gg: foundBotComponent, g7: loadBotResult, ha: machineName, bz: onlineSessionId};
																														};
																													};
																												};
																											};
																										};
																									};
																								};
																							};
																						};
																					};
																				})))))))))))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'LoadSessionAgentEventByIndexResult',
			$elm$json$Json$Decode$lazy(
				function (_v6) {
					return A4(
						$elm$json$Json$Decode$map3,
						$author$project$HostInterface$LoadSessionAgentEventByIndexResult,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string),
						A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$int),
						A2(
							$elm$json$Json$Decode$index,
							2,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result,
								$elm$json$Json$Decode$string,
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'agentEventResponseString',
										_List_fromArray(
											['AgentEventResponseString']),
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'agentEventString',
											_List_fromArray(
												['AgentEventString']),
											A2($author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result, $elm$json$Json$Decode$string, $elm$json$Json$Decode$string)),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'timeInSessionMilli',
												_List_fromArray(
													['TimeInSessionMilli']),
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$int)),
											$elm$json$Json$Decode$succeed(
												F3(
													function (timeInSessionMilli, agentEventString, agentEventResponseString) {
														return {e_: agentEventResponseString, e$: agentEventString, jf: timeInSessionMilli};
													}))))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'LoadedBundledBot',
			$elm$json$Json$Decode$lazy(
				function (_v7) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$HostInterface$LoadedBundledBot,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result,
								$elm$json$Json$Decode$string,
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'tryParseAsBotResult',
										_List_fromArray(
											['TryParseAsBotResult']),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result,
											$elm$json$Json$Decode$string,
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'pathToMainFile',
													_List_fromArray(
														['PathToMainFile']),
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string))),
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'frameworkId',
														_List_fromArray(
															['FrameworkId']),
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'catalogTags',
															_List_fromArray(
																['CatalogTags']),
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string))),
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'authorsForumUsernames',
																_List_fromArray(
																	['AuthorsForumUsernames']),
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string))),
															A2(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																A3(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																	'descriptionText',
																	_List_fromArray(
																		['DescriptionText']),
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
																$elm$json$Json$Decode$succeed(
																	F5(
																		function (descriptionText, authorsForumUsernames, catalogTags, frameworkId, pathToMainFile) {
																			return {aG: authorsForumUsernames, bn: catalogTags, aL: descriptionText, aO: frameworkId, aT: pathToMainFile};
																		}))))))))),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'files',
											_List_fromArray(
												['Files']),
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List(
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'contentBase64',
														_List_fromArray(
															['ContentBase64']),
														$elm$json$Json$Decode$string),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'path',
															_List_fromArray(
																['Path']),
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string)),
														$elm$json$Json$Decode$succeed(
															F2(
																function (path, contentBase64) {
																	return {P: contentBase64, K: path};
																})))))),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'artifactId',
												_List_fromArray(
													['ArtifactId']),
												$elm$json$Json$Decode$string),
											$elm$json$Json$Decode$succeed(
												F3(
													function (artifactId, files, tryParseAsBotResult) {
														return {bj: artifactId, br: files, bJ: tryParseAsBotResult};
													}))))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'LoadedOnlineSessionKey',
			$elm$json$Json$Decode$lazy(
				function (_v8) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$HostInterface$LoadedOnlineSessionKey,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'LocalBotLabInstancesSnapshotEvent',
			$elm$json$Json$Decode$lazy(
				function (_v9) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$HostInterface$LocalBotLabInstancesSnapshotEvent,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'schedulingInstanceContactInfo',
									_List_fromArray(
										['SchedulingInstanceContactInfo']),
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'versionId',
												_List_fromArray(
													['VersionId']),
												$elm$json$Json$Decode$string),
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'httpPort',
													_List_fromArray(
														['HttpPort']),
													$elm$json$Json$Decode$int),
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'processId',
														_List_fromArray(
															['ProcessId']),
														$elm$json$Json$Decode$int),
													$elm$json$Json$Decode$succeed(
														F3(
															function (processId, httpPort, versionId) {
																return {bs: httpPort, Q: processId, bK: versionId};
															}))))))),
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'selfInstanceContactInfo',
										_List_fromArray(
											['SelfInstanceContactInfo']),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'versionId',
												_List_fromArray(
													['VersionId']),
												$elm$json$Json$Decode$string),
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'httpPort',
													_List_fromArray(
														['HttpPort']),
													$elm$json$Json$Decode$int),
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'processId',
														_List_fromArray(
															['ProcessId']),
														$elm$json$Json$Decode$int),
													$elm$json$Json$Decode$succeed(
														F3(
															function (processId, httpPort, versionId) {
																return {bs: httpPort, Q: processId, bK: versionId};
															})))))),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'otherInstances',
											_List_fromArray(
												['OtherInstances']),
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List(
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'requiringInputFocusSoon',
														_List_fromArray(
															['RequiringInputFocusSoon']),
														$elm$json$Json$Decode$bool),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'lastInputFocusRequestTimeMilliseconds',
															_List_fromArray(
																['LastInputFocusRequestTimeMilliseconds']),
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$int)),
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'runningBot',
																_List_fromArray(
																	['RunningBot']),
																$elm$json$Json$Decode$bool),
															A2(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																A3(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																	'viewingPlaySession',
																	_List_fromArray(
																		['ViewingPlaySession']),
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
																A2(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																	A3(
																		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																		'contactInfo',
																		_List_fromArray(
																			['ContactInfo']),
																		A2(
																			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																			A3(
																				$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																				'versionId',
																				_List_fromArray(
																					['VersionId']),
																				$elm$json$Json$Decode$string),
																			A2(
																				$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																				A3(
																					$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																					'httpPort',
																					_List_fromArray(
																						['HttpPort']),
																					$elm$json$Json$Decode$int),
																				A2(
																					$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																					A3(
																						$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																						'processId',
																						_List_fromArray(
																							['ProcessId']),
																						$elm$json$Json$Decode$int),
																					$elm$json$Json$Decode$succeed(
																						F3(
																							function (processId, httpPort, versionId) {
																								return {bs: httpPort, Q: processId, bK: versionId};
																							})))))),
																	$elm$json$Json$Decode$succeed(
																		F5(
																			function (contactInfo, viewingPlaySession, runningBot, lastInputFocusRequestTimeMilliseconds, requiringInputFocusSoon) {
																				return {cA: contactInfo, g0: lastInputFocusRequestTimeMilliseconds, ih: requiringInputFocusSoon, ir: runningBot, jB: viewingPlaySession};
																			}))))))))),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'endTimeMilliseconds',
												_List_fromArray(
													['EndTimeMilliseconds']),
												$elm$json$Json$Decode$int),
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'beginTimeMilliseconds',
													_List_fromArray(
														['BeginTimeMilliseconds']),
													$elm$json$Json$Decode$int),
												$elm$json$Json$Decode$succeed(
													F5(
														function (beginTimeMilliseconds, endTimeMilliseconds, otherInstances, selfInstanceContactInfo, schedulingInstanceContactInfo) {
															return {fa: beginTimeMilliseconds, fV: endTimeMilliseconds, hK: otherInstances, iv: schedulingInstanceContactInfo, dd: selfInstanceContactInfo};
														})))))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'PlaySessionStatus',
			$elm$json$Json$Decode$lazy(
				function (_v10) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$HostInterface$PlaySessionStatus,
						A2(
							$elm$json$Json$Decode$index,
							0,
							$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'status',
										_List_fromArray(
											['Status']),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'inputFocusSchedulingReport',
												_List_fromArray(
													['InputFocusSchedulingReport']),
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'acquisitionRequestSumWaitMilliseconds',
														_List_fromArray(
															['AcquisitionRequestSumWaitMilliseconds']),
														$elm$json$Json$Decode$int),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'acquisitionSuccessCount',
															_List_fromArray(
																['AcquisitionSuccessCount']),
															$elm$json$Json$Decode$int),
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'acquisitionRequestCount',
																_List_fromArray(
																	['AcquisitionRequestCount']),
																$elm$json$Json$Decode$int),
															$elm$json$Json$Decode$succeed(
																F3(
																	function (acquisitionRequestCount, acquisitionSuccessCount, acquisitionRequestSumWaitMilliseconds) {
																		return {ch: acquisitionRequestCount, ci: acquisitionRequestSumWaitMilliseconds, cj: acquisitionSuccessCount};
																	})))))),
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'queuedAgentEventsCount',
													_List_fromArray(
														['QueuedAgentEventsCount']),
													$elm$json$Json$Decode$int),
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'tasksInProgress',
														_List_fromArray(
															['TasksInProgress']),
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string)),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'lastBotStepTimePosixMilli',
															_List_fromArray(
																['LastBotStepTimePosixMilli']),
															$elm$json$Json$Decode$int),
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'controlState',
																_List_fromArray(
																	['ControlState']),
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_HostInterface_SessionControlState),
															A2(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																A3(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																	'onlineSessionId',
																	_List_fromArray(
																		['OnlineSessionId']),
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
																A2(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																	A3(
																		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																		'botStatusText',
																		_List_fromArray(
																			['BotStatusText']),
																		$elm$json$Json$Decode$string),
																	$elm$json$Json$Decode$succeed(
																		F7(
																			function (botStatusText, onlineSessionId, controlState, lastBotStepTimePosixMilli, tasksInProgress, queuedAgentEventsCount, inputFocusSchedulingReport) {
																				return {co: botStatusText, cF: controlState, aP: inputFocusSchedulingReport, cT: lastBotStepTimePosixMilli, bz: onlineSessionId, c5: queuedAgentEventsCount, dj: tasksInProgress};
																			})))))))))),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'sessionId',
											_List_fromArray(
												['SessionId']),
											$elm$json$Json$Decode$string),
										$elm$json$Json$Decode$succeed(
											F2(
												function (sessionId, status) {
													return {bD: sessionId, ar: status};
												})))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'ReadClientSettingsEvent',
			$elm$json$Json$Decode$lazy(
				function (_v11) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$HostInterface$ReadClientSettingsEvent,
						A2(
							$elm$json$Json$Decode$index,
							0,
							$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'playSessionRecordingDestination',
										_List_fromArray(
											['PlaySessionRecordingDestination']),
										$elm$json$Json$Decode$string),
									$elm$json$Json$Decode$succeed(
										function (playSessionRecordingDestination) {
											return {c4: playSessionRecordingDestination};
										})))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'StartArguments',
			$elm$json$Json$Decode$lazy(
				function (_v12) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$HostInterface$StartArguments,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'disableInputFocusScheduling',
									_List_fromArray(
										['DisableInputFocusScheduling']),
									$elm$json$Json$Decode$bool),
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'skipReviewConfig',
										_List_fromArray(
											['SkipReviewConfig']),
										$elm$json$Json$Decode$bool),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'environment',
											_List_fromArray(
												['Environment']),
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'detailedSessionRecording',
												_List_fromArray(
													['DetailedSessionRecording']),
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$bool)),
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'sessionLengthLimit',
													_List_fromArray(
														['SessionLengthLimit']),
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'pauseBotKeys',
														_List_fromArray(
															['PauseBotKeys']),
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'onlineSession',
															_List_fromArray(
																['OnlineSession']),
															$elm$json$Json$Decode$bool),
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'botSettings',
																_List_fromArray(
																	['BotSettings']),
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
															A2(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																A3(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																	'botProgramSourcePath',
																	_List_fromArray(
																		['BotProgramSourcePath']),
																	$elm$json$Json$Decode$string),
																$elm$json$Json$Decode$succeed(
																	F9(
																		function (botProgramSourcePath, botSettings, onlineSession, pauseBotKeys, sessionLengthLimit, detailedSessionRecording, environment, skipReviewConfig, disableInputFocusScheduling) {
																			return {fi: botProgramSourcePath, ke: botSettings, kQ: detailedSessionRecording, kT: disableInputFocusScheduling, kZ: environment, l2: onlineSession, hQ: pauseBotKeys, iK: sessionLengthLimit, iQ: skipReviewConfig};
																		})))))))))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'StartPlaySessionResponse',
			$elm$json$Json$Decode$lazy(
				function (_v13) {
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$HostInterface$StartPlaySessionResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'onlineSessionKey',
									_List_fromArray(
										['OnlineSessionKey']),
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'config',
										_List_fromArray(
											['Config']),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'disableInputFocusScheduling',
												_List_fromArray(
													['DisableInputFocusScheduling']),
												$elm$json$Json$Decode$bool),
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'onlineSession',
													_List_fromArray(
														['OnlineSession']),
													$elm$json$Json$Decode$bool),
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'environment',
														_List_fromArray(
															['Environment']),
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_HostInterface_AgentEnvironment),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'detailedSessionRecording',
															_List_fromArray(
																['DetailedSessionRecording']),
															$elm$json$Json$Decode$bool),
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'sessionLengthLimitMinutes',
																_List_fromArray(
																	['SessionLengthLimitMinutes']),
																$elm$json$Json$Decode$int),
															A2(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																A3(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																	'botSettings',
																	_List_fromArray(
																		['BotSettings']),
																	$elm$json$Json$Decode$string),
																A2(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																	A3(
																		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																		'pauseBotKeyCodes',
																		_List_fromArray(
																			['PauseBotKeyCodes']),
																		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$int)),
																	$elm$json$Json$Decode$succeed(
																		F7(
																			function (pauseBotKeyCodes, botSettings, sessionLengthLimitMinutes, detailedSessionRecording, environment, onlineSession, disableInputFocusScheduling) {
																				return {ke: botSettings, kQ: detailedSessionRecording, kT: disableInputFocusScheduling, kZ: environment, l2: onlineSession, me: pauseBotKeyCodes, mG: sessionLengthLimitMinutes};
																			})))))))))),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'botFiles',
											_List_fromArray(
												['BotFiles']),
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List(
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'contentBase64',
														_List_fromArray(
															['ContentBase64']),
														$elm$json$Json$Decode$string),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'path',
															_List_fromArray(
																['Path']),
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string)),
														$elm$json$Json$Decode$succeed(
															F2(
																function (path, contentBase64) {
																	return {P: contentBase64, K: path};
																})))))),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'sessionId',
												_List_fromArray(
													['SessionId']),
												$elm$json$Json$Decode$string),
											$elm$json$Json$Decode$succeed(
												F4(
													function (sessionId, botFiles, config, onlineSessionKey) {
														return {aH: botFiles, F: config, c0: onlineSessionKey, bD: sessionId};
													}))))))),
						A2(
							$elm$json$Json$Decode$index,
							1,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result,
								$elm$json$Json$Decode$string,
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'inputFocusSchedulingReport',
										_List_fromArray(
											['InputFocusSchedulingReport']),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'acquisitionRequestSumWaitMilliseconds',
												_List_fromArray(
													['AcquisitionRequestSumWaitMilliseconds']),
												$elm$json$Json$Decode$int),
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'acquisitionSuccessCount',
													_List_fromArray(
														['AcquisitionSuccessCount']),
													$elm$json$Json$Decode$int),
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'acquisitionRequestCount',
														_List_fromArray(
															['AcquisitionRequestCount']),
														$elm$json$Json$Decode$int),
													$elm$json$Json$Decode$succeed(
														F3(
															function (acquisitionRequestCount, acquisitionSuccessCount, acquisitionRequestSumWaitMilliseconds) {
																return {ch: acquisitionRequestCount, ci: acquisitionRequestSumWaitMilliseconds, cj: acquisitionSuccessCount};
															})))))),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'queuedAgentEventsCount',
											_List_fromArray(
												['QueuedAgentEventsCount']),
											$elm$json$Json$Decode$int),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'tasksInProgress',
												_List_fromArray(
													['TasksInProgress']),
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string)),
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'lastBotStepTimePosixMilli',
													_List_fromArray(
														['LastBotStepTimePosixMilli']),
													$elm$json$Json$Decode$int),
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'controlState',
														_List_fromArray(
															['ControlState']),
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_HostInterface_SessionControlState),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'onlineSessionId',
															_List_fromArray(
																['OnlineSessionId']),
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'botStatusText',
																_List_fromArray(
																	['BotStatusText']),
																$elm$json$Json$Decode$string),
															$elm$json$Json$Decode$succeed(
																F7(
																	function (botStatusText, onlineSessionId, controlState, lastBotStepTimePosixMilli, tasksInProgress, queuedAgentEventsCount, inputFocusSchedulingReport) {
																		return {co: botStatusText, cF: controlState, aP: inputFocusSchedulingReport, cT: lastBotStepTimePosixMilli, bz: onlineSessionId, c5: queuedAgentEventsCount, dj: tasksInProgress};
																	}))))))))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'TestBotSettingsResponse',
			$elm$json$Json$Decode$lazy(
				function (_v14) {
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$HostInterface$TestBotSettingsResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'botFiles',
									_List_fromArray(
										['BotFiles']),
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List(
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'contentBase64',
												_List_fromArray(
													['ContentBase64']),
												$elm$json$Json$Decode$string),
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'path',
													_List_fromArray(
														['Path']),
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string)),
												$elm$json$Json$Decode$succeed(
													F2(
														function (path, contentBase64) {
															return {P: contentBase64, K: path};
														})))))),
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'botSettings',
										_List_fromArray(
											['BotSettings']),
										$elm$json$Json$Decode$string),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'botId',
											_List_fromArray(
												['BotId']),
											$elm$json$Json$Decode$string),
										$elm$json$Json$Decode$succeed(
											F3(
												function (botId, botSettings, botFiles) {
													return {aH: botFiles, bl: botId, ke: botSettings};
												})))))),
						A2(
							$elm$json$Json$Decode$index,
							1,
							A2($author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result, $elm$json$Json$Decode$string, $elm$json$Json$Decode$string)));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'TestOnlineSessionKeyResult',
			$elm$json$Json$Decode$lazy(
				function (_v15) {
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$HostInterface$TestOnlineSessionKeyResult,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string),
						A2(
							$elm$json$Json$Decode$index,
							1,
							A2($author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result, $elm$json$Json$Decode$string, $elm$json$Json$Decode$int)));
				}))
		]));
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_ddecb7ad0d = $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_HostInterface_EventFromHost;
var $author$project$CompilationInterface$GenerateJsonConverters$jsonDecodeEventFromHost = $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_ddecb7ad0d;
var $author$project$Frontend$Main$expectMessageToHostResultEvent = function (message) {
	return A2(
		$elm$http$Http$expectStringResponse,
		$author$project$Frontend$Main$MessageToHostResultEvent(message),
		function (response) {
			switch (response.$) {
				case 0:
					var badUrl = response.a;
					return $elm$core$Result$Err('Bad Url: ' + badUrl);
				case 1:
					return $elm$core$Result$Err('Timeout');
				case 2:
					return $elm$core$Result$Err('Network Error');
				case 3:
					var metadata = response.a;
					var body = response.b;
					return $elm$core$Result$Err(
						'Bad status code: ' + ($elm$core$String$fromInt(metadata.mV) + (' from ' + (metadata.eC + (':\n' + body)))));
				default:
					var metadata = response.a;
					var bodyString = response.b;
					return A2(
						$elm$core$Result$mapError,
						A2(
							$elm$core$Basics$composeR,
							$elm$json$Json$Decode$errorToString,
							$elm$core$Basics$append('Failed to decode response from ' + (metadata.eC + ': '))),
						A2(
							$elm$json$Json$Decode$decodeString,
							$elm$json$Json$Decode$list($author$project$CompilationInterface$GenerateJsonConverters$jsonDecodeEventFromHost),
							bodyString));
			}
		});
};
var $elm$http$Http$jsonBody = function (value) {
	return A2(
		_Http_pair,
		'application/json',
		A2($elm$json$Json$Encode$encode, 0, value));
};
var $elm$json$Json$Encode$bool = _Json_wrap;
var $elm$json$Json$Encode$int = _Json_wrap;
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(0),
				entries));
	});
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(0),
			pairs));
};
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode__generic_Maybe = F2(
	function (encodeJust, valueToEncode) {
		if (valueToEncode.$ === 1) {
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Nothing',
						A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_Nil))
					]));
		} else {
			var just = valueToEncode.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Just',
						A2(
							$elm$json$Json$Encode$list,
							encodeJust,
							_List_fromArray(
								[just])))
					]));
		}
	});
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode_HostInterface_AgentEnvironment = function (valueToEncode) {
	if (valueToEncode.$ === 1) {
		var tagArgument0 = valueToEncode.a;
		var tagArgument1 = valueToEncode.b;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'FromPathAgentEnvironment',
					A2(
						$elm$json$Json$Encode$list,
						$elm$core$Basics$identity,
						_List_fromArray(
							[
								$elm$json$Json$Encode$string(tagArgument0),
								$elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'replaceBotSettings',
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode__generic_Maybe,
											function (type_arg) {
												return $elm$json$Json$Encode$string(type_arg);
											},
											tagArgument1.ie))
									]))
							])))
				]));
	} else {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'LiveAgentEnvironment',
					A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_Nil))
				]));
	}
};
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode__generic_List = $elm$json$Json$Encode$list;
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode_HostInterface_MessageToHost = function (valueToEncode) {
	switch (valueToEncode.$) {
		case 1:
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'CheckInstallStatus',
						A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_Nil))
					]));
		case 9:
			var tagArgument0 = valueToEncode.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ConfirmPlaySessionNotFinished',
						A2(
							$elm$json$Json$Encode$list,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$json$Json$Encode$string(tagArgument0)
								])))
					]));
		case 11:
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ContinuePlaySession',
						A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_Nil))
					]));
		case 12:
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'EndPlaySession',
						A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_Nil))
					]));
		case 16:
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ImportPlaySession',
						A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_Nil))
					]));
		case 5:
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Install',
						A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_Nil))
					]));
		case 3:
			var tagArgument0 = valueToEncode.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ListLocalFileSystemDirectoryContentsRequest',
						A2(
							$elm$json$Json$Encode$list,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$json$Json$Encode$string(tagArgument0)
								])))
					]));
		case 6:
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ListLocalPlaySessionsNames',
						A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_Nil))
					]));
		case 7:
			var tagArgument0 = valueToEncode.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'LoadArtifactFromPath',
						A2(
							$elm$json$Json$Encode$list,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$json$Json$Encode$string(tagArgument0)
								])))
					]));
		case 17:
			var tagArgument0 = valueToEncode.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'LoadPlaySessionSummary',
						A2(
							$elm$json$Json$Encode$list,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$json$Json$Encode$string(tagArgument0)
								])))
					]));
		case 18:
			var tagArgument0 = valueToEncode.a;
			var tagArgument1 = valueToEncode.b;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'LoadSessionAgentEventByIndex',
						A2(
							$elm$json$Json$Encode$list,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$json$Json$Encode$string(tagArgument0),
									$elm$json$Json$Encode$int(tagArgument1)
								])))
					]));
		case 10:
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'PausePlaySession',
						A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_Nil))
					]));
		case 2:
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ReadClientSettingsRequest',
						A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_Nil))
					]));
		case 0:
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'ReadInitialEvents',
						A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_Nil))
					]));
		case 13:
			var tagArgument0 = valueToEncode.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'SetAppWindowTitle',
						A2(
							$elm$json$Json$Encode$list,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$json$Json$Encode$string(tagArgument0)
								])))
					]));
		case 8:
			var tagArgument0 = valueToEncode.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'StartPlaySession',
						A2(
							$elm$json$Json$Encode$list,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'sessionId',
											$elm$json$Json$Encode$string(tagArgument0.bD)),
											_Utils_Tuple2(
											'botFiles',
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode__generic_List,
												function (type_arg) {
													return $elm$json$Json$Encode$object(
														_List_fromArray(
															[
																_Utils_Tuple2(
																'path',
																A2(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode__generic_List,
																	function (type_arg_) {
																		return $elm$json$Json$Encode$string(type_arg_);
																	},
																	type_arg.K)),
																_Utils_Tuple2(
																'contentBase64',
																$elm$json$Json$Encode$string(type_arg.P))
															]));
												},
												tagArgument0.aH)),
											_Utils_Tuple2(
											'config',
											$elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'pauseBotKeyCodes',
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode__generic_List,
															function (type_arg) {
																return $elm$json$Json$Encode$int(type_arg);
															},
															tagArgument0.F.me)),
														_Utils_Tuple2(
														'botSettings',
														$elm$json$Json$Encode$string(tagArgument0.F.ke)),
														_Utils_Tuple2(
														'sessionLengthLimitMinutes',
														$elm$json$Json$Encode$int(tagArgument0.F.mG)),
														_Utils_Tuple2(
														'detailedSessionRecording',
														$elm$json$Json$Encode$bool(tagArgument0.F.kQ)),
														_Utils_Tuple2(
														'environment',
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode_HostInterface_AgentEnvironment(tagArgument0.F.kZ)),
														_Utils_Tuple2(
														'onlineSession',
														$elm$json$Json$Encode$bool(tagArgument0.F.l2)),
														_Utils_Tuple2(
														'disableInputFocusScheduling',
														$elm$json$Json$Encode$bool(tagArgument0.F.kT))
													]))),
											_Utils_Tuple2(
											'onlineSessionKey',
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode__generic_Maybe,
												function (type_arg) {
													return $elm$json$Json$Encode$string(type_arg);
												},
												tagArgument0.c0))
										]))
								])))
					]));
		case 4:
			var tagArgument0 = valueToEncode.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'StoreClientSettingsRequest',
						A2(
							$elm$json$Json$Encode$list,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'playSessionRecordingDestination',
											$elm$json$Json$Encode$string(tagArgument0.c4))
										]))
								])))
					]));
		case 15:
			var tagArgument0 = valueToEncode.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'StoreOnlineSessionKey',
						A2(
							$elm$json$Json$Encode$list,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$json$Json$Encode$string(tagArgument0)
								])))
					]));
		case 19:
			var tagArgument0 = valueToEncode.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'TestBotSettingsRequest',
						A2(
							$elm$json$Json$Encode$list,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$json$Json$Encode$object(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'botId',
											$elm$json$Json$Encode$string(tagArgument0.bl)),
											_Utils_Tuple2(
											'botSettings',
											$elm$json$Json$Encode$string(tagArgument0.ke)),
											_Utils_Tuple2(
											'botFiles',
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode__generic_List,
												function (type_arg) {
													return $elm$json$Json$Encode$object(
														_List_fromArray(
															[
																_Utils_Tuple2(
																'path',
																A2(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode__generic_List,
																	function (type_arg_) {
																		return $elm$json$Json$Encode$string(type_arg_);
																	},
																	type_arg.K)),
																_Utils_Tuple2(
																'contentBase64',
																$elm$json$Json$Encode$string(type_arg.P))
															]));
												},
												tagArgument0.aH))
										]))
								])))
					]));
		default:
			var tagArgument0 = valueToEncode.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'TestOnlineSessionKey',
						A2(
							$elm$json$Json$Encode$list,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									$elm$json$Json$Encode$string(tagArgument0)
								])))
					]));
	}
};
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode_7f11885fae = function (valueToEncode) {
	return $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode_HostInterface_MessageToHost(valueToEncode);
};
var $author$project$CompilationInterface$GenerateJsonConverters$jsonEncodeMessageToHost = $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode_7f11885fae;
var $elm$http$Http$post = function (r) {
	return $elm$http$Http$request(
		{ff: r.ff, f2: r.f2, gq: _List_Nil, lO: 'POST', no: $elm$core$Maybe$Nothing, jl: $elm$core$Maybe$Nothing, eC: r.eC});
};
var $author$project$Frontend$View$pathCommonPrefix = _List_fromArray(
	['api', 'gui']);
var $author$project$Frontend$View$urlFromPath = A2(
	$elm$core$Basics$composeR,
	$elm$core$Basics$append($author$project$Frontend$View$pathCommonPrefix),
	A2(
		$elm$core$Basics$composeR,
		$elm$core$String$join('/'),
		$elm$core$Basics$append('/')));
var $author$project$Frontend$Main$sendMessageToHostCmd = function (message) {
	return $elm$http$Http$post(
		{
			ff: $elm$http$Http$jsonBody(
				$author$project$CompilationInterface$GenerateJsonConverters$jsonEncodeMessageToHost(message)),
			f2: $author$project$Frontend$Main$expectMessageToHostResultEvent(message),
			eC: $author$project$Frontend$View$urlFromPath(
				_List_fromArray(
					['request']))
		});
};
var $elm_community$result_extra$Result$Extra$unpack = F3(
	function (errFunc, okFunc, result) {
		if (!result.$) {
			var ok = result.a;
			return okFunc(ok);
		} else {
			var err = result.a;
			return errFunc(err);
		}
	});
var $author$project$Frontend$Main$init = F2(
	function (_v0, time) {
		var getViewportCmd = A2(
			$elm$core$Task$attempt,
			A2(
				$elm_community$result_extra$Result$Extra$unpack,
				$elm$core$Basics$always(
					$author$project$Frontend$Main$SequenceEvent(_List_Nil)),
				function (viewport) {
					return $author$project$Frontend$Main$BrowserOnResizeEvent(
						{
							_: $elm$core$Basics$round(viewport.jC._),
							u: $elm$core$Basics$round(viewport.jC.u)
						});
				}),
			$elm$browser$Browser$Dom$getViewport);
		return _Utils_Tuple2(
			{
				bm: _List_Nil,
				aI: $elm$core$Maybe$Nothing,
				aX: $elm$core$Maybe$Nothing,
				aQ: $author$project$Frontend$Main$CheckingInstallation,
				bu: $elm$core$Maybe$Nothing,
				bX: $elm$core$Maybe$Nothing,
				a4: $elm$core$Dict$empty,
				bZ: $elm$core$Maybe$Nothing,
				a5: $elm$core$Dict$empty,
				ay: $elm$core$Dict$empty,
				a7: _List_Nil,
				bw: $elm$core$Maybe$Nothing,
				q: $elm$core$Maybe$Nothing,
				b7: _List_Nil,
				be: $elm$core$Dict$empty,
				s: time,
				eJ: {_: 0, u: 0}
			},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						getViewportCmd,
						$author$project$Frontend$Main$sendMessageToHostCmd($author$project$HostInterface$ReadInitialEvents),
						$author$project$Frontend$Main$sendMessageToHostCmd($author$project$HostInterface$CheckInstallStatus),
						$author$project$Frontend$Main$readCatalogCmd
					])));
	});
var $author$project$Frontend$Main$TimeArrivedEvent = function (a) {
	return {$: 13, a: a};
};
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $elm$browser$Browser$Events$Window = 1;
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {hS: pids, i5: subs};
	});
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (!node) {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {f$: event, gZ: key};
	});
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (!node) {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.hS,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var key = _v0.gZ;
		var event = _v0.f$;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.i5);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onResize = function (func) {
	return A3(
		$elm$browser$Browser$Events$on,
		1,
		'resize',
		A2(
			$elm$json$Json$Decode$field,
			'target',
			A3(
				$elm$json$Json$Decode$map2,
				func,
				A2($elm$json$Json$Decode$field, 'innerWidth', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'innerHeight', $elm$json$Json$Decode$int))));
};
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $author$project$Frontend$Main$subscriptions = function (state) {
	var maybeTimeInterval = function () {
		var _v0 = state.q;
		if ((!_v0.$) && (!_v0.a.$)) {
			var runBot = _v0.a.a;
			var _v1 = runBot.bU;
			switch (_v1.$) {
				case 3:
					return $elm$core$Maybe$Just(500);
				case 1:
					return $elm$core$Maybe$Just(1000);
				default:
					return $elm$core$Maybe$Just(3000);
			}
		} else {
			return $elm$core$Maybe$Just(3000);
		}
	}();
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				A2(
				$elm$core$Maybe$withDefault,
				$elm$core$Platform$Sub$none,
				A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeR,
						$elm$time$Time$every,
						$elm$core$Basics$apR($author$project$Frontend$Main$TimeArrivedEvent)),
					maybeTimeInterval)),
				$elm$browser$Browser$Events$onResize(
				F2(
					function (width, height) {
						return $author$project$Frontend$Main$BrowserOnResizeEvent(
							{_: height, u: width});
					}))
			]));
};
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $author$project$HostInterface$ConfirmPlaySessionNotFinished = function (a) {
	return {$: 9, a: a};
};
var $author$project$Frontend$Main$DevToolsBranch = function (a) {
	return {$: 1, a: a};
};
var $author$project$HostInterface$ImportPlaySession = {$: 16};
var $author$project$HostInterface$Install = {$: 5};
var $author$project$HostInterface$ListLocalPlaySessionsNames = {$: 6};
var $author$project$HostInterface$LoadPlaySessionSummary = function (a) {
	return {$: 17, a: a};
};
var $author$project$HostInterface$ReadClientSettingsRequest = {$: 2};
var $author$project$Frontend$Main$RunBotBranch = function (a) {
	return {$: 0, a: a};
};
var $author$project$HostInterface$SetAppWindowTitle = function (a) {
	return {$: 13, a: a};
};
var $author$project$Frontend$Main$SkippedInstallation = {$: 2};
var $author$project$HostInterface$StoreClientSettingsRequest = function (a) {
	return {$: 4, a: a};
};
var $author$project$Frontend$Main$batchUpdates = F2(
	function (updates, stateBefore) {
		if (!updates.b) {
			return _Utils_Tuple2(stateBefore, $elm$core$Platform$Cmd$none);
		} else {
			var nextUpdate = updates.a;
			var remainingUpdates = updates.b;
			var _v1 = nextUpdate(stateBefore);
			var state = _v1.a;
			var cmd = _v1.b;
			return A2(
				$elm$core$Tuple$mapSecond,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$List$cons,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Basics$apR(
							_List_fromArray(
								[cmd])),
						$elm$core$Platform$Cmd$batch)),
				A2($author$project$Frontend$Main$batchUpdates, remainingUpdates, state));
		}
	});
var $author$project$Frontend$Main$ScrollResultEvent = function (a) {
	return {$: 15, a: a};
};
var $elm$file$File$Download$bytes = F3(
	function (name, mime, content) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$never,
			A3(
				_File_download,
				name,
				mime,
				_File_makeBytesSafeForInternetExplorer(content)));
	});
var $elm$file$File$Download$string = F3(
	function (name, mime, content) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$never,
			A3(_File_download, name, mime, content));
	});
var $elm$browser$Browser$Dom$getElement = _Browser_getElement;
var $elm$browser$Browser$Dom$getViewportOf = _Browser_getViewportOf;
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $elm$browser$Browser$Dom$setViewportOf = _Browser_setViewportOf;
var $author$project$Frontend$View$taskScrollIntoView = function (scrollIntoView) {
	return A2(
		$elm$core$Task$andThen,
		function (element) {
			return A2(
				$elm$core$Task$andThen,
				function (parent) {
					return A2(
						$elm$core$Task$andThen,
						function (parentViewport) {
							return A3(
								$elm$browser$Browser$Dom$setViewportOf,
								scrollIntoView.l9,
								0,
								A2(
									$elm$core$Basics$max,
									(((element.nC - parent.nC) + element._) + parentViewport.nC) - parentViewport._,
									A2($elm$core$Basics$min, (element.nC - parent.nC) + parentViewport.nC, parentViewport.nC)));
						},
						A2(
							$elm$core$Task$map,
							function ($) {
								return $.jC;
							},
							$elm$browser$Browser$Dom$getViewportOf(scrollIntoView.l9)));
				},
				A2(
					$elm$core$Task$map,
					function ($) {
						return $.fU;
					},
					$elm$browser$Browser$Dom$getElement(scrollIntoView.l9)));
		},
		A2(
			$elm$core$Task$map,
			function ($) {
				return $.fU;
			},
			$elm$browser$Browser$Dom$getElement(scrollIntoView.lx)));
};
var $elm$file$File$Download$url = function (href) {
	return A2(
		$elm$core$Task$perform,
		$elm$core$Basics$never,
		_File_downloadUrl(href));
};
var $author$project$Frontend$Main$cmdFromDevToolsCmd = function (cmd) {
	switch (cmd.$) {
		case 1:
			var download = cmd.a;
			return A3($elm$file$File$Download$string, download.aN, 'application/json', download.a_);
		case 2:
			var download = cmd.a;
			if (!download.$) {
				var downloadConfig = download.a;
				var bytes = download.b;
				return A3($elm$file$File$Download$bytes, downloadConfig.aN, 'image/png', bytes);
			} else {
				var url = download.a;
				return $elm$file$File$Download$url(url);
			}
		case 0:
			var message = cmd.a;
			return $author$project$Frontend$Main$sendMessageToHostCmd(message);
		default:
			var scrollIntoView = cmd.a;
			return A2(
				$elm$core$Task$attempt,
				$author$project$Frontend$Main$ScrollResultEvent,
				$author$project$Frontend$View$taskScrollIntoView(scrollIntoView));
	}
};
var $author$project$Frontend$Main$cmdFromRunBotCmd = function (cmd) {
	if (!cmd.$) {
		var message = cmd.a;
		return $author$project$Frontend$Main$sendMessageToHostCmd(message);
	} else {
		var devTools = cmd.a;
		return $author$project$Frontend$Main$cmdFromDevToolsCmd(devTools);
	}
};
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $author$project$HostInterface$TestBotSettingsRequest = function (a) {
	return {$: 19, a: a};
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $author$project$Frontend$RunBot$DisplayTestBotSettingsResponse = function (a) {
	return {$: 1, a: a};
};
var $author$project$Frontend$RunBot$RequestTestBotSettings = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (!maybeValue.$) {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0;
	return millis;
};
var $author$project$Frontend$RunBot$getTestBotSettingsResult = F3(
	function (viewState, dialogState, selectedBot) {
		var requestTime = $elm$time$Time$millisToPosix(
			$elm$time$Time$posixToMillis(dialogState.ah.s) + 800);
		var botSettings = dialogState.ah.aD;
		var botId = selectedBot.av.bj;
		return A2(
			$elm$core$Maybe$withDefault,
			A2(
				$author$project$Frontend$RunBot$RequestTestBotSettings,
				{ig: requestTime},
				{aH: selectedBot.av.br, bl: botId, ke: botSettings}),
			A2(
				$elm$core$Maybe$map,
				$author$project$Frontend$RunBot$DisplayTestBotSettingsResponse,
				A2(
					$elm$core$Maybe$andThen,
					$elm$core$Dict$get(botSettings),
					A2($elm$core$Dict$get, botId, viewState.be))));
	});
var $author$project$Frontend$RunBot$getMessagesToHost = F2(
	function (viewState, state) {
		var _v0 = state.bU;
		if (_v0.$ === 1) {
			var configureSession = _v0.a;
			var testBotSettingsMessages = function () {
				var _v1 = configureSession.g7;
				if (_v1.$ === 1) {
					return _List_Nil;
				} else {
					if (_v1.a.$ === 1) {
						return _List_Nil;
					} else {
						var selectedBot = _v1.a.a;
						var projectedBotSettingsDialogsFromPopup = function () {
							var _v3 = configureSession.kx;
							if ((!_v3.$) && (!_v3.a.$)) {
								var botSettingsDialog = _v3.a.a;
								return _List_fromArray(
									[botSettingsDialog]);
							} else {
								return _List_Nil;
							}
						}();
						var projectedBotSettingsDialogs = A2(
							$elm$core$List$cons,
							{
								ah: {aD: configureSession.mF.ke, s: configureSession.lp}
							},
							projectedBotSettingsDialogsFromPopup);
						var messagesFromDialog = function (botSettingsDialog) {
							var _v2 = A3($author$project$Frontend$RunBot$getTestBotSettingsResult, viewState, botSettingsDialog, selectedBot);
							if (!_v2.$) {
								var requestTime = _v2.a.ig;
								var request = _v2.b;
								return (_Utils_cmp(
									$elm$time$Time$posixToMillis(requestTime),
									$elm$time$Time$posixToMillis(viewState.s)) < 0) ? _List_fromArray(
									[
										$author$project$HostInterface$TestBotSettingsRequest(request)
									]) : _List_Nil;
							} else {
								return _List_Nil;
							}
						};
						return A2($elm$core$List$concatMap, messagesFromDialog, projectedBotSettingsDialogs);
					}
				}
			}();
			return testBotSettingsMessages;
		} else {
			return _List_Nil;
		}
	});
var $author$project$Frontend$ClientSettings$init = {d5: $elm$core$Maybe$Nothing, cU: $elm$core$Maybe$Nothing};
var $author$project$Frontend$RunBot$SelectBotStage = function (a) {
	return {$: 0, a: a};
};
var $author$project$Frontend$RunBot$init = {
	bU: $author$project$Frontend$RunBot$SelectBotStage(
		{bG: ''}),
	hp: _List_Nil
};
var $author$project$Frontend$DevTools$initialViewportsLengths = 500;
var $elm$core$List$sortBy = _List_sortBy;
var $author$project$Frontend$DevTools$sortAndMergeOverlappingSessionTimelineViewports = A2(
	$elm$core$Basics$composeR,
	$elm$core$List$sortBy(
		function ($) {
			return $.x;
		}),
	A2(
		$elm$core$List$foldr,
		F2(
			function (viewport, aggregate) {
				if (!aggregate.b) {
					return _List_fromArray(
						[viewport]);
				} else {
					var earliest = aggregate.a;
					var following = aggregate.b;
					return (_Utils_cmp(earliest.x, viewport.G + 1) < 1) ? A2(
						$elm$core$List$cons,
						{
							x: viewport.x,
							G: A2($elm$core$Basics$max, viewport.G, earliest.G)
						},
						following) : A2($elm$core$List$cons, viewport, aggregate);
				}
			}),
		_List_Nil));
var $author$project$Frontend$DevTools$updateSelectedSessionToExpandTimelineViewports = F2(
	function (newViewport, state) {
		return _Utils_update(
			state,
			{
				cf: $author$project$Frontend$DevTools$sortAndMergeOverlappingSessionTimelineViewports(
					A2($elm$core$List$cons, newViewport, state.cf))
			});
	});
var $author$project$Frontend$DevTools$ensureHasTimelineViewportForEnd = F2(
	function (sessionSummary, session) {
		var endEventIndex = sessionSummary.eX - 1;
		return A2(
			$author$project$Frontend$DevTools$updateSelectedSessionToExpandTimelineViewports,
			{
				x: A2($elm$core$Basics$max, 0, endEventIndex - $author$project$Frontend$DevTools$initialViewportsLengths),
				G: endEventIndex
			},
			session);
	});
var $elm$core$Result$toMaybe = function (result) {
	if (!result.$) {
		var v = result.a;
		return $elm$core$Maybe$Just(v);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Frontend$DevTools$ensureHasTimelineViewportForEndUsingViewState = F2(
	function (viewState, session) {
		var _v0 = A2(
			$elm$core$Maybe$andThen,
			$elm$core$Result$toMaybe,
			A2(
				$elm$core$Maybe$andThen,
				$elm$core$Basics$identity,
				A2($elm$core$Dict$get, session.p, viewState.cX)));
		if (_v0.$ === 1) {
			return session;
		} else {
			var sessionSummary = _v0.a;
			return A2($author$project$Frontend$DevTools$ensureHasTimelineViewportForEnd, sessionSummary.av, session);
		}
	});
var $author$project$Frontend$DevTools$initSelectedSession = F2(
	function (viewState, _v0) {
		var sessionName = _v0.p;
		return A2(
			$author$project$Frontend$DevTools$ensureHasTimelineViewportForEndUsingViewState,
			viewState,
			{
				ax: $elm$core$Dict$empty,
				L: $elm$core$Maybe$Nothing,
				p: sessionName,
				eE: $elm$core$Maybe$Nothing,
				cf: _List_fromArray(
					[
						{x: 0, G: $author$project$Frontend$DevTools$initialViewportsLengths}
					])
			});
	});
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (!_v0.$) {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $elm$core$Basics$not = _Basics_not;
var $elm_community$maybe_extra$Maybe$Extra$orElse = F2(
	function (ma, mb) {
		if (mb.$ === 1) {
			return ma;
		} else {
			return mb;
		}
	});
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $author$project$Frontend$RunBot$playSessionsLoadingAutomaticallyLimitInSelectBotView = 20;
var $author$project$Frontend$RunBot$playSessionsLoadingAutomaticallyFromState = function (state) {
	var _v0 = state.bU;
	if (!_v0.$) {
		return $author$project$Frontend$RunBot$playSessionsLoadingAutomaticallyLimitInSelectBotView;
	} else {
		return 3;
	}
};
var $author$project$Frontend$Main$playSessionsLoadingAutomaticallyLimit = function (state) {
	var _v0 = state.q;
	if (_v0.$ === 1) {
		return $author$project$Frontend$RunBot$playSessionsLoadingAutomaticallyLimitInSelectBotView;
	} else {
		if (!_v0.a.$) {
			var runBot = _v0.a.a;
			return $author$project$Frontend$RunBot$playSessionsLoadingAutomaticallyFromState(runBot);
		} else {
			return 1;
		}
	}
};
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $elm$core$List$sort = function (xs) {
	return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
};
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $elm_community$list_extra$List$Extra$uniqueHelp = F4(
	function (f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			if (!remaining.b) {
				return $elm$core$List$reverse(accumulator);
			} else {
				var first = remaining.a;
				var rest = remaining.b;
				var computedFirst = f(first);
				if (A2($elm$core$List$member, computedFirst, existing)) {
					var $temp$f = f,
						$temp$existing = existing,
						$temp$remaining = rest,
						$temp$accumulator = accumulator;
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				} else {
					var $temp$f = f,
						$temp$existing = A2($elm$core$List$cons, computedFirst, existing),
						$temp$remaining = rest,
						$temp$accumulator = A2($elm$core$List$cons, first, accumulator);
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$unique = function (list) {
	return A4($elm_community$list_extra$List$Extra$uniqueHelp, $elm$core$Basics$identity, _List_Nil, list, _List_Nil);
};
var $author$project$Frontend$DevTools$MessageToHost = function (a) {
	return {$: 0, a: a};
};
var $author$project$Frontend$DevTools$SessionBytesFileContent = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$Frontend$DevTools$SessionCmdDownloadJsonFile = function (a) {
	return {$: 1, a: a};
};
var $author$project$Frontend$DevTools$SessionCmdDownloadPngFile = function (a) {
	return {$: 2, a: a};
};
var $author$project$Frontend$DevTools$SessionUrlFileContent = function (a) {
	return {$: 1, a: a};
};
var $elm_community$maybe_extra$Maybe$Extra$join = function (mx) {
	if (!mx.$) {
		var x = mx.a;
		return x;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Frontend$DevTools$isValidAgentSessionEventIndex = F3(
	function (eventIndex, viewState, state) {
		var _v0 = $elm_community$maybe_extra$Maybe$Extra$join(
			A2($elm$core$Dict$get, state.p, viewState.cX));
		if (_v0.$ === 1) {
			return false;
		} else {
			if (_v0.a.$ === 1) {
				return false;
			} else {
				var sessionSummary = _v0.a.a;
				return (0 <= eventIndex) && (_Utils_cmp(eventIndex, sessionSummary.av.eX) < 0);
			}
		}
	});
var $author$project$Frontend$DevTools$setSelectedEventIndexIfInValidRange = F3(
	function (eventIndex, viewState, stateBefore) {
		return (!A3($author$project$Frontend$DevTools$isValidAgentSessionEventIndex, eventIndex, viewState, stateBefore)) ? stateBefore : _Utils_update(
			stateBefore,
			{
				L: $elm$core$Maybe$Just(eventIndex)
			});
	});
var $author$project$Frontend$DevTools$changeSelectedEventIndexIfInValidRange = F3(
	function (changeEventIndex, viewState, stateBefore) {
		var _v0 = stateBefore.L;
		if (_v0.$ === 1) {
			return stateBefore;
		} else {
			var indexBefore = _v0.a;
			return A3(
				$author$project$Frontend$DevTools$setSelectedEventIndexIfInValidRange,
				changeEventIndex(indexBefore),
				viewState,
				stateBefore);
		}
	});
var $author$project$Frontend$DevTools$ScrollIntoView = function (a) {
	return {$: 3, a: a};
};
var $author$project$Frontend$DevTools$timelineAgentEventEntryElementId = function (_v0) {
	var eventIndex = _v0.bV;
	return 'timeline-agent-event-' + $elm$core$String$fromInt(eventIndex);
};
var $author$project$Frontend$DevTools$timelineAgentEventsContainerElementId = 'timeline-agent-events-container';
var $author$project$Frontend$DevTools$cmdToScrollToAgentEventInTimeline = function (agentEventIndex) {
	return $author$project$Frontend$DevTools$ScrollIntoView(
		{
			lx: $author$project$Frontend$DevTools$timelineAgentEventEntryElementId(
				{bV: agentEventIndex}),
			l9: $author$project$Frontend$DevTools$timelineAgentEventsContainerElementId
		});
};
var $author$project$HostInterface$LoadSessionAgentEventByIndex = F2(
	function (a, b) {
		return {$: 18, a: a, b: b};
	});
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $author$project$Frontend$DevTools$getSessionCmdsToGetAgentEventContents = F2(
	function (viewState, state) {
		var _v0 = $elm_community$maybe_extra$Maybe$Extra$join(
			A2($elm$core$Dict$get, state.p, viewState.cX));
		if (_v0.$ === 1) {
			return _List_fromArray(
				[
					$author$project$HostInterface$LoadPlaySessionSummary(state.p)
				]);
		} else {
			if (_v0.a.$ === 1) {
				return _List_Nil;
			} else {
				var sessionSummary = _v0.a.a;
				var startingPointsIndices = $elm$core$List$concat(
					_List_fromArray(
						[
							A2(
							$elm$core$Maybe$withDefault,
							_List_Nil,
							A2($elm$core$Maybe$map, $elm$core$List$singleton, state.L)),
							_List_fromArray(
							[0]),
							_List_fromArray(
							[sessionSummary.av.eX])
						]));
				var indexDistanceToStartingPoints = function (index) {
					return A2(
						$elm$core$Maybe$withDefault,
						0,
						$elm$core$List$minimum(
							A2(
								$elm$core$List$map,
								function (startingPoint) {
									return $elm$core$Basics$abs(index - startingPoint);
								},
								startingPointsIndices)));
				};
				var allEventsToRequestIndices = A2(
					$elm$core$List$sortBy,
					indexDistanceToStartingPoints,
					A2(
						$elm$core$List$filter,
						function (i) {
							return _Utils_eq(
								A2(
									$elm$core$Maybe$andThen,
									$elm$core$Result$toMaybe,
									A2($elm$core$Dict$get, i, state.ax)),
								$elm$core$Maybe$Nothing);
						},
						A2(
							$elm$core$List$filter,
							function (i) {
								return (0 <= i) && (_Utils_cmp(i, sessionSummary.av.eX) < 0);
							},
							A2(
								$elm$core$List$concatMap,
								function (startIndex) {
									return $elm$core$List$concat(
										_List_fromArray(
											[
												_List_fromArray(
												[startIndex]),
												A2($elm$core$List$range, startIndex - 10, startIndex + 10)
											]));
								},
								startingPointsIndices))));
				return A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						$elm$core$Maybe$map,
						A2(
							$elm$core$Basics$composeR,
							$author$project$HostInterface$LoadSessionAgentEventByIndex(state.p),
							$elm$core$List$singleton),
						$elm$core$List$head(allEventsToRequestIndices)));
			}
		}
	});
var $author$project$Frontend$DevTools$continueAddingCmdToGetAgentEventContents = F2(
	function (viewState, updatedState) {
		return _Utils_Tuple2(
			updatedState,
			A2(
				$elm$core$List$map,
				$author$project$Frontend$DevTools$MessageToHost,
				A2($author$project$Frontend$DevTools$getSessionCmdsToGetAgentEventContents, viewState, updatedState)));
	});
var $elm$core$String$toLower = _String_toLower;
var $author$project$Frontend$DevTools$downloadFileNameFromSessionComponentName = F2(
	function (_v0, componentName) {
		var sessionName = _v0.p;
		var selectedAgentEventIndex = _v0.L;
		var filePathPrefixes = A2(
			$elm$core$String$startsWith,
			'session',
			$elm$core$String$toLower(sessionName)) ? _List_Nil : _List_fromArray(
			['session']);
		var fileNamePartEvent = function () {
			if (selectedAgentEventIndex.$ === 1) {
				return _List_Nil;
			} else {
				var agentEventIndex = selectedAgentEventIndex.a;
				return _List_fromArray(
					[
						'event',
						$elm$core$String$fromInt(agentEventIndex)
					]);
			}
		}();
		return A2(
			$elm$core$String$join,
			'-',
			$elm$core$List$concat(
				_List_fromArray(
					[
						filePathPrefixes,
						_List_fromArray(
						[sessionName]),
						fileNamePartEvent,
						_List_fromArray(
						[componentName])
					])));
	});
var $elm$core$Basics$neq = _Utils_notEqual;
var $author$project$Frontend$DevTools$update = F3(
	function (viewState, event, stateBefore) {
		var continueWithUpdateSelectedSession = function (updateSession) {
			var _v6 = updateSession(stateBefore.V);
			var selectedSessionAfterUpdate = _v6.a;
			var cmds = _v6.b;
			return _Utils_Tuple2(
				_Utils_update(
					stateBefore,
					{V: selectedSessionAfterUpdate}),
				cmds);
		};
		var continueWithMoveAgentEventCursor = function (difference) {
			return continueWithUpdateSelectedSession(
				function (selectedSessionBefore) {
					var _v5 = A2(
						$author$project$Frontend$DevTools$continueAddingCmdToGetAgentEventContents,
						viewState,
						A3(
							$author$project$Frontend$DevTools$changeSelectedEventIndexIfInValidRange,
							$elm$core$Basics$add(difference),
							viewState,
							selectedSessionBefore));
					var selectedSessionAfterMove = _v5.a;
					var cmds = _v5.b;
					var scrollCmds = A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2(
							$elm$core$Maybe$map,
							A2($elm$core$Basics$composeR, $author$project$Frontend$DevTools$cmdToScrollToAgentEventInTimeline, $elm$core$List$singleton),
							selectedSessionAfterMove.L));
					return _Utils_Tuple2(
						selectedSessionAfterMove,
						_Utils_ap(scrollCmds, cmds));
				});
		};
		switch (event.$) {
			case 0:
				var artifactName = event.a;
				return _Utils_Tuple2(
					_Utils_update(
						stateBefore,
						{
							V: A2(
								$author$project$Frontend$DevTools$initSelectedSession,
								viewState,
								{p: artifactName})
						}),
					_List_fromArray(
						[
							$author$project$Frontend$DevTools$MessageToHost(
							$author$project$HostInterface$LoadPlaySessionSummary(artifactName))
						]));
			case 1:
				return _Utils_Tuple2(
					stateBefore,
					_List_fromArray(
						[
							$author$project$Frontend$DevTools$MessageToHost($author$project$HostInterface$ImportPlaySession)
						]));
			case 3:
				return continueWithMoveAgentEventCursor(1);
			case 4:
				return continueWithMoveAgentEventCursor(-1);
			case 2:
				switch (event.a.$) {
					case 0:
						var _v1 = event.a;
						return continueWithUpdateSelectedSession(
							function (selectedSession) {
								return _Utils_Tuple2(
									_Utils_update(
										selectedSession,
										{L: $elm$core$Maybe$Nothing}),
									_List_Nil);
							});
					case 1:
						var eventIndex = event.a.a.bV;
						return continueWithUpdateSelectedSession(
							function (selectedSession) {
								return A2(
									$author$project$Frontend$DevTools$continueAddingCmdToGetAgentEventContents,
									viewState,
									_Utils_update(
										selectedSession,
										{
											L: $elm$core$Maybe$Just(eventIndex)
										}));
							});
					default:
						var newViewport = event.a.a;
						return continueWithUpdateSelectedSession(
							A2(
								$elm$core$Basics$composeR,
								$author$project$Frontend$DevTools$updateSelectedSessionToExpandTimelineViewports(newViewport),
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Tuple$pair,
									$elm$core$Basics$apR(_List_Nil))));
				}
			default:
				var sessionName = event.a;
				var inSessionEvent = event.b;
				var fileContentFromEventFileContent = function (sessionEventFileContent) {
					if (!sessionEventFileContent.$) {
						var downloadConfig = sessionEventFileContent.a;
						var bytes = sessionEventFileContent.b;
						return A2($author$project$Frontend$DevTools$SessionBytesFileContent, downloadConfig, bytes);
					} else {
						var url = sessionEventFileContent.a;
						return $author$project$Frontend$DevTools$SessionUrlFileContent(url);
					}
				};
				if (!_Utils_eq(stateBefore.V.p, sessionName)) {
					return _Utils_Tuple2(stateBefore, _List_Nil);
				} else {
					var selectedSessionBefore = stateBefore.V;
					var downloadFileNameFromComponentName = $author$project$Frontend$DevTools$downloadFileNameFromSessionComponentName(
						{L: stateBefore.V.L, p: stateBefore.V.p});
					var _v2 = function () {
						switch (inSessionEvent.$) {
							case 0:
								var mouseOver = inSessionEvent.a;
								return _Utils_Tuple2(
									_Utils_update(
										selectedSessionBefore,
										{eE: mouseOver}),
									_List_Nil);
							case 1:
								var download = inSessionEvent.a;
								return _Utils_Tuple2(
									selectedSessionBefore,
									_List_fromArray(
										[
											$author$project$Frontend$DevTools$SessionCmdDownloadJsonFile(
											{
												a_: download.a_,
												aN: downloadFileNameFromComponentName(download.aN)
											})
										]));
							default:
								var download = inSessionEvent.a;
								return _Utils_Tuple2(
									selectedSessionBefore,
									_List_fromArray(
										[
											$author$project$Frontend$DevTools$SessionCmdDownloadPngFile(
											fileContentFromEventFileContent(download.a_))
										]));
						}
					}();
					var selectedSession = _v2.a;
					var messagesToHost = _v2.b;
					return _Utils_Tuple2(
						_Utils_update(
							stateBefore,
							{V: selectedSession}),
						messagesToHost);
				}
		}
	});
var $author$project$Frontend$RunBot$ConfigureSessionStage = function (a) {
	return {$: 1, a: a};
};
var $author$project$HostInterface$ContinuePlaySession = {$: 11};
var $author$project$Frontend$RunBot$DevToolsCmd = function (a) {
	return {$: 1, a: a};
};
var $author$project$Frontend$RunBot$DevToolsStage = function (a) {
	return {$: 4, a: a};
};
var $author$project$HostInterface$EndPlaySession = {$: 12};
var $author$project$Frontend$RunBot$EnterOnlineKeyStage = function (a) {
	return {$: 2, a: a};
};
var $author$project$Frontend$RunBot$MessageToHostCmd = function (a) {
	return {$: 0, a: a};
};
var $author$project$HostInterface$PausePlaySession = {$: 10};
var $author$project$Frontend$RunBot$PlaySessionStage = function (a) {
	return {$: 3, a: a};
};
var $author$project$Frontend$RunBot$SelectBotFromPath = function (a) {
	return {$: 0, a: a};
};
var $author$project$Frontend$RunBot$StartedTestOnlineSessionKey = function (a) {
	return {$: 0, a: a};
};
var $author$project$HostInterface$TestOnlineSessionKey = function (a) {
	return {$: 14, a: a};
};
var $author$project$Frontend$RunBot$UserInputPauseBotEvent = {$: 6};
var $author$project$Common$calendarMonthIndexStartingAt0 = function (month) {
	switch (month) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		case 3:
			return 3;
		case 4:
			return 4;
		case 5:
			return 5;
		case 6:
			return 6;
		case 7:
			return 7;
		case 8:
			return 8;
		case 9:
			return 9;
		case 10:
			return 10;
		default:
			return 11;
	}
};
var $author$project$Frontend$Visuals$calendarMonthIndex = A2(
	$elm$core$Basics$composeR,
	$author$project$Common$calendarMonthIndexStartingAt0,
	$elm$core$Basics$add(1));
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)),
			string);
	});
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.o, posixMinutes) < 0) {
					return posixMinutes + era.aA;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$core$Basics$ge = _Utils_ge;
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		kI: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		lU: month,
		nD: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).kI;
	});
var $elm$time$Time$Apr = 3;
var $elm$time$Time$Aug = 7;
var $elm$time$Time$Dec = 11;
var $elm$time$Time$Feb = 1;
var $elm$time$Time$Jan = 0;
var $elm$time$Time$Jul = 6;
var $elm$time$Time$Jun = 5;
var $elm$time$Time$Mar = 2;
var $elm$time$Time$May = 4;
var $elm$time$Time$Nov = 10;
var $elm$time$Time$Oct = 9;
var $elm$time$Time$Sep = 8;
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).lU;
		switch (_v0) {
			case 1:
				return 0;
			case 2:
				return 1;
			case 3:
				return 2;
			case 4:
				return 3;
			case 5:
				return 4;
			case 6:
				return 5;
			case 7:
				return 6;
			case 8:
				return 7;
			case 9:
				return 8;
			case 10:
				return 9;
			case 11:
				return 10;
			default:
				return 11;
		}
	});
var $elm$time$Time$toYear = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).nD;
	});
var $elm$time$Time$utc = A2($elm$time$Time$Zone, 0, _List_Nil);
var $author$project$Frontend$Visuals$calendarDayTextFromPosixTime = function (time) {
	var monthIndex = $author$project$Frontend$Visuals$calendarMonthIndex(
		A2($elm$time$Time$toMonth, $elm$time$Time$utc, time));
	return A2(
		$elm$core$String$join,
		'-',
		A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$String$fromInt,
				A2($elm$core$String$padLeft, 2, '0')),
			_List_fromArray(
				[
					A2($elm$time$Time$toYear, $elm$time$Time$utc, time),
					monthIndex,
					A2($elm$time$Time$toDay, $elm$time$Time$utc, time)
				])));
};
var $elm$core$Basics$modBy = _Basics_modBy;
var $elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			24,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var $elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2($elm$time$Time$toAdjustedMinutes, zone, time));
	});
var $elm$time$Time$toSecond = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				1000));
	});
var $author$project$Frontend$RunBot$buildCustomSessionName = F2(
	function (viewState, config) {
		return A2(
			$elm$core$String$join,
			'-',
			$elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						[
							A2(
							$elm$core$String$join,
							'',
							_List_fromArray(
								[
									$author$project$Frontend$Visuals$calendarDayTextFromPosixTime(viewState.s),
									'T',
									A2(
									$elm$core$String$join,
									'-',
									A2(
										$elm$core$List$map,
										A2(
											$elm$core$Basics$composeR,
											$elm$core$Basics$apR($elm$time$Time$utc),
											A2(
												$elm$core$Basics$composeR,
												$elm$core$Basics$apR(viewState.s),
												A2(
													$elm$core$Basics$composeR,
													$elm$core$String$fromInt,
													A2($elm$core$String$padLeft, 2, '0')))),
										_List_fromArray(
											[$elm$time$Time$toHour, $elm$time$Time$toMinute, $elm$time$Time$toSecond])))
								]))
						]),
						function () {
						var _v0 = config.kZ;
						if (!_v0.$) {
							return _List_Nil;
						} else {
							return _List_fromArray(
								['simulation']);
						}
					}()
					])));
	});
var $author$project$HostInterface$LoadArtifactFromPath = function (a) {
	return {$: 7, a: a};
};
var $author$project$HostInterface$StartPlaySession = function (a) {
	return {$: 8, a: a};
};
var $elm_community$list_extra$List$Extra$dropWhile = F2(
	function (predicate, list) {
		dropWhile:
		while (true) {
			if (!list.b) {
				return _List_Nil;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					var $temp$predicate = predicate,
						$temp$list = xs;
					predicate = $temp$predicate;
					list = $temp$list;
					continue dropWhile;
				} else {
					return list;
				}
			}
		}
	});
var $author$project$Reactor$artifactIdFromUrlIntoCatalog = function (url) {
	var urlPath = A2(
		$elm_community$list_extra$List$Extra$dropWhile,
		$elm$core$String$isEmpty,
		A2($elm$core$String$split, '/', url.K));
	var fromReactorPath = function (path) {
		if ((path.b && (path.a === 'catalog')) && path.b.b) {
			var _v2 = path.b;
			var artifactId = _v2.a;
			return $elm$core$Maybe$Just(artifactId);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fromCatalogPath = $elm$core$List$head;
	var _v0 = $elm$core$String$toLower(url.le);
	switch (_v0) {
		case 'reactor.botlab.org':
			return fromReactorPath(urlPath);
		case 'catalog.botlab.org':
			return fromCatalogPath(urlPath);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Reactor$artifactIdAbbreviationsLengths = _List_fromArray(
	[10, 16]);
var $elm$core$Char$isHexDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return ((48 <= code) && (code <= 57)) || (((65 <= code) && (code <= 70)) || ((97 <= code) && (code <= 102)));
};
var $author$project$Reactor$parseArtifactId = function (candidate) {
	return ((_Utils_cmp(
		A2(
			$elm$core$Maybe$withDefault,
			10,
			$elm$core$List$minimum($author$project$Reactor$artifactIdAbbreviationsLengths)),
		$elm$core$String$length(candidate)) < 1) && A2($elm$core$String$all, $elm$core$Char$isHexDigit, candidate)) ? $elm$core$Maybe$Just(candidate) : $elm$core$Maybe$Nothing;
};
var $author$project$Frontend$RunBot$botSourcePathIsArtifactId = function (sourcePath) {
	return $elm$core$List$head(
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					$author$project$Reactor$parseArtifactId(sourcePath),
					A2(
					$elm$core$Maybe$andThen,
					$author$project$Reactor$artifactIdFromUrlIntoCatalog,
					$elm$url$Url$fromString(sourcePath))
				])));
};
var $author$project$Frontend$Visuals$describeHttpError = function (httpError) {
	switch (httpError.$) {
		case 0:
			var errorMessage = httpError.a;
			return 'Bad Url: ' + errorMessage;
		case 1:
			return 'Timeout';
		case 2:
			return 'Network Error';
		case 3:
			var statusCode = httpError.a;
			return 'BadStatus: ' + $elm$core$String$fromInt(statusCode);
		default:
			var errorMessage = httpError.a;
			return 'BadPayload: ' + errorMessage;
	}
};
var $author$project$Frontend$RunBot$mapBotSourcePathFromUserToResolveBotId = F2(
	function (viewState, inputSourcePath) {
		var _v0 = $author$project$Frontend$RunBot$botSourcePathIsArtifactId(inputSourcePath);
		if (_v0.$ === 1) {
			return $elm$core$Result$Ok(inputSourcePath);
		} else {
			var botId = _v0.a;
			return A2(
				$elm$core$Result$mapError,
				function (err) {
					return A2(
						$elm$core$String$join,
						'\n',
						_List_fromArray(
							['This source looks like it points to a bot with ID ' + (botId + ', but I could not get a corresponding source path from the catalog:'), err]));
				},
				function () {
					var _v1 = viewState.bX;
					if (_v1.$ === 1) {
						return $elm$core$Result$Err('Did not yet get a response from the catalog. Try again later.');
					} else {
						var readCatalogResponse = _v1.a;
						var _v2 = readCatalogResponse.mo;
						if (_v2.$ === 1) {
							var err = _v2.a;
							return $elm$core$Result$Err(
								'Reading the catalog failed:\n' + $author$project$Frontend$Visuals$describeHttpError(err));
						} else {
							var catalog = _v2.a;
							var matchingBots = A2(
								$elm$core$List$filter,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.e4;
									},
									A2(
										$elm$core$Basics$composeR,
										$elm$core$String$toLower,
										$elm$core$String$contains(
											$elm$core$String$toLower(botId)))),
								catalog);
							if (!matchingBots.b) {
								return $elm$core$Result$Err(
									'Found ' + ($elm$core$String$fromInt(
										$elm$core$List$length(catalog)) + (' bots on the catalog but none matches ' + botId)));
							} else {
								if (!matchingBots.b.b) {
									var singleMatch = matchingBots.a;
									return A2(
										$elm$core$Maybe$withDefault,
										$elm$core$Result$Err('Found matching catalog entry ' + (singleMatch.e4 + ', but it contains no link to a source')),
										A2(
											$elm$core$Maybe$map,
											$elm$core$Result$Ok,
											$elm$core$List$head(singleMatch.iV)));
								} else {
									return $elm$core$Result$Err(
										'More than one entries on the catalog match this name: ' + A2(
											$elm$core$String$join,
											', ',
											A2(
												$elm$core$List$map,
												function ($) {
													return $.e4;
												},
												matchingBots)));
								}
							}
						}
					}
				}());
		}
	});
var $author$project$Frontend$RunBot$navigateInto = F3(
	function (viewState, newStage, stateBefore) {
		var keepPreviousOnStack = function () {
			var _v8 = stateBefore.bU;
			switch (_v8.$) {
				case 0:
					return true;
				case 1:
					return true;
				case 2:
					return false;
				case 3:
					return true;
				default:
					return true;
			}
		}();
		var navigationStack = _Utils_ap(
			keepPreviousOnStack ? _List_fromArray(
				[stateBefore.bU]) : _List_Nil,
			stateBefore.hp);
		var _v0 = function () {
			switch (newStage.$) {
				case 0:
					return _Utils_Tuple2(newStage, _List_Nil);
				case 1:
					var configureSessionBefore = newStage.a;
					var _v2 = function () {
						var _v4 = configureSessionBefore.mC;
						switch (_v4.$) {
							case 0:
								var inputSourcePath = _v4.a;
								var _v5 = configureSessionBefore.g7;
								if (!_v5.$) {
									var loadResultBefore = _v5.a;
									return _Utils_Tuple2(
										$elm$core$Maybe$Just(loadResultBefore),
										_Utils_Tuple2(configureSessionBefore.kf, _List_Nil));
								} else {
									var _v6 = A2($author$project$Frontend$RunBot$mapBotSourcePathFromUserToResolveBotId, viewState, inputSourcePath);
									if (_v6.$ === 1) {
										var err = _v6.a;
										return _Utils_Tuple2(
											$elm$core$Maybe$Just(
												$elm$core$Result$Err(err)),
											_Utils_Tuple2(configureSessionBefore.kf, _List_Nil));
									} else {
										var sourcePath = _v6.a;
										var assumeCacheIsFreshEnough = A2(
											$elm$core$List$any,
											A2(
												$elm$core$Basics$composeR,
												$elm$core$String$startsWith,
												$elm$core$Basics$apR(
													$elm$core$String$toLower(sourcePath))),
											_List_fromArray(
												['http://', 'https://']));
										return A2(
											$elm$core$Maybe$withDefault,
											_Utils_Tuple2(
												$elm$core$Maybe$Nothing,
												_Utils_Tuple2(
													$elm$core$Maybe$Just(sourcePath),
													_List_fromArray(
														[
															$author$project$HostInterface$LoadArtifactFromPath(sourcePath)
														]))),
											A2(
												$elm$core$Maybe$map,
												A2(
													$elm$core$Basics$composeR,
													$elm$core$Maybe$Just,
													A2(
														$elm$core$Basics$composeR,
														$elm$core$Tuple$pair,
														$elm$core$Basics$apR(
															_Utils_Tuple2(
																$elm$core$Maybe$Just(sourcePath),
																_List_Nil)))),
												assumeCacheIsFreshEnough ? A2(
													$elm$core$Maybe$map,
													$elm$core$Result$Ok,
													A2($elm$core$Dict$get, sourcePath, viewState.a4)) : $elm$core$Maybe$Nothing));
									}
								}
							case 1:
								var fromBundle = _v4.a;
								return _Utils_Tuple2(
									A2(
										$elm$core$Maybe$map,
										$elm$core$Result$Ok,
										$elm$core$List$head(
											A2(
												$elm$core$List$filter,
												A2(
													$elm$core$Basics$composeR,
													function ($) {
														return $.av;
													},
													A2(
														$elm$core$Basics$composeR,
														function ($) {
															return $.bj;
														},
														$elm$core$Basics$eq(fromBundle.bj))),
												A2($elm$core$List$filterMap, $elm$core$Result$toMaybe, viewState.bm)))),
									_Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil));
							default:
								var fromLiteral = _v4.b;
								return _Utils_Tuple2(
									$elm$core$Maybe$Just(
										$elm$core$Result$Ok(fromLiteral)),
									_Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil));
						}
					}();
					var loadBotResult = _v2.a;
					var _v3 = _v2.b;
					var botSourceRequestedPath = _v3.a;
					var loadBotMessages = _v3.b;
					var configureSession = _Utils_update(
						configureSessionBefore,
						{kf: botSourceRequestedPath, g7: loadBotResult});
					return _Utils_Tuple2(
						$author$project$Frontend$RunBot$ConfigureSessionStage(configureSession),
						loadBotMessages);
				case 2:
					var _v7 = viewState.aX;
					if (_v7.$ === 1) {
						return _Utils_Tuple2(newStage, _List_Nil);
					} else {
						var defaultOnlineSessionKey = _v7.a;
						return _Utils_Tuple2(
							newStage,
							_List_fromArray(
								[
									$author$project$HostInterface$TestOnlineSessionKey(defaultOnlineSessionKey)
								]));
					}
				case 3:
					var playSession = newStage.a;
					return _Utils_Tuple2(
						newStage,
						_List_fromArray(
							[
								$author$project$HostInterface$StartPlaySession(playSession.mR)
							]));
				default:
					var devtools = newStage.a;
					return _Utils_Tuple2(
						newStage,
						_List_fromArray(
							[
								$author$project$HostInterface$LoadPlaySessionSummary(devtools.V.p)
							]));
			}
		}();
		var stage = _v0.a;
		var messagesToHost = _v0.b;
		return _Utils_Tuple2(
			{bU: stage, hp: navigationStack},
			messagesToHost);
	});
var $author$project$Frontend$RunBot$continueWithStartPlaySession = F5(
	function (viewState, loadBotOk, config, context, stateBefore) {
		var customSessionId = A2($author$project$Frontend$RunBot$buildCustomSessionName, viewState, config);
		var startRequest = {aH: loadBotOk.av.br, F: config, c0: context.c0, bD: customSessionId};
		return A3(
			$author$project$Frontend$RunBot$navigateInto,
			viewState,
			$author$project$Frontend$RunBot$PlaySessionStage(
				{lC: $elm$core$Maybe$Nothing, ae: loadBotOk, mR: startRequest, mS: $elm$core$Maybe$Nothing, bM: $elm$core$Maybe$Nothing}),
			stateBefore);
	});
var $author$project$BotConfig$defaultPlaySessionConfig = {
	ke: '',
	kQ: true,
	kT: false,
	kZ: $author$project$HostInterface$LiveAgentEnvironment,
	l2: false,
	me: _List_fromArray(
		[16, 17, 18]),
	mG: 1440
};
var $elm$core$String$trim = _String_trim;
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $elm$core$String$endsWith = _String_endsWith;
var $elm_community$string_extra$String$Extra$unsurround = F2(
	function (wrapper, string) {
		if (A2($elm$core$String$startsWith, wrapper, string) && A2($elm$core$String$endsWith, wrapper, string)) {
			var length = $elm$core$String$length(wrapper);
			return A2(
				$elm$core$String$dropRight,
				length,
				A2($elm$core$String$dropLeft, length, string));
		} else {
			return string;
		}
	});
var $elm_community$string_extra$String$Extra$unquote = function (string) {
	return A2($elm_community$string_extra$String$Extra$unsurround, '\"', string);
};
var $author$project$Frontend$RunBot$updateIfInConfigureSessionStage = F2(
	function (updateConfigureSessionState, stateBefore) {
		var _v0 = stateBefore.bU;
		if (_v0.$ === 1) {
			var configureSessionStateBefore = _v0.a;
			var _v1 = updateConfigureSessionState(configureSessionStateBefore);
			var configureSessionState = _v1.a;
			var messages = _v1.b;
			return _Utils_Tuple2(
				_Utils_update(
					stateBefore,
					{
						bU: $author$project$Frontend$RunBot$ConfigureSessionStage(configureSessionState)
					}),
				messages);
		} else {
			return _Utils_Tuple2(stateBefore, _List_Nil);
		}
	});
var $author$project$Frontend$RunBot$updateIfInDevToolsStage = F2(
	function (updateDevToolsState, stateBefore) {
		var _v0 = stateBefore.bU;
		if (_v0.$ === 4) {
			var devToolsStageBefore = _v0.a;
			var _v1 = updateDevToolsState(devToolsStageBefore);
			var devToolsStage = _v1.a;
			var messages = _v1.b;
			return _Utils_Tuple2(
				_Utils_update(
					stateBefore,
					{
						bU: $author$project$Frontend$RunBot$DevToolsStage(devToolsStage)
					}),
				messages);
		} else {
			return _Utils_Tuple2(stateBefore, _List_Nil);
		}
	});
var $author$project$Frontend$RunBot$update = F3(
	function (viewState, event, stateBefore) {
		switch (event.$) {
			case 0:
				var sourcePath = event.a;
				var _v1 = stateBefore.bU;
				if (!_v1.$) {
					var selectBot = _v1.a;
					return _Utils_Tuple2(
						_Utils_update(
							stateBefore,
							{
								bU: $author$project$Frontend$RunBot$SelectBotStage(
									_Utils_update(
										selectBot,
										{bG: sourcePath}))
							}),
						_List_Nil);
				} else {
					return _Utils_Tuple2(stateBefore, _List_Nil);
				}
			case 1:
				var botSource = event.a;
				var trimmedBotSource = function () {
					switch (botSource.$) {
						case 1:
							return botSource;
						case 0:
							var path = botSource.a;
							return $author$project$Frontend$RunBot$SelectBotFromPath(
								$elm_community$string_extra$String$Extra$unquote(
									$elm$core$String$trim(path)));
						default:
							return botSource;
					}
				}();
				var _v2 = stateBefore.bU;
				if (!_v2.$) {
					return A2(
						$elm$core$Tuple$mapSecond,
						$elm$core$List$map($author$project$Frontend$RunBot$MessageToHostCmd),
						A3(
							$author$project$Frontend$RunBot$navigateInto,
							viewState,
							$author$project$Frontend$RunBot$ConfigureSessionStage(
								{kf: $elm$core$Maybe$Nothing, kx: $elm$core$Maybe$Nothing, lp: viewState.s, g7: $elm$core$Maybe$Nothing, mC: trimmedBotSource, mF: $author$project$BotConfig$defaultPlaySessionConfig, mP: $elm$core$Maybe$Nothing}),
							stateBefore));
				} else {
					return _Utils_Tuple2(stateBefore, _List_Nil);
				}
			case 2:
				var inputArgument = event.a;
				var _v4 = stateBefore.bU;
				switch (_v4.$) {
					case 1:
						var configureSession = _v4.a;
						var _v5 = configureSession.g7;
						if ((!_v5.$) && (!_v5.a.$)) {
							var loadBotOk = _v5.a.a;
							return configureSession.mF.l2 ? A2(
								$elm$core$Tuple$mapSecond,
								$elm$core$List$map($author$project$Frontend$RunBot$MessageToHostCmd),
								A3(
									$author$project$Frontend$RunBot$navigateInto,
									viewState,
									$author$project$Frontend$RunBot$EnterOnlineKeyStage(
										{F: configureSession.mF, bq: '', ae: loadBotOk, bH: $elm$core$Maybe$Nothing}),
									stateBefore)) : A2(
								$elm$core$Tuple$mapSecond,
								$elm$core$List$map($author$project$Frontend$RunBot$MessageToHostCmd),
								A5(
									$author$project$Frontend$RunBot$continueWithStartPlaySession,
									viewState,
									loadBotOk,
									configureSession.mF,
									{c0: $elm$core$Maybe$Nothing},
									stateBefore));
						} else {
							return _Utils_Tuple2(stateBefore, _List_Nil);
						}
					case 2:
						var enterOnlineKey = _v4.a;
						if (inputArgument.bE) {
							var configBefore = enterOnlineKey.F;
							return A2(
								$elm$core$Tuple$mapSecond,
								$elm$core$List$map($author$project$Frontend$RunBot$MessageToHostCmd),
								A5(
									$author$project$Frontend$RunBot$continueWithStartPlaySession,
									viewState,
									enterOnlineKey.ae,
									_Utils_update(
										configBefore,
										{l2: false}),
									{c0: $elm$core$Maybe$Nothing},
									stateBefore));
						} else {
							var continueWithTestKey = _Utils_Tuple2(
								_Utils_update(
									stateBefore,
									{
										bU: $author$project$Frontend$RunBot$EnterOnlineKeyStage(
											_Utils_update(
												enterOnlineKey,
												{
													bH: $elm$core$Maybe$Just(
														$author$project$Frontend$RunBot$StartedTestOnlineSessionKey(enterOnlineKey.bq))
												}))
									}),
								_List_fromArray(
									[
										$author$project$Frontend$RunBot$MessageToHostCmd(
										$author$project$HostInterface$TestOnlineSessionKey(enterOnlineKey.bq))
									]));
							var _v6 = enterOnlineKey.bH;
							if (_v6.$ === 1) {
								return continueWithTestKey;
							} else {
								if (!_v6.a.$) {
									return continueWithTestKey;
								} else {
									if (_v6.a.b.$ === 1) {
										var _v7 = _v6.a;
										return continueWithTestKey;
									} else {
										var _v8 = _v6.a;
										var testedOnlineSessionKey = _v8.a;
										return A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$List$map($author$project$Frontend$RunBot$MessageToHostCmd),
											A5(
												$author$project$Frontend$RunBot$continueWithStartPlaySession,
												viewState,
												enterOnlineKey.ae,
												enterOnlineKey.F,
												{
													c0: $elm$core$Maybe$Just(testedOnlineSessionKey)
												},
												stateBefore));
									}
								}
							}
						}
					default:
						return _Utils_Tuple2(stateBefore, _List_Nil);
				}
			case 5:
				var config = event.a;
				return A2(
					$author$project$Frontend$RunBot$updateIfInConfigureSessionStage,
					function (configureSession) {
						return _Utils_Tuple2(
							_Utils_update(
								configureSession,
								{kx: $elm$core$Maybe$Nothing, mF: config}),
							_List_Nil);
					},
					stateBefore);
			case 3:
				var popup = event.a;
				return A2(
					$author$project$Frontend$RunBot$updateIfInConfigureSessionStage,
					function (configureSession) {
						return _Utils_Tuple2(
							_Utils_update(
								configureSession,
								{
									kx: $elm$core$Maybe$Just(popup)
								}),
							_List_Nil);
					},
					stateBefore);
			case 4:
				return A2(
					$author$project$Frontend$RunBot$updateIfInConfigureSessionStage,
					function (configureSession) {
						return _Utils_Tuple2(
							_Utils_update(
								configureSession,
								{kx: $elm$core$Maybe$Nothing}),
							_List_Nil);
					},
					stateBefore);
			case 9:
				var getHelpStage = event.a;
				var _v9 = stateBefore.bU;
				if (_v9.$ === 3) {
					var playSession = _v9.a;
					return _Utils_Tuple2(
						_Utils_update(
							stateBefore,
							{
								bU: $author$project$Frontend$RunBot$PlaySessionStage(
									_Utils_update(
										playSession,
										{
											bM: $elm$core$Maybe$Just(getHelpStage)
										}))
							}),
						_List_fromArray(
							[
								$author$project$Frontend$RunBot$MessageToHostCmd($author$project$HostInterface$PausePlaySession)
							]));
				} else {
					return _Utils_Tuple2(stateBefore, _List_Nil);
				}
			case 6:
				var state = function () {
					var _v10 = stateBefore.bU;
					if (_v10.$ === 3) {
						var playSession = _v10.a;
						return _Utils_update(
							stateBefore,
							{
								bU: $author$project$Frontend$RunBot$PlaySessionStage(
									_Utils_update(
										playSession,
										{bM: $elm$core$Maybe$Nothing}))
							});
					} else {
						return stateBefore;
					}
				}();
				return _Utils_Tuple2(
					state,
					_List_fromArray(
						[
							$author$project$Frontend$RunBot$MessageToHostCmd($author$project$HostInterface$PausePlaySession)
						]));
			case 7:
				var _v11 = stateBefore.bU;
				if (_v11.$ === 3) {
					var playSession = _v11.a;
					return _Utils_Tuple2(
						_Utils_update(
							stateBefore,
							{
								bU: $author$project$Frontend$RunBot$PlaySessionStage(
									_Utils_update(
										playSession,
										{bM: $elm$core$Maybe$Nothing}))
							}),
						_List_fromArray(
							[
								$author$project$Frontend$RunBot$MessageToHostCmd($author$project$HostInterface$ContinuePlaySession)
							]));
				} else {
					return _Utils_Tuple2(stateBefore, _List_Nil);
				}
			case 8:
				return _Utils_Tuple2(
					stateBefore,
					_List_fromArray(
						[
							$author$project$Frontend$RunBot$MessageToHostCmd($author$project$HostInterface$EndPlaySession)
						]));
			case 10:
				var enteredKey = event.a;
				var _v12 = stateBefore.bU;
				if (_v12.$ === 2) {
					var enterOnlineKey = _v12.a;
					return _Utils_Tuple2(
						_Utils_update(
							stateBefore,
							{
								bU: $author$project$Frontend$RunBot$EnterOnlineKeyStage(
									_Utils_update(
										enterOnlineKey,
										{bq: enteredKey}))
							}),
						_List_Nil);
				} else {
					return _Utils_Tuple2(stateBefore, _List_Nil);
				}
			case 11:
				var _v13 = A3($author$project$Frontend$RunBot$update, viewState, $author$project$Frontend$RunBot$UserInputPauseBotEvent, stateBefore);
				var state = _v13.a;
				var pauseCmds = _v13.b;
				var _v14 = state.bU;
				if (_v14.$ === 3) {
					var playSession = _v14.a;
					return A2(
						$elm$core$Tuple$mapSecond,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$List$map($author$project$Frontend$RunBot$MessageToHostCmd),
							$elm$core$Basics$append(pauseCmds)),
						A3(
							$author$project$Frontend$RunBot$navigateInto,
							viewState,
							$author$project$Frontend$RunBot$DevToolsStage(
								{
									V: A2(
										$author$project$Frontend$DevTools$initSelectedSession,
										viewState,
										{p: playSession.mR.bD})
								}),
							state));
				} else {
					return _Utils_Tuple2(stateBefore, _List_Nil);
				}
			default:
				var devToolsEvent = event.a;
				return A2(
					$elm$core$Tuple$mapSecond,
					$elm$core$List$map($author$project$Frontend$RunBot$DevToolsCmd),
					A2(
						$author$project$Frontend$RunBot$updateIfInDevToolsStage,
						A2($author$project$Frontend$DevTools$update, viewState, devToolsEvent),
						stateBefore));
		}
	});
var $author$project$Frontend$Main$AttemptedInstallation = function (a) {
	return {$: 3, a: a};
};
var $author$project$Frontend$Main$CheckedInstallation = function (a) {
	return {$: 1, a: a};
};
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (!result.$) {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $author$project$Frontend$Main$aggregateLoadBotSuccessesFromState = function (state) {
	return $elm$core$List$concat(
		_List_fromArray(
			[
				$elm$core$Dict$values(state.a4),
				A2(
				$elm$core$List$filterMap,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Result$andThen(
						function ($) {
							return $.g7;
						}),
					$elm$core$Result$toMaybe),
				$elm$core$Dict$values(state.a5))
			]));
};
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (!ra.$) {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $elm$core$Result$map2 = F3(
	function (func, ra, rb) {
		if (ra.$ === 1) {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 1) {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				return $elm$core$Result$Ok(
					A2(func, a, b));
			}
		}
	});
var $elm_community$result_extra$Result$Extra$combine = A2(
	$elm$core$List$foldr,
	$elm$core$Result$map2($elm$core$List$cons),
	$elm$core$Result$Ok(_List_Nil));
var $author$project$Frontend$View$displayNamesForVirtualKeyCodes = _List_fromArray(
	[
		_Utils_Tuple2(8, 'Backspace'),
		_Utils_Tuple2(9, 'Tab'),
		_Utils_Tuple2(13, 'Enter'),
		_Utils_Tuple2(16, 'Shift'),
		_Utils_Tuple2(17, 'Ctrl'),
		_Utils_Tuple2(18, 'Alt'),
		_Utils_Tuple2(19, 'Pause'),
		_Utils_Tuple2(27, 'Escape'),
		_Utils_Tuple2(32, 'Spacebar'),
		_Utils_Tuple2(37, 'Left Arrow'),
		_Utils_Tuple2(38, 'Up Arrow'),
		_Utils_Tuple2(39, 'Right Arrow'),
		_Utils_Tuple2(40, 'Down Arrow'),
		_Utils_Tuple2(46, 'Delete'),
		_Utils_Tuple2(48, '0'),
		_Utils_Tuple2(49, '1'),
		_Utils_Tuple2(50, '2'),
		_Utils_Tuple2(51, '3'),
		_Utils_Tuple2(52, '4'),
		_Utils_Tuple2(53, '5'),
		_Utils_Tuple2(54, '6'),
		_Utils_Tuple2(55, '7'),
		_Utils_Tuple2(56, '8'),
		_Utils_Tuple2(57, '9'),
		_Utils_Tuple2(65, 'A'),
		_Utils_Tuple2(66, 'B'),
		_Utils_Tuple2(67, 'C'),
		_Utils_Tuple2(68, 'D'),
		_Utils_Tuple2(69, 'E'),
		_Utils_Tuple2(70, 'F'),
		_Utils_Tuple2(71, 'G'),
		_Utils_Tuple2(72, 'H'),
		_Utils_Tuple2(73, 'I'),
		_Utils_Tuple2(74, 'J'),
		_Utils_Tuple2(75, 'K'),
		_Utils_Tuple2(76, 'L'),
		_Utils_Tuple2(77, 'M'),
		_Utils_Tuple2(78, 'N'),
		_Utils_Tuple2(79, 'O'),
		_Utils_Tuple2(80, 'P'),
		_Utils_Tuple2(81, 'Q'),
		_Utils_Tuple2(82, 'R'),
		_Utils_Tuple2(83, 'S'),
		_Utils_Tuple2(84, 'T'),
		_Utils_Tuple2(85, 'U'),
		_Utils_Tuple2(86, 'V'),
		_Utils_Tuple2(87, 'W'),
		_Utils_Tuple2(88, 'X'),
		_Utils_Tuple2(89, 'Y'),
		_Utils_Tuple2(90, 'Z'),
		_Utils_Tuple2(112, 'F1'),
		_Utils_Tuple2(113, 'F2'),
		_Utils_Tuple2(114, 'F3'),
		_Utils_Tuple2(115, 'F4'),
		_Utils_Tuple2(116, 'F5'),
		_Utils_Tuple2(117, 'F6'),
		_Utils_Tuple2(118, 'F7'),
		_Utils_Tuple2(119, 'F8'),
		_Utils_Tuple2(120, 'F9'),
		_Utils_Tuple2(121, 'F10'),
		_Utils_Tuple2(122, 'F11'),
		_Utils_Tuple2(123, 'F12'),
		_Utils_Tuple2(124, 'F13'),
		_Utils_Tuple2(125, 'F14'),
		_Utils_Tuple2(126, 'F15'),
		_Utils_Tuple2(127, 'F16'),
		_Utils_Tuple2(164, 'Left Alt'),
		_Utils_Tuple2(165, 'Right Alt')
	]);
var $author$project$Frontend$RunBot$parsePauseBotKeyCodeFromName = function (keyName) {
	return A2(
		$elm$core$Maybe$map,
		$elm$core$Tuple$first,
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Tuple$second,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$toLower,
						$elm$core$Basics$eq(
							$elm$core$String$toLower(keyName)))),
				$author$project$Frontend$View$displayNamesForVirtualKeyCodes)));
};
var $author$project$Frontend$RunBot$parsePauseBotKeyCodesFromAggregateString = A2(
	$elm$core$Basics$composeR,
	$elm$core$String$split('+'),
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$concatMap(
			$elm$core$String$split(',')),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$map($elm$core$String$trim),
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$map(
					function (keyName) {
						return A2(
							$elm$core$Maybe$withDefault,
							$elm$core$Result$Err('Unknown key name: ' + keyName),
							A2(
								$elm$core$Maybe$map,
								$elm$core$Result$Ok,
								$author$project$Frontend$RunBot$parsePauseBotKeyCodeFromName(keyName)));
					}),
				$elm_community$result_extra$Result$Extra$combine))));
var $author$project$Frontend$RunBot$playSessionConfigFromStartArguments = function (startArguments) {
	var environment = function () {
		var _v0 = startArguments.kZ;
		if (_v0.$ === 1) {
			return $author$project$BotConfig$defaultPlaySessionConfig.kZ;
		} else {
			var environmentPath = _v0.a;
			return A2(
				$author$project$HostInterface$FromPathAgentEnvironment,
				environmentPath,
				{ie: startArguments.ke});
		}
	}();
	return {
		ke: A2($elm$core$Maybe$withDefault, '', startArguments.ke),
		kQ: A2($elm$core$Maybe$withDefault, $author$project$BotConfig$defaultPlaySessionConfig.kQ, startArguments.kQ),
		kT: startArguments.kT,
		kZ: environment,
		l2: startArguments.l2,
		me: A2(
			$elm$core$Maybe$withDefault,
			$author$project$BotConfig$defaultPlaySessionConfig.me,
			A2(
				$elm$core$Maybe$andThen,
				A2($elm$core$Basics$composeR, $author$project$Frontend$RunBot$parsePauseBotKeyCodesFromAggregateString, $elm$core$Result$toMaybe),
				startArguments.hQ)),
		mG: A2(
			$elm$core$Maybe$withDefault,
			$author$project$BotConfig$defaultPlaySessionConfig.mG,
			A2($elm$core$Maybe$andThen, $elm$core$String$toInt, startArguments.iK))
	};
};
var $elm$core$Dict$singleton = F2(
	function (key, value) {
		return A5($elm$core$Dict$RBNode_elm_builtin, 1, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
	});
var $author$project$ProgramCodeModel$parseArtifactAsBot = function (loadArtifactOk) {
	return A2(
		$elm$core$Result$map,
		function (propertiesFromCode) {
			return {av: loadArtifactOk, bB: propertiesFromCode};
		},
		loadArtifactOk.bJ);
};
var $author$project$Frontend$RunBot$tryLoadBotFromArtifactOrReuseFromCache = F2(
	function (cache, loadArtifactOk) {
		var _v0 = $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.av;
					},
					$elm$core$Basics$eq(loadArtifactOk)),
				cache));
		if (!_v0.$) {
			var fromCache = _v0.a;
			return $elm$core$Result$Ok(fromCache);
		} else {
			return A2(
				$elm$core$Result$mapError,
				$elm$core$Basics$append('Failed to parse artifact as bot: '),
				$author$project$ProgramCodeModel$parseArtifactAsBot(loadArtifactOk));
		}
	});
var $author$project$Frontend$DevTools$FromFebruaryAgentEvent = $elm$core$Basics$identity;
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$BotSettingsChangedEvent = function (a) {
	return {$: 1, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$SessionDurationPlannedEvent = function (a) {
	return {$: 2, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$TaskCompletedEvent = function (a) {
	return {$: 3, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$TimeArrivedEvent = {$: 0};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$CompleteWithoutResult = {$: 6};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$CreateVolatileProcessResponse = function (a) {
	return {$: 0, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$InvokeMethodOnWindowResponse = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$OpenWindowResponse = function (a) {
	return {$: 2, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$RandomBytesResponse = function (a) {
	return {$: 4, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$RequestToVolatileProcessResponse = function (a) {
	return {$: 1, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$WindowsInputResponse = function (a) {
	return {$: 5, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$MethodNotAvailableError = {$: 1};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$ReadFromWindowError = function (a) {
	return {$: 2, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$WindowNotFoundError = function (a) {
	return {$: 0, a: a};
};
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_InvokeMethodOnWindowError = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'MethodNotAvailableError',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull($author$project$DevTools$BotInterface_To_Host_2024_10_19$MethodNotAvailableError)),
			A2(
			$elm$json$Json$Decode$field,
			'ReadFromWindowError',
			$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$ReadFromWindowError,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'WindowNotFoundError',
			$elm$json$Json$Decode$lazy(
				function (_v1) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$WindowNotFoundError,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'windowsIds',
									_List_fromArray(
										['WindowsIds']),
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string)),
								$elm$json$Json$Decode$succeed(
									function (windowsIds) {
										return {jM: windowsIds};
									}))));
				}))
		]));
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$ChromeDevToolsProtocolRuntimeEvaluateMethodResult = function (a) {
	return {$: 0, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$InvokeMethodOnWindowResultWithoutValue = {$: 2};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$ReadFromWindowMethodResult = function (a) {
	return {$: 1, a: a};
};
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_InvokeMethodOnWindowResult = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'ChromeDevToolsProtocolRuntimeEvaluateMethodResult',
			$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$ChromeDevToolsProtocolRuntimeEvaluateMethodResult,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result,
								$elm$json$Json$Decode$string,
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'returnValueJsonSerialized',
										_List_fromArray(
											['ReturnValueJsonSerialized']),
										$elm$json$Json$Decode$string),
									$elm$json$Json$Decode$succeed(
										function (returnValueJsonSerialized) {
											return {il: returnValueJsonSerialized};
										})))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'InvokeMethodOnWindowResultWithoutValue',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull($author$project$DevTools$BotInterface_To_Host_2024_10_19$InvokeMethodOnWindowResultWithoutValue)),
			A2(
			$elm$json$Json$Decode$field,
			'ReadFromWindowMethodResult',
			$elm$json$Json$Decode$lazy(
				function (_v1) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$ReadFromWindowMethodResult,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'imageData',
									_List_fromArray(
										['ImageData']),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'screenshotCrops_binned_4x4',
											_List_fromArray(
												['ScreenshotCrops_binned_4x4']),
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List(
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'pixelsString',
														_List_fromArray(
															['PixelsString']),
														$elm$json$Json$Decode$string),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'widthPixels',
															_List_fromArray(
																['WidthPixels']),
															$elm$json$Json$Decode$int),
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'offset',
																_List_fromArray(
																	['Offset']),
																A2(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																	A3(
																		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																		'y',
																		_List_fromArray(
																			['Y']),
																		$elm$json$Json$Decode$int),
																	A2(
																		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																		A3(
																			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																			'x',
																			_List_fromArray(
																				['X']),
																			$elm$json$Json$Decode$int),
																		$elm$json$Json$Decode$succeed(
																			F2(
																				function (x, y) {
																					return {nB: x, nC: y};
																				}))))),
															$elm$json$Json$Decode$succeed(
																F3(
																	function (offset, widthPixels, pixelsString) {
																		return {aA: offset, bA: pixelsString, bN: widthPixels};
																	}))))))),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'screenshotCrops_binned_2x2',
												_List_fromArray(
													['ScreenshotCrops_binned_2x2']),
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List(
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'pixelsString',
															_List_fromArray(
																['PixelsString']),
															$elm$json$Json$Decode$string),
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'widthPixels',
																_List_fromArray(
																	['WidthPixels']),
																$elm$json$Json$Decode$int),
															A2(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																A3(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																	'offset',
																	_List_fromArray(
																		['Offset']),
																	A2(
																		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																		A3(
																			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																			'y',
																			_List_fromArray(
																				['Y']),
																			$elm$json$Json$Decode$int),
																		A2(
																			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																			A3(
																				$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																				'x',
																				_List_fromArray(
																					['X']),
																				$elm$json$Json$Decode$int),
																			$elm$json$Json$Decode$succeed(
																				F2(
																					function (x, y) {
																						return {nB: x, nC: y};
																					}))))),
																$elm$json$Json$Decode$succeed(
																	F3(
																		function (offset, widthPixels, pixelsString) {
																			return {aA: offset, bA: pixelsString, bN: widthPixels};
																		}))))))),
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'screenshotCrops_original',
													_List_fromArray(
														['ScreenshotCrops_original']),
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List(
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'pixelsString',
																_List_fromArray(
																	['PixelsString']),
																$elm$json$Json$Decode$string),
															A2(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																A3(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																	'widthPixels',
																	_List_fromArray(
																		['WidthPixels']),
																	$elm$json$Json$Decode$int),
																A2(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																	A3(
																		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																		'offset',
																		_List_fromArray(
																			['Offset']),
																		A2(
																			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																			A3(
																				$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																				'y',
																				_List_fromArray(
																					['Y']),
																				$elm$json$Json$Decode$int),
																			A2(
																				$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																				A3(
																					$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																					'x',
																					_List_fromArray(
																						['X']),
																					$elm$json$Json$Decode$int),
																				$elm$json$Json$Decode$succeed(
																					F2(
																						function (x, y) {
																							return {nB: x, nC: y};
																						}))))),
																	$elm$json$Json$Decode$succeed(
																		F3(
																			function (offset, widthPixels, pixelsString) {
																				return {aA: offset, bA: pixelsString, bN: widthPixels};
																			}))))))),
												$elm$json$Json$Decode$succeed(
													F3(
														function (screenshotCrops_original, screenshotCrops_binned_2x2, screenshotCrops_binned_4x4) {
															return {iw: screenshotCrops_binned_2x2, ix: screenshotCrops_binned_4x4, iy: screenshotCrops_original};
														})))))),
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'windowDpi',
										_List_fromArray(
											['WindowDpi']),
										$elm$json$Json$Decode$int),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'clientRectLeftUpperToScreen',
											_List_fromArray(
												['ClientRectLeftUpperToScreen']),
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'y',
													_List_fromArray(
														['Y']),
													$elm$json$Json$Decode$int),
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'x',
														_List_fromArray(
															['X']),
														$elm$json$Json$Decode$int),
													$elm$json$Json$Decode$succeed(
														F2(
															function (x, y) {
																return {nB: x, nC: y};
															}))))),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'clientRect',
												_List_fromArray(
													['ClientRect']),
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'bottom',
														_List_fromArray(
															['Bottom']),
														$elm$json$Json$Decode$int),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'right',
															_List_fromArray(
																['Right']),
															$elm$json$Json$Decode$int),
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'top',
																_List_fromArray(
																	['Top']),
																$elm$json$Json$Decode$int),
															A2(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																A3(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																	'left',
																	_List_fromArray(
																		['Left']),
																	$elm$json$Json$Decode$int),
																$elm$json$Json$Decode$succeed(
																	F4(
																		function (left, top, right, bottom) {
																			return {cp: bottom, cV: left, c9: right, $7: top};
																		}))))))),
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'windowRect',
													_List_fromArray(
														['WindowRect']),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'bottom',
															_List_fromArray(
																['Bottom']),
															$elm$json$Json$Decode$int),
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'right',
																_List_fromArray(
																	['Right']),
																$elm$json$Json$Decode$int),
															A2(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																A3(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																	'top',
																	_List_fromArray(
																		['Top']),
																	$elm$json$Json$Decode$int),
																A2(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																	A3(
																		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																		'left',
																		_List_fromArray(
																			['Left']),
																		$elm$json$Json$Decode$int),
																	$elm$json$Json$Decode$succeed(
																		F4(
																			function (left, top, right, bottom) {
																				return {cp: bottom, cV: left, c9: right, $7: top};
																			}))))))),
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'windowText',
														_List_fromArray(
															['WindowText']),
														$elm$json$Json$Decode$string),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'readingId',
															_List_fromArray(
																['ReadingId']),
															$elm$json$Json$Decode$string),
														$elm$json$Json$Decode$succeed(
															F7(
																function (readingId, windowText, windowRect, clientRect, clientRectLeftUpperToScreen, windowDpi, imageData) {
																	return {bR: clientRect, dD: clientRectLeftUpperToScreen, cN: imageData, h7: readingId, jI: windowDpi, cg: windowRect, jK: windowText};
																})))))))))));
				}))
		]));
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$FailedToAcquireInputFocus = 1;
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$ProcessNotFound = 0;
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_RequestToVolatileProcessError = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'FailedToAcquireInputFocus',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull(1)),
			A2(
			$elm$json$Json$Decode$field,
			'ProcessNotFound',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull(0))
		]));
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_TaskResultStructure = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'CompleteWithoutResult',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull($author$project$DevTools$BotInterface_To_Host_2024_10_19$CompleteWithoutResult)),
			A2(
			$elm$json$Json$Decode$field,
			'CreateVolatileProcessResponse',
			$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$CreateVolatileProcessResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result,
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'exceptionToString',
										_List_fromArray(
											['ExceptionToString']),
										$elm$json$Json$Decode$string),
									$elm$json$Json$Decode$succeed(
										function (exceptionToString) {
											return {cK: exceptionToString};
										})),
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'processId',
										_List_fromArray(
											['ProcessId']),
										$elm$json$Json$Decode$string),
									$elm$json$Json$Decode$succeed(
										function (processId) {
											return {Q: processId};
										})))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'InvokeMethodOnWindowResponse',
			$elm$json$Json$Decode$lazy(
				function (_v1) {
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$InvokeMethodOnWindowResponse,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string),
						A2(
							$elm$json$Json$Decode$index,
							1,
							A2($author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result, $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_InvokeMethodOnWindowError, $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_InvokeMethodOnWindowResult)));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'OpenWindowResponse',
			$elm$json$Json$Decode$lazy(
				function (_v2) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$OpenWindowResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result,
								$elm$json$Json$Decode$string,
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'osProcessId',
										_List_fromArray(
											['OsProcessId']),
										$elm$json$Json$Decode$string),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'windowId',
											_List_fromArray(
												['WindowId']),
											$elm$json$Json$Decode$string),
										$elm$json$Json$Decode$succeed(
											F2(
												function (windowId, osProcessId) {
													return {hJ: osProcessId, jJ: windowId};
												})))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'RandomBytesResponse',
			$elm$json$Json$Decode$lazy(
				function (_v3) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$RandomBytesResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$int)));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'RequestToVolatileProcessResponse',
			$elm$json$Json$Decode$lazy(
				function (_v4) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$RequestToVolatileProcessResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result,
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_RequestToVolatileProcessError,
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'acquireInputFocusDurationMilliseconds',
										_List_fromArray(
											['AcquireInputFocusDurationMilliseconds']),
										$elm$json$Json$Decode$int),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'durationInMilliseconds',
											_List_fromArray(
												['DurationInMilliseconds']),
											$elm$json$Json$Decode$int),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'returnValueToString',
												_List_fromArray(
													['ReturnValueToString']),
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'exceptionToString',
													_List_fromArray(
														['ExceptionToString']),
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
												$elm$json$Json$Decode$succeed(
													F4(
														function (exceptionToString, returnValueToString, durationInMilliseconds, acquireInputFocusDurationMilliseconds) {
															return {eR: acquireInputFocusDurationMilliseconds, fS: durationInMilliseconds, cK: exceptionToString, im: returnValueToString};
														})))))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'WindowsInputResponse',
			$elm$json$Json$Decode$lazy(
				function (_v5) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$WindowsInputResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'errorMessages',
									_List_fromArray(
										['ErrorMessages']),
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string)),
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'totalTimeMilliseconds',
										_List_fromArray(
											['TotalTimeMilliseconds']),
										$elm$json$Json$Decode$int),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'abortedStepsCount',
											_List_fromArray(
												['AbortedStepsCount']),
											$elm$json$Json$Decode$int),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'completedStepsCount',
												_List_fromArray(
													['CompletedStepsCount']),
												$elm$json$Json$Decode$int),
											$elm$json$Json$Decode$succeed(
												F4(
													function (completedStepsCount, abortedStepsCount, totalTimeMilliseconds, errorMessages) {
														return {eP: abortedStepsCount, fE: completedStepsCount, f_: errorMessages, jk: totalTimeMilliseconds};
													}))))))));
				}))
		]));
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_BotEventAtTime = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'BotSettingsChangedEvent',
			$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$BotSettingsChangedEvent,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'SessionDurationPlannedEvent',
			$elm$json$Json$Decode$lazy(
				function (_v1) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$SessionDurationPlannedEvent,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'timeInMilliseconds',
									_List_fromArray(
										['TimeInMilliseconds']),
									$elm$json$Json$Decode$int),
								$elm$json$Json$Decode$succeed(
									function (timeInMilliseconds) {
										return {bI: timeInMilliseconds};
									}))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'TaskCompletedEvent',
			$elm$json$Json$Decode$lazy(
				function (_v2) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$TaskCompletedEvent,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'taskResult',
									_List_fromArray(
										['TaskResult']),
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_TaskResultStructure),
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'taskId',
										_List_fromArray(
											['TaskId']),
										$elm$json$Json$Decode$string),
									$elm$json$Json$Decode$succeed(
										F2(
											function (taskId, taskResult) {
												return {di: taskId, jd: taskResult};
											}))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'TimeArrivedEvent',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull($author$project$DevTools$BotInterface_To_Host_2024_10_19$TimeArrivedEvent))
		]));
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_bfe0615d6e = A2(
	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
	A3(
		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
		'eventAtTime',
		_List_fromArray(
			['EventAtTime']),
		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_BotEventAtTime),
	A2(
		$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
		A3(
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
			'timeInMilliseconds',
			_List_fromArray(
				['TimeInMilliseconds']),
			$elm$json$Json$Decode$int),
		$elm$json$Json$Decode$succeed(
			F2(
				function (timeInMilliseconds, eventAtTime) {
					return {f0: eventAtTime, bI: timeInMilliseconds};
				}))));
var $author$project$CompilationInterface$GenerateJsonConverters$jsonDecodeBotEvent = $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_bfe0615d6e;
var $author$project$Frontend$DevTools$decodeAgentEvent = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2($elm$json$Json$Decode$map, $elm$core$Basics$identity, $author$project$CompilationInterface$GenerateJsonConverters$jsonDecodeBotEvent)
		]));
var $author$project$HostInterface$PngImageExportFunction = 0;
var $author$project$HostInterface$ReadFromWindowScreenshotCropExport = $elm$core$Basics$identity;
var $elm$core$Array$length = function (_v0) {
	var len = _v0.a;
	return len;
};
var $elm$json$Json$Decode$array = _Json_decodeArray;
var $author$project$Frontend$DevTools$parseImageCropPixelsArrayFromPixelsString = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Decode$decodeString(
		$elm$json$Json$Decode$array($elm$json$Json$Decode$int)),
	$elm$core$Result$mapError($elm$json$Json$Decode$errorToString));
var $author$project$Frontend$DevTools$parseImageCropFromInterface = function (imageCrop) {
	return A2(
		$elm$core$Result$map,
		function (pixels) {
			return {aA: imageCrop.aA, b5: pixels, bN: imageCrop.bN};
		},
		$author$project$Frontend$DevTools$parseImageCropPixelsArrayFromPixelsString(imageCrop.bA));
};
var $author$project$Frontend$DevTools$listScreenshotCropsWithBinningFactor = function (readingComplete) {
	return A2(
		$elm$core$List$map,
		function (_v0) {
			var binningFactor = _v0.a;
			var getCrops = _v0.b;
			return _Utils_Tuple2(
				binningFactor,
				A2(
					$elm$core$List$filterMap,
					function (crop) {
						return $elm$core$Result$toMaybe(
							$author$project$Frontend$DevTools$parseImageCropFromInterface(crop));
					},
					getCrops(readingComplete)));
		},
		_List_fromArray(
			[
				_Utils_Tuple2(
				1,
				function ($) {
					return $.iy;
				}),
				_Utils_Tuple2(
				2,
				function ($) {
					return $.iw;
				}),
				_Utils_Tuple2(
				4,
				function ($) {
					return $.ix;
				})
			]));
};
var $author$project$Frontend$DevTools$mapFromGeneralAgentEventStructureToLatest = function (generalAgentEvent) {
	var fromFebruaryAgentEvent = generalAgentEvent;
	return $elm$core$Result$Ok(fromFebruaryAgentEvent);
};
var $author$project$Frontend$DevTools$readFromWindowDerivations = function (agentEventCache) {
	var maybeReadFromWindowResponse = function () {
		var _v3 = A2(
			$elm$core$Maybe$andThen,
			A2($elm$core$Basics$composeR, $author$project$Frontend$DevTools$mapFromGeneralAgentEventStructureToLatest, $elm$core$Result$toMaybe),
			A2(
				$elm$core$Maybe$andThen,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.cI;
					},
					$elm$core$Result$toMaybe),
				$elm$core$Result$toMaybe(agentEventCache.e$)));
		if (_v3.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var agentEvent = _v3.a;
			var _v4 = agentEvent.f0;
			if (_v4.$ === 3) {
				var taskCompletedEvent = _v4.a;
				var _v5 = taskCompletedEvent.jd;
				if ((_v5.$ === 3) && (!_v5.b.$)) {
					var windowId = _v5.a;
					var response = _v5.b.a;
					if (response.$ === 1) {
						var readFromWindowResult = response.a;
						return $elm$core$Maybe$Just(
							{w: readFromWindowResult, jJ: windowId});
					} else {
						return $elm$core$Maybe$Nothing;
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	}();
	if (maybeReadFromWindowResponse.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var readFromWindowResponse = maybeReadFromWindowResponse.a;
		var derivationsFromCrop = F2(
			function (inBinningFactorCropIndex, _v2) {
				var cropBinningFactor = _v2.a;
				var crop = _v2.b;
				return {
					fd: cropBinningFactor,
					dM: {
						_: ($elm$core$Array$length(crop.b5) / crop.bN) | 0,
						u: crop.bN
					},
					dQ: {fd: cropBinningFactor, f4: 0, gG: inBinningFactorCropIndex},
					av: crop
				};
			});
		var screenshotCrops = $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (_v1) {
					var binningFactor = _v1.a;
					var inBinningFactorCrops = _v1.b;
					return A2(
						$elm$core$List$indexedMap,
						derivationsFromCrop,
						A2(
							$elm$core$List$map,
							$elm$core$Tuple$pair(binningFactor),
							inBinningFactorCrops));
				},
				$author$project$Frontend$DevTools$listScreenshotCropsWithBinningFactor(readFromWindowResponse.w.cN)));
		return $elm$core$Maybe$Just(
			{w: readFromWindowResponse.w, er: screenshotCrops, jJ: readFromWindowResponse.jJ});
	}
};
var $author$project$Frontend$DevTools$domainSpecificDerivations = function (agentEvent) {
	return {
		w: $author$project$Frontend$DevTools$readFromWindowDerivations(agentEvent)
	};
};
var $author$project$Frontend$DevTools$agentEventContentWithCacheFromAgentEventContent = function (agentEventContent) {
	var beforeDomainSpecificDerivations = {
		e_: agentEventContent.e_,
		e$: A2(
			$elm$core$Result$map,
			function (agentEventString) {
				return {
					cI: A2($elm$json$Json$Decode$decodeString, $author$project$Frontend$DevTools$decodeAgentEvent, agentEventString),
					c2: agentEventString
				};
			},
			agentEventContent.e$),
		cJ: {w: $elm$core$Maybe$Nothing},
		jf: agentEventContent.jf
	};
	return _Utils_update(
		beforeDomainSpecificDerivations,
		{
			cJ: $author$project$Frontend$DevTools$domainSpecificDerivations(beforeDomainSpecificDerivations)
		});
};
var $author$project$Frontend$DevTools$updateFromHostEvent = F3(
	function (viewState, eventFromHost, stateBefore) {
		if (eventFromHost.$ === 14) {
			var sessionName = eventFromHost.a;
			var eventIndex = eventFromHost.b;
			var result = eventFromHost.c;
			var selectedSessionBefore = stateBefore.V;
			if (!_Utils_eq(selectedSessionBefore.p, sessionName)) {
				return _Utils_Tuple2(stateBefore, _List_Nil);
			} else {
				var _v1 = A2(
					$author$project$Frontend$DevTools$continueAddingCmdToGetAgentEventContents,
					viewState,
					_Utils_update(
						selectedSessionBefore,
						{
							ax: A3(
								$elm$core$Dict$insert,
								eventIndex,
								A2($elm$core$Result$map, $author$project$Frontend$DevTools$agentEventContentWithCacheFromAgentEventContent, result),
								selectedSessionBefore.ax)
						}));
				var selectedSession = _v1.a;
				var cmds = _v1.b;
				return _Utils_Tuple2(
					_Utils_update(
						stateBefore,
						{V: selectedSession}),
					cmds);
			}
		} else {
			return _Utils_Tuple2(stateBefore, _List_Nil);
		}
	});
var $author$project$Frontend$RunBot$updateFromHostEventDevTools = F3(
	function (viewState, eventFromHost, stateBefore) {
		return A2(
			$elm$core$Tuple$mapSecond,
			$elm$core$List$map($author$project$Frontend$RunBot$DevToolsCmd),
			A2(
				$author$project$Frontend$RunBot$updateIfInDevToolsStage,
				A2($author$project$Frontend$DevTools$updateFromHostEvent, viewState, eventFromHost),
				stateBefore));
	});
var $author$project$Frontend$RunBot$CompletedTestOnlineSessionKey = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$HostInterface$StoreOnlineSessionKey = function (a) {
	return {$: 15, a: a};
};
var $author$project$Frontend$RunBot$UserInputStartPlaySessionEvent = function (a) {
	return {$: 2, a: a};
};
var $author$project$Frontend$RunBot$updateFromHostEventLessDevTools = F4(
	function (viewState, messageToHost, eventFromHost, stateBefore) {
		switch (eventFromHost.$) {
			case 7:
				var result = eventFromHost.a;
				var _v1 = stateBefore.bU;
				if (_v1.$ === 1) {
					var configureSessionBefore = _v1.a;
					var _v2 = configureSessionBefore.kf;
					if (!_v2.$) {
						var botSourceRequestedPath = _v2.a;
						var loadedSourcePath = function () {
							if (messageToHost.$ === 7) {
								var sourcePath = messageToHost.a;
								return $elm$core$Maybe$Just(sourcePath);
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}();
						if (!_Utils_eq(
							loadedSourcePath,
							$elm$core$Maybe$Just(botSourceRequestedPath))) {
							return _Utils_Tuple2(stateBefore, _List_Nil);
						} else {
							var configureSession = _Utils_update(
								configureSessionBefore,
								{
									g7: $elm$core$Maybe$Just(
										A2(
											$elm$core$Maybe$withDefault,
											A2(
												$elm$core$Result$andThen,
												$author$project$Frontend$RunBot$tryLoadBotFromArtifactOrReuseFromCache(
													$elm$core$Dict$values(viewState.a4)),
												result),
											configureSessionBefore.g7))
								});
							var state = _Utils_update(
								stateBefore,
								{
									bU: $author$project$Frontend$RunBot$ConfigureSessionStage(configureSession)
								});
							return A2(
								$elm$core$Maybe$withDefault,
								false,
								A2(
									$elm$core$Maybe$map,
									function ($) {
										return $.iQ;
									},
									configureSession.mP)) ? A3(
								$author$project$Frontend$RunBot$update,
								viewState,
								$author$project$Frontend$RunBot$UserInputStartPlaySessionEvent(
									{bE: false}),
								state) : _Utils_Tuple2(state, _List_Nil);
						}
					} else {
						return _Utils_Tuple2(stateBefore, _List_Nil);
					}
				} else {
					return _Utils_Tuple2(stateBefore, _List_Nil);
				}
			case 9:
				var startRequest = eventFromHost.a;
				var result = eventFromHost.b;
				var _v4 = stateBefore.bU;
				if (_v4.$ === 3) {
					var playSession = _v4.a;
					if (!_Utils_eq(startRequest, playSession.mR)) {
						return _Utils_Tuple2(stateBefore, _List_Nil);
					} else {
						var startResult = A2(
							$elm$core$Maybe$withDefault,
							_Utils_Tuple2(viewState.s, result),
							playSession.mS);
						return _Utils_Tuple2(
							_Utils_update(
								stateBefore,
								{
									bU: $author$project$Frontend$RunBot$PlaySessionStage(
										_Utils_update(
											playSession,
											{
												lC: A2(
													$elm$core$Maybe$map,
													$elm$core$Tuple$pair(viewState.s),
													$elm$core$Result$toMaybe(startResult.b)),
												mS: $elm$core$Maybe$Just(startResult)
											}))
								}),
							_List_Nil);
					}
				} else {
					return _Utils_Tuple2(stateBefore, _List_Nil);
				}
			case 10:
				var maybeSession = eventFromHost.a;
				if (maybeSession.$ === 1) {
					return _Utils_Tuple2(stateBefore, _List_Nil);
				} else {
					var sessionStatusEvent = maybeSession.a;
					var continueWithEndSession = _Utils_Tuple2(
						stateBefore,
						function () {
							var _v7 = sessionStatusEvent.ar.cF;
							if (_v7.$ === 2) {
								return _List_Nil;
							} else {
								return _List_fromArray(
									[
										$author$project$Frontend$RunBot$MessageToHostCmd($author$project$HostInterface$EndPlaySession)
									]);
							}
						}());
					var _v6 = stateBefore.bU;
					switch (_v6.$) {
						case 3:
							var playSession = _v6.a;
							return (!_Utils_eq(playSession.mR.bD, sessionStatusEvent.bD)) ? continueWithEndSession : _Utils_Tuple2(
								_Utils_update(
									stateBefore,
									{
										bU: $author$project$Frontend$RunBot$PlaySessionStage(
											_Utils_update(
												playSession,
												{
													lC: $elm$core$Maybe$Just(
														_Utils_Tuple2(viewState.s, sessionStatusEvent.ar))
												}))
									}),
								_List_Nil);
						case 4:
							var devTools = _v6.a;
							return (!_Utils_eq(devTools.V.p, sessionStatusEvent.bD)) ? continueWithEndSession : _Utils_Tuple2(stateBefore, _List_Nil);
						default:
							return continueWithEndSession;
					}
				}
			case 12:
				var testedKey = eventFromHost.a;
				var result = eventFromHost.b;
				var _v8 = stateBefore.bU;
				if (_v8.$ === 2) {
					var enterOnlineKey = _v8.a;
					if (!result.$) {
						var storeKeyCmd = $author$project$HostInterface$StoreOnlineSessionKey(testedKey);
						return A2(
							$elm$core$Tuple$mapSecond,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$List$cons(storeKeyCmd),
								$elm$core$List$map($author$project$Frontend$RunBot$MessageToHostCmd)),
							A5(
								$author$project$Frontend$RunBot$continueWithStartPlaySession,
								viewState,
								enterOnlineKey.ae,
								enterOnlineKey.F,
								{
									c0: $elm$core$Maybe$Just(testedKey)
								},
								stateBefore));
					} else {
						return _Utils_Tuple2(
							_Utils_update(
								stateBefore,
								{
									bU: $author$project$Frontend$RunBot$EnterOnlineKeyStage(
										_Utils_update(
											enterOnlineKey,
											{
												bH: $elm$core$Maybe$Just(
													A2($author$project$Frontend$RunBot$CompletedTestOnlineSessionKey, testedKey, result))
											}))
								}),
							_List_Nil);
					}
				} else {
					return _Utils_Tuple2(stateBefore, _List_Nil);
				}
			default:
				return _Utils_Tuple2(stateBefore, _List_Nil);
		}
	});
var $author$project$Frontend$RunBot$updateFromHostEvent = F4(
	function (viewState, messageToHost, eventFromHost, stateBefore) {
		var _v0 = A2(
			$elm$core$Tuple$mapFirst,
			A2($author$project$Frontend$RunBot$updateFromHostEventDevTools, viewState, eventFromHost),
			A4($author$project$Frontend$RunBot$updateFromHostEventLessDevTools, viewState, messageToHost, eventFromHost, stateBefore));
		var _v1 = _v0.a;
		var state = _v1.a;
		var devToolsCmds = _v1.b;
		var selfCmds = _v0.b;
		return _Utils_Tuple2(
			state,
			_Utils_ap(selfCmds, devToolsCmds));
	});
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === -2) {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $author$project$Frontend$Main$viewStateFromState = function (state) {
	var localPlaySessionsFromSummaries = A2(
		$elm$core$Dict$map,
		$elm$core$Basics$always($elm$core$Maybe$Just),
		state.a5);
	var localPlaySessionsFromList = A2(
		$elm$core$Maybe$withDefault,
		$elm$core$Dict$empty,
		A2(
			$elm$core$Maybe$map,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.ek;
				},
				A2(
					$elm$core$Basics$composeR,
					$elm$core$List$map(
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Tuple$pair,
							$elm$core$Basics$apR($elm$core$Maybe$Nothing))),
					$elm$core$Dict$fromList)),
			state.bu));
	var localPlaySessions = A2($elm$core$Dict$union, localPlaySessionsFromSummaries, localPlaySessionsFromList);
	return {bm: state.bm, aX: state.aX, bX: state.bX, a4: state.a4, bZ: state.bZ, cX: localPlaySessions, mB: state.b7, be: state.be, s: state.s};
};
var $author$project$Frontend$Main$updateFromHostEvent = F3(
	function (messageToHost, eventFromHost, stateBefore) {
		var state = function () {
			switch (eventFromHost.$) {
				case 0:
					var installStatus = eventFromHost.a;
					var _v5 = stateBefore.aQ;
					if (!_v5.$) {
						return _Utils_update(
							stateBefore,
							{
								aQ: $author$project$Frontend$Main$CheckedInstallation(installStatus)
							});
					} else {
						return stateBefore;
					}
				case 1:
					var installResult = eventFromHost.a;
					var _v6 = stateBefore.aQ;
					if (_v6.$ === 1) {
						return _Utils_update(
							stateBefore,
							{
								aQ: $author$project$Frontend$Main$AttemptedInstallation(installResult)
							});
					} else {
						return stateBefore;
					}
				case 2:
					var clientSettings = eventFromHost.a;
					var maybeSettingsDialog = A2(
						$elm$core$Maybe$map,
						function (dialog) {
							return _Utils_update(
								dialog,
								{
									cU: $elm$core$Maybe$Just(
										_Utils_Tuple2(stateBefore.s, clientSettings))
								});
						},
						stateBefore.aI);
					return _Utils_update(
						stateBefore,
						{aI: maybeSettingsDialog});
				case 3:
					var snapshot = eventFromHost.a;
					return _Utils_update(
						stateBefore,
						{
							bZ: $elm$core$Maybe$Just(
								_Utils_Tuple2(stateBefore.s, snapshot))
						});
				case 6:
					var localPlaySessionsNames = eventFromHost.a;
					return _Utils_update(
						stateBefore,
						{
							bu: $elm$core$Maybe$Just(
								{ek: localPlaySessionsNames, s: stateBefore.s})
						});
				case 7:
					var result = eventFromHost.a;
					var addOfferedBots = function () {
						var _v7 = _Utils_Tuple2(
							messageToHost,
							A2(
								$elm$core$Result$andThen,
								$author$project$Frontend$RunBot$tryLoadBotFromArtifactOrReuseFromCache(
									$author$project$Frontend$Main$aggregateLoadBotSuccessesFromState(stateBefore)),
								result));
						if ((_v7.a.$ === 7) && (!_v7.b.$)) {
							var sourcePath = _v7.a.a;
							var loadedBotOk = _v7.b.a;
							return A2($elm$core$Dict$singleton, sourcePath, loadedBotOk);
						} else {
							return $elm$core$Dict$empty;
						}
					}();
					return _Utils_update(
						stateBefore,
						{
							a4: A2($elm$core$Dict$union, addOfferedBots, stateBefore.a4)
						});
				case 8:
					var loadBotResult = eventFromHost.a;
					return _Utils_update(
						stateBefore,
						{
							bm: A2(
								$elm$core$List$cons,
								A2(
									$elm$core$Result$andThen,
									$author$project$Frontend$RunBot$tryLoadBotFromArtifactOrReuseFromCache(
										$author$project$Frontend$Main$aggregateLoadBotSuccessesFromState(stateBefore)),
									loadBotResult),
								stateBefore.bm)
						});
				case 11:
					var key = eventFromHost.a;
					return _Utils_update(
						stateBefore,
						{
							aX: $elm$core$Maybe$Just(key)
						});
				case 12:
					var testedKey = eventFromHost.a;
					var result = eventFromHost.b;
					var defaultOnlineSessionKey = function () {
						if (result.$ === 1) {
							return stateBefore.aX;
						} else {
							return $elm$core$Maybe$Just(testedKey);
						}
					}();
					return _Utils_update(
						stateBefore,
						{aX: defaultOnlineSessionKey});
				case 15:
					var request = eventFromHost.a;
					var result = eventFromHost.b;
					var botTestResultsBefore = A2(
						$elm$core$Maybe$withDefault,
						$elm$core$Dict$empty,
						A2($elm$core$Dict$get, request.bl, stateBefore.be));
					var botTestResults = A3(
						$elm$core$Dict$insert,
						request.ke,
						{mq: result, s: stateBefore.s},
						botTestResultsBefore);
					var testBotSettingsResults = A3($elm$core$Dict$insert, request.bl, botTestResults, stateBefore.be);
					return _Utils_update(
						stateBefore,
						{be: testBotSettingsResults});
				case 13:
					var sessionName = eventFromHost.a;
					var loadResult = eventFromHost.b;
					var isImported = _Utils_eq(messageToHost, $author$project$HostInterface$ImportPlaySession);
					var loadResultParsed = A2(
						$elm$core$Result$map,
						function (loadSummaryOk) {
							return {
								av: loadSummaryOk,
								d4: isImported,
								g7: A2(
									$elm$core$Result$andThen,
									$author$project$Frontend$RunBot$tryLoadBotFromArtifactOrReuseFromCache(
										$author$project$Frontend$Main$aggregateLoadBotSuccessesFromState(stateBefore)),
									loadSummaryOk.g7)
							};
						},
						loadResult);
					var localPlaySessionsSummaries = A3($elm$core$Dict$insert, sessionName, loadResultParsed, stateBefore.a5);
					return _Utils_update(
						stateBefore,
						{a5: localPlaySessionsSummaries});
				default:
					return stateBefore;
			}
		}();
		var _v0 = function () {
			var _v1 = state.q;
			if (_v1.$ === 1) {
				if (eventFromHost.$ === 5) {
					var startArguments = eventFromHost.a;
					var sessionConfiguration = $author$project$Frontend$RunBot$playSessionConfigFromStartArguments(startArguments);
					var _v3 = A2(
						$elm$core$Tuple$mapSecond,
						$elm$core$List$map($author$project$Frontend$Main$sendMessageToHostCmd),
						A3(
							$author$project$Frontend$RunBot$navigateInto,
							$author$project$Frontend$Main$viewStateFromState(state),
							$author$project$Frontend$RunBot$ConfigureSessionStage(
								{
									kf: $elm$core$Maybe$Nothing,
									kx: $elm$core$Maybe$Nothing,
									lp: stateBefore.s,
									g7: $elm$core$Maybe$Nothing,
									mC: $author$project$Frontend$RunBot$SelectBotFromPath(startArguments.fi),
									mF: sessionConfiguration,
									mP: $elm$core$Maybe$Just(startArguments)
								}),
							$author$project$Frontend$RunBot$init));
					var runBotState = _v3.a;
					var runBotCmd = _v3.b;
					return _Utils_Tuple2(
						$elm$core$Maybe$Just(
							$author$project$Frontend$Main$RunBotBranch(runBotState)),
						runBotCmd);
				} else {
					return _Utils_Tuple2(state.q, _List_Nil);
				}
			} else {
				if (!_v1.a.$) {
					var runBot = _v1.a.a;
					return A2(
						$elm$core$Tuple$mapSecond,
						$elm$core$List$map($author$project$Frontend$Main$cmdFromRunBotCmd),
						A2(
							$elm$core$Tuple$mapFirst,
							A2($elm$core$Basics$composeR, $author$project$Frontend$Main$RunBotBranch, $elm$core$Maybe$Just),
							A4(
								$author$project$Frontend$RunBot$updateFromHostEvent,
								$author$project$Frontend$Main$viewStateFromState(state),
								messageToHost,
								eventFromHost,
								runBot)));
				} else {
					var devTools = _v1.a.a;
					return A2(
						$elm$core$Tuple$mapSecond,
						$elm$core$List$map($author$project$Frontend$Main$cmdFromDevToolsCmd),
						A2(
							$elm$core$Tuple$mapFirst,
							A2($elm$core$Basics$composeR, $author$project$Frontend$Main$DevToolsBranch, $elm$core$Maybe$Just),
							A3(
								$author$project$Frontend$DevTools$updateFromHostEvent,
								$author$project$Frontend$Main$viewStateFromState(state),
								eventFromHost,
								devTools)));
				}
			}
		}();
		var navigationBranch = _v0.a;
		var cmds = _v0.b;
		return _Utils_Tuple2(
			_Utils_update(
				state,
				{q: navigationBranch}),
			$elm$core$Platform$Cmd$batch(cmds));
	});
var $author$project$Frontend$Main$updateForMessageToHostResultEvent = F3(
	function (messageToHost, responseResult, stateBeforeUpdateInProgress) {
		var messagesToHostInProgress = A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Tuple$second,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Basics$eq(messageToHost),
					$elm$core$Basics$not)),
			stateBeforeUpdateInProgress.a7);
		var stateBefore = _Utils_update(
			stateBeforeUpdateInProgress,
			{a7: messagesToHostInProgress});
		if (responseResult.$ === 1) {
			var error = responseResult.a;
			var messageRecordBefore = A2(
				$elm$core$Maybe$withDefault,
				{bT: 0, f9: stateBefore.s, g1: stateBefore.s},
				A2($elm$core$Dict$get, error, stateBefore.ay));
			return _Utils_Tuple2(
				_Utils_update(
					stateBefore,
					{
						ay: A3(
							$elm$core$Dict$insert,
							error,
							_Utils_update(
								messageRecordBefore,
								{bT: messageRecordBefore.bT + 1, g1: stateBefore.s}),
							stateBefore.ay)
					}),
				$elm$core$Platform$Cmd$none);
		} else {
			var eventsFromHost = responseResult.a;
			return A2(
				$author$project$Frontend$Main$batchUpdates,
				A2(
					$elm$core$List$map,
					$author$project$Frontend$Main$updateFromHostEvent(messageToHost),
					eventsFromHost),
				stateBefore);
		}
	});
var $author$project$Frontend$RunBot$LeavePlaySessionImplication = 0;
var $author$project$Frontend$RunBot$navigatingBackImplication = function (stateBefore) {
	var _v0 = stateBefore.bU;
	if (_v0.$ === 3) {
		var playSession = _v0.a;
		var _v1 = playSession.lC;
		if (_v1.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v2 = _v1.a;
			var lastStatus = _v2.b;
			var _v3 = lastStatus.cF;
			switch (_v3.$) {
				case 2:
					return $elm$core$Maybe$Nothing;
				case 1:
					return $elm$core$Maybe$Just(0);
				default:
					return $elm$core$Maybe$Just(0);
			}
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Frontend$Main$updateNavigateBack = F2(
	function (confirmedImplication, stateBefore) {
		var _v0 = stateBefore.q;
		if (_v0.$ === 1) {
			return _Utils_Tuple2(stateBefore, $elm$core$Platform$Cmd$none);
		} else {
			if (!_v0.a.$) {
				var runBotBefore = _v0.a.a;
				var continueNavigatingBack = function () {
					var state = function () {
						var _v2 = runBotBefore.hp;
						if (_v2.b) {
							var nextStage = _v2.a;
							var remainingStack = _v2.b;
							return _Utils_update(
								stateBefore,
								{
									q: $elm$core$Maybe$Just(
										$author$project$Frontend$Main$RunBotBranch(
											{bU: nextStage, hp: remainingStack}))
								});
						} else {
							return _Utils_update(
								stateBefore,
								{q: $elm$core$Maybe$Nothing});
						}
					}();
					return _Utils_Tuple2(
						_Utils_update(
							state,
							{bw: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$none);
				}();
				var _v1 = $author$project$Frontend$RunBot$navigatingBackImplication(runBotBefore);
				if (_v1.$ === 1) {
					return continueNavigatingBack;
				} else {
					var implication = _v1.a;
					return _Utils_eq(
						$elm$core$Maybe$Just(implication),
						confirmedImplication) ? continueNavigatingBack : _Utils_Tuple2(
						_Utils_update(
							stateBefore,
							{
								bw: $elm$core$Maybe$Just(implication)
							}),
						$elm$core$Platform$Cmd$none);
				}
			} else {
				var _v3 = _Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil);
				var navigationBranch = _v3.a;
				var messagesToHost = _v3.b;
				return _Utils_Tuple2(
					_Utils_update(
						stateBefore,
						{q: navigationBranch}),
					$elm$core$Platform$Cmd$batch(
						A2($elm$core$List$map, $author$project$Frontend$Main$sendMessageToHostCmd, messagesToHost)));
			}
		}
	});
var $author$project$Frontend$Main$UserInputCancelNavigateBackEvent = {$: 3};
var $author$project$Frontend$Main$UserInputForgetMessageToHostError = function (a) {
	return {$: 4, a: a};
};
var $author$project$Frontend$Main$UserInputNavigateBackEvent = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 6, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Right = 2;
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX(2);
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 5, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Top = 0;
var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY(0);
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 12, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 1, a: a};
};
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$transparency = $mdgriffith$elm_ui$Internal$Flag$flag(0);
var $mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			$elm$core$Basics$min,
			1.0,
			A2($elm$core$Basics$max, 0.0, o)));
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + $mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $author$project$Frontend$Visuals$backgroundColor = A3($mdgriffith$elm_ui$Element$rgb, 0.13, 0.13, 0.13);
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$classes = {jO: 'a', ds: 'atv', jR: 'ab', jS: 'cx', jT: 'cy', jU: 'acb', jV: 'accx', jW: 'accy', jX: 'acr', e1: 'al', e2: 'ar', jY: 'at', du: 'ah', dv: 'av', j$: 's', j6: 'bh', j7: 'b', j9: 'w7', kb: 'bd', kc: 'bdt', cn: 'bn', kd: 'bs', cr: 'cpe', kn: 'cp', ko: 'cpx', kp: 'cpy', aJ: 'c', cB: 'ctr', cC: 'cb', cD: 'ccx', aK: 'ccy', bS: 'cl', cE: 'cr', kA: 'ct', kD: 'cptr', kE: 'ctxt', k4: 'fcs', ge: 'focus-within', k6: 'fs', k8: 'g', dY: 'hbh', d$: 'hc', gu: 'he', d0: 'hf', gv: 'hfp', lg: 'hv', lk: 'ic', lm: 'fr', cQ: 'lbl', lq: 'iml', lr: 'imlf', ls: 'imlp', lt: 'implw', lu: 'it', lz: 'i', lF: 'lnk', bx: 'nb', hs: 'notxt', l_: 'ol', l$: 'or', a9: 'oq', l7: 'oh', hM: 'pg', l8: 'p', mc: 'ppe', ms: 'ui', mu: 'r', mw: 'sb', mx: 'sbx', my: 'sby', mz: 'sbt', mK: 'e', mL: 'cap', mM: 'sev', mZ: 'sk', aD: 't', m9: 'tc', na: 'w8', nb: 'w2', nc: 'w9', nd: 'tj', dk: 'tja', ne: 'tl', nf: 'w3', ng: 'w5', nh: 'w4', ni: 'tr', nj: 'w6', nk: 'w1', nl: 'tun', jn: 'ts', bg: 'clr', nu: 'u', eH: 'wc', jG: 'we', eI: 'wf', jH: 'wfp', eL: 'wrp'};
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.j9);
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Button = {$: 8};
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsEl = 2;
var $mdgriffith$elm_ui$Internal$Model$asEl = 2;
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.j$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.aJ);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.j$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.k8);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.j$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.hM);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.j$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.l8);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.j$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.mu);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.j$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.mK);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 1:
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 2:
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 3:
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 4:
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 0:
				return existing;
			case 1:
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 2:
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 0:
				return existing;
			case 1:
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 2:
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = 4;
var $mdgriffith$elm_ui$Internal$Model$asParagraph = 4;
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$html$Html$div = _VirtualDom_node('div');
var $elm$core$Set$Set_elm_builtin = $elm$core$Basics$identity;
var $elm$core$Set$empty = $elm$core$Dict$empty;
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 0:
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 1:
			return 'auto';
		case 2:
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 3:
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 13:
			var name = style.a;
			return name;
		case 12:
			var name = style.a;
			var o = style.b;
			return name;
		case 0:
			var _class = style.a;
			return _class;
		case 1:
			var name = style.a;
			return name;
		case 2:
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 3:
			var _class = style.a;
			return _class;
		case 4:
			var _class = style.a;
			return _class;
		case 5:
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 7:
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 6:
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 8:
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.mv)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.kv)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.mN.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.mN.b)))))));
		case 9:
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.mu) + ('-' + ($elm$core$String$fromInt(pos.kt) + ('-' + ($elm$core$String$fromInt(pos.u) + ('-' + $elm$core$String$fromInt(pos._)))))));
		case 11:
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector) {
					case 0:
						return 'fs';
					case 1:
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0;
		return A3($elm$core$Dict$insert, key, 0, dict);
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0;
		return A2($elm$core$Dict$member, key, dict);
	});
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $elm$core$String$fromFloat = _String_fromNumber;
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.gN ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.aA.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.aA.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.bk) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.iO) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.af))
				])));
};
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ge) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.ka),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.j4),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										bk: shadow.bk,
										af: shadow.af,
										gN: false,
										aA: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.aA)),
										iO: shadow.iO
									}));
						},
						focus.mH),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$) + ':focus .focusable, ') + (($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$) + '.focusable:focus, ') + ('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$) + ' .focusable-thumb'))),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.ka),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.j4),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										bk: shadow.bk,
										af: shadow.af,
										gN: false,
										aA: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.aA)),
										iO: shadow.iO
									}));
						},
						focus.mH),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlJson(value));
	});
var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 6, a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = 3;
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = 2;
var $mdgriffith$elm_ui$Internal$Style$Self = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$Bottom = 1;
var $mdgriffith$elm_ui$Internal$Style$CenterX = 4;
var $mdgriffith$elm_ui$Internal$Style$CenterY = 5;
var $mdgriffith$elm_ui$Internal$Style$Top = 0;
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[0, 1, 2, 3, 4, 5]);
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc) {
		case 0:
			var _v1 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.kA);
		case 1:
			var _v2 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cC);
		case 2:
			var _v3 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cE);
		case 3:
			var _v4 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bS);
		case 4:
			var _v5 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cD);
		default:
			var _v6 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.aK);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc) {
		case 0:
			var _v1 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jY);
		case 1:
			var _v2 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jR);
		case 2:
			var _v3 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.e2);
		case 3:
			var _v4 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.e1);
		case 4:
			var _v5 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jS);
		default:
			var _v6 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jT);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(alignment),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(alignment),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dY),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j6),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mz),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.aD),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d0),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eI),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d$),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d0),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eI),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jH),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eH),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment) {
				case 0:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 1:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 2:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 3:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 4:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(alignment),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = 0;
var $mdgriffith$elm_ui$Internal$Style$Behind = 5;
var $mdgriffith$elm_ui$Internal$Style$Below = 1;
var $mdgriffith$elm_ui$Internal$Style$OnLeft = 3;
var $mdgriffith$elm_ui$Internal$Style$OnRight = 2;
var $mdgriffith$elm_ui$Internal$Style$Within = 4;
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = 0;
	var _v0 = function () {
		switch (loc) {
			case 0:
				return 0;
			case 1:
				return 0;
			case 2:
				return 0;
			case 3:
				return 0;
			case 4:
				return 0;
			default:
				return 0;
		}
	}();
	return _List_fromArray(
		[0, 1, 2, 3, 4, 5]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mK),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lk))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d0),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-height', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eI),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ms),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d0)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d0),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lm),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bx),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bx),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mK),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc) {
							case 0:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jO),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d0),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eI),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 1:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j7),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d0),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 2:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.l$),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 3:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.l_),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 4:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lm),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j6),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eL),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hs),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.kD),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.kE),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mc),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cr),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bg),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.a9),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.lg, $mdgriffith$elm_ui$Internal$Style$classes.bg)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.lg, $mdgriffith$elm_ui$Internal$Style$classes.a9)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.k4, $mdgriffith$elm_ui$Internal$Style$classes.bg)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.k4, $mdgriffith$elm_ui$Internal$Style$classes.a9)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.ds, $mdgriffith$elm_ui$Internal$Style$classes.bg)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.ds, $mdgriffith$elm_ui$Internal$Style$classes.a9)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jn),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mw),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mx),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mu),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.my),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.aJ),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mK),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.kn),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ko),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.kp),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eH),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cn),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.kb),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.kc),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.kd),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.aD),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lu),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'inherit')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mK),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mu),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jG),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lF),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d0),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gv),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eI),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cB),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.jX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.jV,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jS),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.jV,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jS),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.jV,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jT),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.jV + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.jX + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.jV)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 1:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 2:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 3:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 4:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mM),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cQ),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'baseline')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.aJ),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0px'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', 'min-content'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gu),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d0),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eI),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jH),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eH),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.jU,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.jW,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jT),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.jW,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jT),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.jW,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jT),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.jW + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.jU + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.jW)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 1:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 2:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 3:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 4:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cB),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mM),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.k8),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 1:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 2:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 3:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 4:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hM),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$ + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.j$ + ($mdgriffith$elm_ui$Internal$Style$selfName(3) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.j$))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.j$ + ($mdgriffith$elm_ui$Internal$Style$selfName(2) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.j$))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 1:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 2:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 3:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 4:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lq),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lt),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mK),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ls),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lr),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.l8),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-wrap', 'break-word'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dY),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j6),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.aD),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.l8),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::after',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::before',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mK),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jG),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lm),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j6),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jO),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j7),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.l$),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.l_),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.aD),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mu),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.aJ),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.k8),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 1:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 2:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 3:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 4:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nk),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nb),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nf),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nh),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ng),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nj),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j9),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.na),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nc),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lz),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mZ),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nu),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nu),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mZ)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nl),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nd),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dk),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.m9),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ni),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ne),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.j$ + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.j$ + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mu) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mu) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cB) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $mdgriffith$elm_ui$Internal$Style$Intermediate = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return {cx: closing, J: _List_Nil, aV: _List_Nil, ap: selector};
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 0:
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								aV: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.aV)
							});
					case 3:
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								J: A2(
									$elm$core$List$cons,
									{cx: '\n}', J: _List_Nil, aV: props, ap: '@supports (' + (prop + (':' + (value + (') {' + parent.ap))))},
									rendered.J)
							});
					case 5:
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								J: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.ap + (' + ' + selector), ''),
										adjRules),
									rendered.J)
							});
					case 1:
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								J: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.ap + (' > ' + child), ''),
										childRules),
									rendered.J)
							});
					case 2:
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								J: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.ap + (' ' + child), ''),
										childRules),
									rendered.J)
							});
					case 4:
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								J: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.ap, descriptor),
											''),
										descriptorRules),
									rendered.J)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								J: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.ap, ''),
										batched),
									rendered.J)
							});
				}
			});
		return A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender);
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.aV;
		if (!_v2.b) {
			return '';
		} else {
			return rule.ap + ('{' + (renderValues(rule.aV) + (rule.cx + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.J)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.lQ;
	switch (_v0) {
		case 0:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 1:
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 0:
			return 'serif';
		case 1:
			return 'sans-serif';
		case 2:
			return 'monospace';
		case 3:
			var name = font.a;
			return '\"' + (name + '\"');
		case 4:
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.c_;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 0:
			var name = _var.a;
			return name === 'smcp';
		case 1:
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 5) {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.jy);
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 1) {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo) {
				case 1:
					var _v2 = options.lg;
					switch (_v2) {
						case 0:
							return _List_Nil;
						case 2:
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 0:
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[
							selector + ('-fs:focus {' + (renderedProps + '\n}')),
							('.' + ($mdgriffith$elm_ui$Internal$Style$classes.j$ + (':focus ' + (selector + '-fs  {')))) + (renderedProps + '\n}'),
							(selector + '-fs:focus-within {') + (renderedProps + '\n}'),
							('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.j$) + (' .focusable-thumb' + (selector + '-fs {')))) + (renderedProps + '\n}')
						]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 0:
			var name = _var.a;
			return '\"' + (name + '\"');
		case 1:
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 5) {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.jy)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 0:
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 13:
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 12:
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 2:
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 1:
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 3:
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 4:
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 5:
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.mK;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.mu;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.eL + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.e2;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.l8;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.hM;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.e1;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.aJ;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.j$;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 7:
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromFloat(top) + ('px ' + ($elm$core$String$fromFloat(right) + ('px ' + ($elm$core$String$fromFloat(bottom) + ('px ' + ($elm$core$String$fromFloat(left) + 'px')))))))
						]));
			case 6:
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 8:
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 0:
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 1:
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 1) {
										if (_v2.b.$ === 1) {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 1) {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 2:
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 1) {
										if (_v7.b.$ === 1) {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 1) {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 3:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.mN.a);
				var ySpacing = toGridLength(template.mN.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.mv)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.kv)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.kv)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.mN.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.mN.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.kv)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.mv)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.kv)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.mN.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.mN.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 9:
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.mu) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position._) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.kt) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.u) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.mu) + (' / ' + ($elm$core$String$fromInt(position.mu + position._) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.kt) + (' / ' + ($elm$core$String$fromInt(position.kt + position.u) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.mu) + ('-' + ($elm$core$String$fromInt(position.kt) + ('-' + ($elm$core$String$fromInt(position.u) + ('-' + $elm$core$String$fromInt(position._)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 11:
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((!_v12.a.$) && (!_v12.b.$)) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.aD + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.aD)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.mL, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.k6, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.mL + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.mL))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.mL + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.aD + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.mL + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.aD)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {_: height / size, iO: size, jz: vertical};
	});
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.kj, adjustment.j5, adjustment.kN, adjustment.lH]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.kN,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.j5,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.kj,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		kj: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		gi: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted._)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.jz) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.iO) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 1) {
					if (face.$ === 5) {
						var _with = face.a;
						var _v2 = _with.jQ;
						if (_v2.$ === 1) {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.gi;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.kj;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 4) {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 1) {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 1) {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					db: _Utils_ap(
						rendered.db,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					cb: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 1) {
							return rendered.cb;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.cb);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{db: _List_Nil, cb: _List_Nil},
			stylesheet);
		var topLevel = _v0.cb;
		var rules = _v0.db;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.lQ;
		switch (_v0) {
			case 0:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 1:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.k4)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.k4)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$p = _VirtualDom_node('p');
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (!myFlag.$) {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 1) {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 0:
									return keyed;
								case 2:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 0:
									return unkeyed;
								case 2:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 0:
					return A2(createNode, 'div', attributes);
				case 1:
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.j$ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.mK))
									]))
							]));
			}
		}();
		switch (parentContext) {
			case 0:
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.j$, $mdgriffith$elm_ui$Internal$Style$classes.mK, $mdgriffith$elm_ui$Internal$Style$classes.cB, $mdgriffith$elm_ui$Internal$Style$classes.aK, $mdgriffith$elm_ui$Internal$Style$classes.jX])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.j$, $mdgriffith$elm_ui$Internal$Style$classes.mK, $mdgriffith$elm_ui$Internal$Style$classes.cB, $mdgriffith$elm_ui$Internal$Style$classes.aK, $mdgriffith$elm_ui$Internal$Style$classes.jV])))
						]),
					_List_fromArray(
						[html])) : html));
			case 1:
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.j$, $mdgriffith$elm_ui$Internal$Style$classes.mK, $mdgriffith$elm_ui$Internal$Style$classes.cB, $mdgriffith$elm_ui$Internal$Style$classes.jW])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.j$, $mdgriffith$elm_ui$Internal$Style$classes.mK, $mdgriffith$elm_ui$Internal$Style$classes.cB, $mdgriffith$elm_ui$Internal$Style$classes.jU])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.j$ + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.aD + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.eH + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.d$)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.j$ + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.aD + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.eI + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.d0)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 0:
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 1:
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.lh, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.m0 : _Utils_ap(styled.m0, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.lh, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.m0 : _Utils_ap(styled.m0, existingStyles));
					case 2:
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 0:
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 1:
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.lh, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.m0 : _Utils_ap(styled.m0, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.lh, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.m0 : _Utils_ap(styled.m0, existingStyles));
					case 2:
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 1) {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.m0 : _Utils_ap(rendered.m0, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.a0,
						rendered.a8,
						rendered.cl,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.cv)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						lh: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.a0,
							rendered.a8,
							rendered.cl,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.cv))),
						m0: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.m0 : _Utils_ap(rendered.m0, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.a0,
						rendered.a8,
						rendered.cl,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.cv)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						lh: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.a0,
							rendered.a8,
							rendered.cl,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.cv))),
						m0: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 3, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 10, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (!myFlag.$) {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location) {
							case 0:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.bx, $mdgriffith$elm_ui$Internal$Style$classes.mK, $mdgriffith$elm_ui$Internal$Style$classes.jO]));
							case 1:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.bx, $mdgriffith$elm_ui$Internal$Style$classes.mK, $mdgriffith$elm_ui$Internal$Style$classes.j7]));
							case 2:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.bx, $mdgriffith$elm_ui$Internal$Style$classes.mK, $mdgriffith$elm_ui$Internal$Style$classes.l$]));
							case 3:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.bx, $mdgriffith$elm_ui$Internal$Style$classes.mK, $mdgriffith$elm_ui$Internal$Style$classes.l_]));
							case 4:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.bx, $mdgriffith$elm_ui$Internal$Style$classes.mK, $mdgriffith$elm_ui$Internal$Style$classes.lm]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.bx, $mdgriffith$elm_ui$Internal$Style$classes.mK, $mdgriffith$elm_ui$Internal$Style$classes.j6]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 3:
							return $elm$virtual_dom$VirtualDom$text('');
						case 2:
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 0:
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.lh, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 0:
				if (location === 5) {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 1:
				var existingBehind = existing.a;
				if (location === 5) {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 2:
				var existingInFront = existing.a;
				if (location === 5) {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location === 5) {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 0:
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 1:
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Style$classes.du + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.e1);
		case 2:
			return $mdgriffith$elm_ui$Internal$Style$classes.du + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.e2);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.du + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.jS);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Style$classes.dv + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.jY);
		case 2:
			return $mdgriffith$elm_ui$Internal$Style$classes.dv + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.jR);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.dv + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.jT);
	}
};
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 2, a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 0:
				switch (component.$) {
					case 0:
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 1:
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 2:
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 3:
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 4:
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 1:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 0:
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 1:
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 2:
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 3:
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 4:
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 0:
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 1:
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 2:
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 3:
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 4:
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 0:
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.gu + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 1:
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.d$,
				_List_Nil);
		case 2:
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.d0,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.gv + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.j$ + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.aJ + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 3:
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px !important');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 0:
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.jG + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 1:
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.eH,
				_List_Nil);
		case 2:
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.eI,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.jH + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.j$ + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.mu + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 3:
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 3) {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 2:
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 7:
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 1) {
					return {
						cl: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						cv: children,
						a0: has,
						a8: node,
						m0: styles
					};
				} else {
					var _class = _v1.a;
					return {
						cl: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						cv: children,
						a0: has,
						a8: node,
						m0: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 0:
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 3:
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 1:
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 4:
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 10:
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 7:
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 0:
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.jG + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 1:
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.eH),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 2:
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.eI),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.jH + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.j$ + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.mu + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 8:
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 0:
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.gu + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 1:
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.d$ + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 2:
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.d0 + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.gv + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.j$ + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.aJ + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 2:
						var description = attribute.a;
						switch (description.$) {
							case 0:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 1:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 2:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 3:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 4:
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 9:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 8:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 5:
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 6:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 9:
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 3:
									return styles;
								case 2:
									var str = elem.a;
									return styles;
								case 0:
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.m0);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 6:
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x) {
									case 1:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 2:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y) {
									case 1:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 2:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 0};
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 4) && (attr.b.$ === 11)) && (!attr.b.a)) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 8, a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 0, a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 2, a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $mdgriffith$elm_ui$Element$Input$onKeyLookup = function (lookup) {
	var decode = function (code) {
		var _v0 = lookup(code);
		if (_v0.$ === 1) {
			return $elm$json$Json$Decode$fail('No key matched');
		} else {
			var msg = _v0.a;
			return $elm$json$Json$Decode$succeed(msg);
		}
	};
	var isKey = A2(
		$elm$json$Json$Decode$andThen,
		decode,
		A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2(
			$elm$html$Html$Events$preventDefaultOn,
			'keydown',
			A2(
				$elm$json$Json$Decode$map,
				function (fired) {
					return _Utils_Tuple2(fired, true);
				},
				isKey)));
};
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.kD);
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 1};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $mdgriffith$elm_ui$Element$Input$space = ' ';
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 7, a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _v0) {
		var onPress = _v0.by;
		var label = _v0.lA;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cD + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.aK + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.mz + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.hs)))))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$pointer,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											$elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 1) {
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$Attr(
														$elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														$elm$core$List$cons,
														$mdgriffith$elm_ui$Element$Input$onKeyLookup(
															function (code) {
																return _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$enter) ? $elm$core$Maybe$Just(msg) : (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space) ? $elm$core$Maybe$Just(msg) : $elm$core$Maybe$Nothing);
															}),
														attrs));
											}
										}()))))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 4, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $author$project$Frontend$Visuals$defaultFontSize = 14;
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $mdgriffith$elm_ui$Internal$Model$Hover = 1;
var $mdgriffith$elm_ui$Internal$Model$PseudoSelector = F2(
	function (a, b) {
		return {$: 11, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$hover = $mdgriffith$elm_ui$Internal$Flag$flag(33);
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 9, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 10, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 3};
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 1:
				var styled = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						lh: F2(
							function (add, context) {
								return A2(
									$elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.lh, add, context));
							}),
						m0: styled.m0
					});
			case 0:
				var html = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						$elm$core$Basics$composeL,
						$elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 2:
				var str = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return $mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 0:
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 2:
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 6:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 5:
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 7:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 8:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 3:
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 4:
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 9:
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 1:
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$removeNever = function (style) {
	return A2($mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle, $elm$core$Basics$never, style);
};
var $mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper = F2(
	function (attr, _v0) {
		var styles = _v0.a;
		var trans = _v0.b;
		var _v1 = $mdgriffith$elm_ui$Internal$Model$removeNever(attr);
		switch (_v1.$) {
			case 4:
				var style = _v1.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, style, styles),
					trans);
			case 10:
				var flag = _v1.a;
				var component = _v1.b;
				return _Utils_Tuple2(
					styles,
					A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, trans, component));
			default:
				return _Utils_Tuple2(styles, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$unwrapDecorations = function (attrs) {
	var _v0 = A3(
		$elm$core$List$foldl,
		$mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper,
		_Utils_Tuple2(_List_Nil, $mdgriffith$elm_ui$Internal$Model$Untransformed),
		attrs);
	var styles = _v0.a;
	var transform = _v0.b;
	return A2(
		$elm$core$List$cons,
		$mdgriffith$elm_ui$Internal$Model$Transform(transform),
		styles);
};
var $mdgriffith$elm_ui$Element$mouseOver = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$hover,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			1,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 7, a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		if (_Utils_eq(x, y)) {
			var f = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + $elm$core$String$fromInt(x),
					f,
					f,
					f,
					f));
		} else {
			var yFloat = y;
			var xFloat = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
					yFloat,
					xFloat,
					yFloat,
					xFloat));
		}
	});
var $author$project$Frontend$Visuals$primaryButtonBackgroundColor = {
	kM: A3($mdgriffith$elm_ui$Element$rgb, 0.055, 0.388, 0.612),
	lV: A3($mdgriffith$elm_ui$Element$rgb, 0.067, 0.467, 0.733)
};
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $author$project$Frontend$Visuals$buttonElement = F2(
	function (attributes, buttonConfig) {
		var colors = $author$project$Frontend$Visuals$primaryButtonBackgroundColor;
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color(colors.kM),
						A2($mdgriffith$elm_ui$Element$paddingXY, $author$project$Frontend$Visuals$defaultFontSize, (($author$project$Frontend$Visuals$defaultFontSize / 2) | 0) - 1),
						$mdgriffith$elm_ui$Element$Border$rounded(2)
					]),
				_Utils_ap(
					attributes,
					buttonConfig.bo ? _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alpha(0.5),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$disabled(true)),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'cursor', 'default'))
						]) : _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(colors.kM),
							$mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color(colors.lV)
								]))
						]))),
			{lA: buttonConfig.lA, by: buttonConfig.by});
	});
var $author$project$Frontend$Main$RunBotEvent = function (a) {
	return {$: 10, a: a};
};
var $lattyware$elm_fontawesome$FontAwesome$IconDef = F4(
	function (prefix, name, size, paths) {
		return {c_: name, md: paths, em: prefix, iO: size};
	});
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$arrowLeft = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'arrow-left',
	_Utils_Tuple2(448, 512),
	_Utils_Tuple2('M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Internal$Icon = $elm$core$Basics$identity;
var $lattyware$elm_fontawesome$FontAwesome$present = function (icon) {
	return {cl: _List_Nil, aa: icon, d1: $elm$core$Maybe$Nothing, eh: $elm$core$Maybe$Nothing, eq: 'img', jg: $elm$core$Maybe$Nothing, dp: _List_Nil};
};
var $lattyware$elm_fontawesome$FontAwesome$Solid$arrowLeft = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$arrowLeft);
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');
var $elm$svg$Svg$Attributes$id = _VirtualDom_attribute('id');
var $elm$html$Html$Attributes$map = $elm$virtual_dom$VirtualDom$mapAttribute;
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $elm$svg$Svg$text = $elm$virtual_dom$VirtualDom$text;
var $elm$svg$Svg$title = $elm$svg$Svg$trustedNode('title');
var $lattyware$elm_fontawesome$FontAwesome$Internal$topLevelDimensions = function (_v1) {
	var icon = _v1.aa;
	var outer = _v1.eh;
	return A2(
		$elm$core$Maybe$withDefault,
		icon.iO,
		A2($elm$core$Maybe$map, $lattyware$elm_fontawesome$FontAwesome$Internal$topLevelDimensionsInternal, outer));
};
var $lattyware$elm_fontawesome$FontAwesome$Internal$topLevelDimensionsInternal = function (_v0) {
	var icon = _v0.aa;
	var outer = _v0.eh;
	return A2(
		$elm$core$Maybe$withDefault,
		icon.iO,
		A2($elm$core$Maybe$map, $lattyware$elm_fontawesome$FontAwesome$Internal$topLevelDimensions, outer));
};
var $elm$svg$Svg$defs = $elm$svg$Svg$trustedNode('defs');
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var $lattyware$elm_fontawesome$FontAwesome$Svg$fill = _List_fromArray(
	[
		$elm$svg$Svg$Attributes$x('0'),
		$elm$svg$Svg$Attributes$y('0'),
		$elm$svg$Svg$Attributes$width('100%'),
		$elm$svg$Svg$Attributes$height('100%')
	]);
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$g = $elm$svg$Svg$trustedNode('g');
var $elm$svg$Svg$mask = $elm$svg$Svg$trustedNode('mask');
var $elm$svg$Svg$Attributes$mask = _VirtualDom_attribute('mask');
var $elm$svg$Svg$Attributes$maskContentUnits = _VirtualDom_attribute('maskContentUnits');
var $elm$svg$Svg$Attributes$maskUnits = _VirtualDom_attribute('maskUnits');
var $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$add = F2(
	function (transform, combined) {
		switch (transform.$) {
			case 0:
				var by = transform.a;
				return _Utils_update(
					combined,
					{iO: combined.iO + by});
			case 1:
				var axis = transform.a;
				var by = transform.b;
				var _v1 = function () {
					if (!axis) {
						return _Utils_Tuple2(0, by);
					} else {
						return _Utils_Tuple2(by, 0);
					}
				}();
				var x = _v1.a;
				var y = _v1.b;
				return _Utils_update(
					combined,
					{nB: combined.nB + x, nC: combined.nC + y});
			case 2:
				var rotation = transform.a;
				return _Utils_update(
					combined,
					{mt: combined.mt + rotation});
			default:
				var axis = transform.a;
				if (!axis) {
					return _Utils_update(
						combined,
						{k3: !combined.k3});
				} else {
					return _Utils_update(
						combined,
						{k2: !combined.k2});
				}
		}
	});
var $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$baseSize = 16;
var $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$meaninglessTransform = {k2: false, k3: false, mt: 0, iO: $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$baseSize, nB: 0, nC: 0};
var $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$combine = function (transforms) {
	return A3($elm$core$List$foldl, $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$add, $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$meaninglessTransform, transforms);
};
var $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$meaningfulTransform = function (transforms) {
	var combined = $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$combine(transforms);
	return _Utils_eq(combined, $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$meaninglessTransform) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(combined);
};
var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode('rect');
var $elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');
var $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$transformForSvg = F3(
	function (containerWidth, iconWidth, transform) {
		var path = 'translate(' + ($elm$core$String$fromFloat((iconWidth / 2) * (-1)) + ' -256)');
		var outer = 'translate(' + ($elm$core$String$fromFloat(containerWidth / 2) + ' 256)');
		var innerTranslate = 'translate(' + ($elm$core$String$fromFloat(transform.nB * 32) + (',' + ($elm$core$String$fromFloat(transform.nC * 32) + ') ')));
		var innerRotate = 'rotate(' + ($elm$core$String$fromFloat(transform.mt) + ' 0 0)');
		var flipY = transform.k3 ? (-1) : 1;
		var scaleY = (transform.iO / $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$baseSize) * flipY;
		var flipX = transform.k2 ? (-1) : 1;
		var scaleX = (transform.iO / $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$baseSize) * flipX;
		var innerScale = 'scale(' + ($elm$core$String$fromFloat(scaleX) + (', ' + ($elm$core$String$fromFloat(scaleY) + ') ')));
		return {
			gM: $elm$svg$Svg$Attributes$transform(
				_Utils_ap(
					innerTranslate,
					_Utils_ap(innerScale, innerRotate))),
			eh: $elm$svg$Svg$Attributes$transform(outer),
			K: $elm$svg$Svg$Attributes$transform(path)
		};
	});
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $lattyware$elm_fontawesome$FontAwesome$Svg$viewPath = F2(
	function (attrs, d) {
		return A2(
			$elm$svg$Svg$path,
			A2(
				$elm$core$List$cons,
				$elm$svg$Svg$Attributes$d(d),
				attrs),
			_List_Nil);
	});
var $lattyware$elm_fontawesome$FontAwesome$Svg$viewPaths = F2(
	function (attrs, _v0) {
		var paths = _v0.md;
		if (paths.b.$ === 1) {
			var only = paths.a;
			var _v2 = paths.b;
			return A2($lattyware$elm_fontawesome$FontAwesome$Svg$viewPath, attrs, only);
		} else {
			var secondary = paths.a;
			var primary = paths.b.a;
			return A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('fa-group')
					]),
				_List_fromArray(
					[
						A2(
						$lattyware$elm_fontawesome$FontAwesome$Svg$viewPath,
						A2(
							$elm$core$List$cons,
							$elm$svg$Svg$Attributes$class('fa-secondary'),
							attrs),
						secondary),
						A2(
						$lattyware$elm_fontawesome$FontAwesome$Svg$viewPath,
						A2(
							$elm$core$List$cons,
							$elm$svg$Svg$Attributes$class('fa-primary'),
							attrs),
						primary)
					]));
		}
	});
var $lattyware$elm_fontawesome$FontAwesome$Svg$viewWithTransform = F3(
	function (color, _v0, icon) {
		var outer = _v0.eh;
		var inner = _v0.gM;
		var path = _v0.K;
		return A2(
			$elm$svg$Svg$g,
			_List_fromArray(
				[outer]),
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[inner]),
					_List_fromArray(
						[
							A2(
							$lattyware$elm_fontawesome$FontAwesome$Svg$viewPaths,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$fill(color),
									path
								]),
							icon)
						]))
				]));
	});
var $lattyware$elm_fontawesome$FontAwesome$Svg$viewInColor = F2(
	function (color, fullIcon) {
		var icon = fullIcon.aa;
		var transforms = fullIcon.dp;
		var id = fullIcon.d1;
		var outer = fullIcon.eh;
		var combinedTransforms = $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$meaningfulTransform(transforms);
		var _v0 = icon.iO;
		var width = _v0.a;
		var _v1 = $lattyware$elm_fontawesome$FontAwesome$Internal$topLevelDimensions(fullIcon);
		var topLevelWidth = _v1.a;
		if (!combinedTransforms.$) {
			var meaningfulTransform = combinedTransforms.a;
			var svgTransform = A3($lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$transformForSvg, topLevelWidth, width, meaningfulTransform);
			if (!outer.$) {
				var outerIcon = outer.a;
				return A4($lattyware$elm_fontawesome$FontAwesome$Svg$viewMaskedWithTransform, color, svgTransform, icon, outerIcon);
			} else {
				return A3($lattyware$elm_fontawesome$FontAwesome$Svg$viewWithTransform, color, svgTransform, icon);
			}
		} else {
			return A2(
				$lattyware$elm_fontawesome$FontAwesome$Svg$viewPaths,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$fill(color)
					]),
				icon);
		}
	});
var $lattyware$elm_fontawesome$FontAwesome$Svg$viewMaskedWithTransform = F4(
	function (color, transforms, exclude, include) {
		var id = include.d1;
		var alwaysId = A2($elm$core$Maybe$withDefault, '', id);
		var clipId = 'clip-' + alwaysId;
		var maskId = 'mask-' + alwaysId;
		var maskTag = A2(
			$elm$svg$Svg$mask,
			A2(
				$elm$core$List$cons,
				$elm$svg$Svg$Attributes$id(maskId),
				A2(
					$elm$core$List$cons,
					$elm$svg$Svg$Attributes$maskUnits('userSpaceOnUse'),
					A2(
						$elm$core$List$cons,
						$elm$svg$Svg$Attributes$maskContentUnits('userSpaceOnUse'),
						$lattyware$elm_fontawesome$FontAwesome$Svg$fill))),
			_List_fromArray(
				[
					A2($lattyware$elm_fontawesome$FontAwesome$Svg$viewInColor, 'white', include),
					A3($lattyware$elm_fontawesome$FontAwesome$Svg$viewWithTransform, 'black', transforms, exclude)
				]));
		var defs = A2(
			$elm$svg$Svg$defs,
			_List_Nil,
			_List_fromArray(
				[maskTag]));
		var rect = A2(
			$elm$svg$Svg$rect,
			A2(
				$elm$core$List$cons,
				$elm$svg$Svg$Attributes$fill(color),
				A2(
					$elm$core$List$cons,
					$elm$svg$Svg$Attributes$mask('url(#' + (maskId + ')')),
					$lattyware$elm_fontawesome$FontAwesome$Svg$fill)),
			_List_Nil);
		return A2(
			$elm$svg$Svg$g,
			_List_Nil,
			_List_fromArray(
				[defs, rect]));
	});
var $lattyware$elm_fontawesome$FontAwesome$Svg$view = $lattyware$elm_fontawesome$FontAwesome$Svg$viewInColor('currentColor');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $lattyware$elm_fontawesome$FontAwesome$internalView = F2(
	function (fullIcon, extraAttributes) {
		var icon = fullIcon.aa;
		var transforms = fullIcon.dp;
		var role = fullIcon.eq;
		var id = fullIcon.d1;
		var title = fullIcon.jg;
		var outer = fullIcon.eh;
		var attributes = fullIcon.cl;
		var contents = $lattyware$elm_fontawesome$FontAwesome$Svg$view(fullIcon);
		var _v0 = function () {
			if (!title.$) {
				var givenTitle = title.a;
				var titleId = A2($elm$core$Maybe$withDefault, '', id) + '-title';
				return _Utils_Tuple2(
					A2($elm$html$Html$Attributes$attribute, 'aria-labelledby', titleId),
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$title,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$id(titleId)
								]),
							_List_fromArray(
								[
									$elm$svg$Svg$text(givenTitle)
								])),
							contents
						]));
			} else {
				return _Utils_Tuple2(
					A2($elm$html$Html$Attributes$attribute, 'aria-hidden', 'true'),
					_List_fromArray(
						[contents]));
			}
		}();
		var semantics = _v0.a;
		var potentiallyTitledContents = _v0.b;
		var _v2 = $lattyware$elm_fontawesome$FontAwesome$Internal$topLevelDimensions(fullIcon);
		var width = _v2.a;
		var height = _v2.b;
		var aspectRatio = $elm$core$Basics$ceiling((width / height) * 16);
		var classes = _List_fromArray(
			[
				'svg-inline--fa',
				'fa-' + icon.c_,
				'fa-w-' + $elm$core$String$fromInt(aspectRatio)
			]);
		return A2(
			$elm$svg$Svg$svg,
			$elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						[
							A2($elm$html$Html$Attributes$attribute, 'role', role),
							A2($elm$html$Html$Attributes$attribute, 'xmlns', 'http://www.w3.org/2000/svg'),
							$elm$svg$Svg$Attributes$viewBox(
							'0 0 ' + ($elm$core$String$fromInt(width) + (' ' + $elm$core$String$fromInt(height)))),
							semantics
						]),
						A2($elm$core$List$map, $elm$svg$Svg$Attributes$class, classes),
						A2(
						$elm$core$List$map,
						$elm$html$Html$Attributes$map($elm$core$Basics$never),
						attributes),
						extraAttributes
					])),
			potentiallyTitledContents);
	});
var $lattyware$elm_fontawesome$FontAwesome$view = function (presentation) {
	return A2($lattyware$elm_fontawesome$FontAwesome$internalView, presentation, _List_Nil);
};
var $author$project$Frontend$Main$buttonNavigateBack = A2(
	$mdgriffith$elm_ui$Element$el,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Events$onClick(
			$author$project$Frontend$Main$SequenceEvent(
				_List_fromArray(
					[
						$author$project$Frontend$Main$RunBotEvent($author$project$Frontend$RunBot$UserInputPauseBotEvent),
						$author$project$Frontend$Main$UserInputNavigateBackEvent($elm$core$Maybe$Nothing)
					]))),
			$mdgriffith$elm_ui$Element$Background$color($author$project$Frontend$Visuals$primaryButtonBackgroundColor.kM),
			$mdgriffith$elm_ui$Element$mouseOver(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color($author$project$Frontend$Visuals$primaryButtonBackgroundColor.lV)
				])),
			A2($mdgriffith$elm_ui$Element$paddingXY, $author$project$Frontend$Visuals$defaultFontSize, ($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
			$mdgriffith$elm_ui$Element$pointer
		]),
	$mdgriffith$elm_ui$Element$html(
		$lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Solid$arrowLeft)));
var $mdgriffith$elm_ui$Internal$Model$CenterX = 1;
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX(1);
var $mdgriffith$elm_ui$Internal$Model$CenterY = 1;
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY(1);
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $mdgriffith$elm_ui$Internal$Model$AsColumn = 1;
var $mdgriffith$elm_ui$Internal$Model$asColumn = 1;
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.kA + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.bS)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $lattyware$elm_fontawesome$FontAwesome$Styles$css = A3(
	$elm$html$Html$node,
	'style',
	_List_Nil,
	_List_fromArray(
		[
			$elm$html$Html$text(':root, :host {  --fa-font-solid: normal 900 1em/1 \"Font Awesome 6 Solid\";  --fa-font-regular: normal 400 1em/1 \"Font Awesome 6 Regular\";  --fa-font-light: normal 300 1em/1 \"Font Awesome 6 Light\";  --fa-font-thin: normal 100 1em/1 \"Font Awesome 6 Thin\";  --fa-font-duotone: normal 900 1em/1 \"Font Awesome 6 Duotone\";  --fa-font-sharp-solid: normal 900 1em/1 \"Font Awesome 6 Sharp\";  --fa-font-sharp-regular: normal 400 1em/1 \"Font Awesome 6 Sharp\";  --fa-font-sharp-light: normal 300 1em/1 \"Font Awesome 6 Sharp\";  --fa-font-sharp-thin: normal 100 1em/1 \"Font Awesome 6 Sharp\";  --fa-font-brands: normal 400 1em/1 \"Font Awesome 6 Brands\";}svg:not(:root).svg-inline--fa, svg:not(:host).svg-inline--fa {  overflow: visible;  box-sizing: content-box;}.svg-inline--fa {  display: var(--fa-display, inline-block);  height: 1em;  overflow: visible;  vertical-align: -0.125em;}.svg-inline--fa.fa-2xs {  vertical-align: 0.1em;}.svg-inline--fa.fa-xs {  vertical-align: 0em;}.svg-inline--fa.fa-sm {  vertical-align: -0.0714285705em;}.svg-inline--fa.fa-lg {  vertical-align: -0.2em;}.svg-inline--fa.fa-xl {  vertical-align: -0.25em;}.svg-inline--fa.fa-2xl {  vertical-align: -0.3125em;}.svg-inline--fa.fa-pull-left {  margin-right: var(--fa-pull-margin, 0.3em);  width: auto;}.svg-inline--fa.fa-pull-right {  margin-left: var(--fa-pull-margin, 0.3em);  width: auto;}.svg-inline--fa.fa-li {  width: var(--fa-li-width, 2em);  top: 0.25em;}.svg-inline--fa.fa-fw {  width: var(--fa-fw-width, 1.25em);}.fa-layers svg.svg-inline--fa {  bottom: 0;  left: 0;  margin: auto;  position: absolute;  right: 0;  top: 0;}.fa-layers-counter, .fa-layers-text {  display: inline-block;  position: absolute;  text-align: center;}.fa-layers {  display: inline-block;  height: 1em;  position: relative;  text-align: center;  vertical-align: -0.125em;  width: 1em;}.fa-layers svg.svg-inline--fa {  -webkit-transform-origin: center center;          transform-origin: center center;}.fa-layers-text {  left: 50%;  top: 50%;  -webkit-transform: translate(-50%, -50%);          transform: translate(-50%, -50%);  -webkit-transform-origin: center center;          transform-origin: center center;}.fa-layers-counter {  background-color: var(--fa-counter-background-color, #ff253a);  border-radius: var(--fa-counter-border-radius, 1em);  box-sizing: border-box;  color: var(--fa-inverse, #fff);  line-height: var(--fa-counter-line-height, 1);  max-width: var(--fa-counter-max-width, 5em);  min-width: var(--fa-counter-min-width, 1.5em);  overflow: hidden;  padding: var(--fa-counter-padding, 0.25em 0.5em);  right: var(--fa-right, 0);  text-overflow: ellipsis;  top: var(--fa-top, 0);  -webkit-transform: scale(var(--fa-counter-scale, 0.25));          transform: scale(var(--fa-counter-scale, 0.25));  -webkit-transform-origin: top right;          transform-origin: top right;}.fa-layers-bottom-right {  bottom: var(--fa-bottom, 0);  right: var(--fa-right, 0);  top: auto;  -webkit-transform: scale(var(--fa-layers-scale, 0.25));          transform: scale(var(--fa-layers-scale, 0.25));  -webkit-transform-origin: bottom right;          transform-origin: bottom right;}.fa-layers-bottom-left {  bottom: var(--fa-bottom, 0);  left: var(--fa-left, 0);  right: auto;  top: auto;  -webkit-transform: scale(var(--fa-layers-scale, 0.25));          transform: scale(var(--fa-layers-scale, 0.25));  -webkit-transform-origin: bottom left;          transform-origin: bottom left;}.fa-layers-top-right {  top: var(--fa-top, 0);  right: var(--fa-right, 0);  -webkit-transform: scale(var(--fa-layers-scale, 0.25));          transform: scale(var(--fa-layers-scale, 0.25));  -webkit-transform-origin: top right;          transform-origin: top right;}.fa-layers-top-left {  left: var(--fa-left, 0);  right: auto;  top: var(--fa-top, 0);  -webkit-transform: scale(var(--fa-layers-scale, 0.25));          transform: scale(var(--fa-layers-scale, 0.25));  -webkit-transform-origin: top left;          transform-origin: top left;}.fa-1x {  font-size: 1em;}.fa-2x {  font-size: 2em;}.fa-3x {  font-size: 3em;}.fa-4x {  font-size: 4em;}.fa-5x {  font-size: 5em;}.fa-6x {  font-size: 6em;}.fa-7x {  font-size: 7em;}.fa-8x {  font-size: 8em;}.fa-9x {  font-size: 9em;}.fa-10x {  font-size: 10em;}.fa-2xs {  font-size: 0.625em;  line-height: 0.1em;  vertical-align: 0.225em;}.fa-xs {  font-size: 0.75em;  line-height: 0.0833333337em;  vertical-align: 0.125em;}.fa-sm {  font-size: 0.875em;  line-height: 0.0714285718em;  vertical-align: 0.0535714295em;}.fa-lg {  font-size: 1.25em;  line-height: 0.05em;  vertical-align: -0.075em;}.fa-xl {  font-size: 1.5em;  line-height: 0.0416666682em;  vertical-align: -0.125em;}.fa-2xl {  font-size: 2em;  line-height: 0.03125em;  vertical-align: -0.1875em;}.fa-fw {  text-align: center;  width: 1.25em;}.fa-ul {  list-style-type: none;  margin-left: var(--fa-li-margin, 2.5em);  padding-left: 0;}.fa-ul > li {  position: relative;}.fa-li {  left: calc(var(--fa-li-width, 2em) * -1);  position: absolute;  text-align: center;  width: var(--fa-li-width, 2em);  line-height: inherit;}.fa-border {  border-color: var(--fa-border-color, #eee);  border-radius: var(--fa-border-radius, 0.1em);  border-style: var(--fa-border-style, solid);  border-width: var(--fa-border-width, 0.08em);  padding: var(--fa-border-padding, 0.2em 0.25em 0.15em);}.fa-pull-left {  float: left;  margin-right: var(--fa-pull-margin, 0.3em);}.fa-pull-right {  float: right;  margin-left: var(--fa-pull-margin, 0.3em);}.fa-beat {  -webkit-animation-name: fa-beat;          animation-name: fa-beat;  -webkit-animation-delay: var(--fa-animation-delay, 0s);          animation-delay: var(--fa-animation-delay, 0s);  -webkit-animation-direction: var(--fa-animation-direction, normal);          animation-direction: var(--fa-animation-direction, normal);  -webkit-animation-duration: var(--fa-animation-duration, 1s);          animation-duration: var(--fa-animation-duration, 1s);  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);          animation-iteration-count: var(--fa-animation-iteration-count, infinite);  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);          animation-timing-function: var(--fa-animation-timing, ease-in-out);}.fa-bounce {  -webkit-animation-name: fa-bounce;          animation-name: fa-bounce;  -webkit-animation-delay: var(--fa-animation-delay, 0s);          animation-delay: var(--fa-animation-delay, 0s);  -webkit-animation-direction: var(--fa-animation-direction, normal);          animation-direction: var(--fa-animation-direction, normal);  -webkit-animation-duration: var(--fa-animation-duration, 1s);          animation-duration: var(--fa-animation-duration, 1s);  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);          animation-iteration-count: var(--fa-animation-iteration-count, infinite);  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));}.fa-fade {  -webkit-animation-name: fa-fade;          animation-name: fa-fade;  -webkit-animation-delay: var(--fa-animation-delay, 0s);          animation-delay: var(--fa-animation-delay, 0s);  -webkit-animation-direction: var(--fa-animation-direction, normal);          animation-direction: var(--fa-animation-direction, normal);  -webkit-animation-duration: var(--fa-animation-duration, 1s);          animation-duration: var(--fa-animation-duration, 1s);  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);          animation-iteration-count: var(--fa-animation-iteration-count, infinite);  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));}.fa-beat-fade {  -webkit-animation-name: fa-beat-fade;          animation-name: fa-beat-fade;  -webkit-animation-delay: var(--fa-animation-delay, 0s);          animation-delay: var(--fa-animation-delay, 0s);  -webkit-animation-direction: var(--fa-animation-direction, normal);          animation-direction: var(--fa-animation-direction, normal);  -webkit-animation-duration: var(--fa-animation-duration, 1s);          animation-duration: var(--fa-animation-duration, 1s);  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);          animation-iteration-count: var(--fa-animation-iteration-count, infinite);  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));}.fa-flip {  -webkit-animation-name: fa-flip;          animation-name: fa-flip;  -webkit-animation-delay: var(--fa-animation-delay, 0s);          animation-delay: var(--fa-animation-delay, 0s);  -webkit-animation-direction: var(--fa-animation-direction, normal);          animation-direction: var(--fa-animation-direction, normal);  -webkit-animation-duration: var(--fa-animation-duration, 1s);          animation-duration: var(--fa-animation-duration, 1s);  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);          animation-iteration-count: var(--fa-animation-iteration-count, infinite);  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);          animation-timing-function: var(--fa-animation-timing, ease-in-out);}.fa-shake {  -webkit-animation-name: fa-shake;          animation-name: fa-shake;  -webkit-animation-delay: var(--fa-animation-delay, 0s);          animation-delay: var(--fa-animation-delay, 0s);  -webkit-animation-direction: var(--fa-animation-direction, normal);          animation-direction: var(--fa-animation-direction, normal);  -webkit-animation-duration: var(--fa-animation-duration, 1s);          animation-duration: var(--fa-animation-duration, 1s);  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);          animation-iteration-count: var(--fa-animation-iteration-count, infinite);  -webkit-animation-timing-function: var(--fa-animation-timing, linear);          animation-timing-function: var(--fa-animation-timing, linear);}.fa-spin {  -webkit-animation-name: fa-spin;          animation-name: fa-spin;  -webkit-animation-delay: var(--fa-animation-delay, 0s);          animation-delay: var(--fa-animation-delay, 0s);  -webkit-animation-direction: var(--fa-animation-direction, normal);          animation-direction: var(--fa-animation-direction, normal);  -webkit-animation-duration: var(--fa-animation-duration, 2s);          animation-duration: var(--fa-animation-duration, 2s);  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);          animation-iteration-count: var(--fa-animation-iteration-count, infinite);  -webkit-animation-timing-function: var(--fa-animation-timing, linear);          animation-timing-function: var(--fa-animation-timing, linear);}.fa-spin-reverse {  --fa-animation-direction: reverse;}.fa-pulse,.fa-spin-pulse {  -webkit-animation-name: fa-spin;          animation-name: fa-spin;  -webkit-animation-direction: var(--fa-animation-direction, normal);          animation-direction: var(--fa-animation-direction, normal);  -webkit-animation-duration: var(--fa-animation-duration, 1s);          animation-duration: var(--fa-animation-duration, 1s);  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);          animation-iteration-count: var(--fa-animation-iteration-count, infinite);  -webkit-animation-timing-function: var(--fa-animation-timing, steps(8));          animation-timing-function: var(--fa-animation-timing, steps(8));}@media (prefers-reduced-motion: reduce) {  .fa-beat,.fa-bounce,.fa-fade,.fa-beat-fade,.fa-flip,.fa-pulse,.fa-shake,.fa-spin,.fa-spin-pulse {    -webkit-animation-delay: -1ms;            animation-delay: -1ms;    -webkit-animation-duration: 1ms;            animation-duration: 1ms;    -webkit-animation-iteration-count: 1;            animation-iteration-count: 1;    -webkit-transition-delay: 0s;            transition-delay: 0s;    -webkit-transition-duration: 0s;            transition-duration: 0s;  }}@-webkit-keyframes fa-beat {  0%, 90% {    -webkit-transform: scale(1);            transform: scale(1);  }  45% {    -webkit-transform: scale(var(--fa-beat-scale, 1.25));            transform: scale(var(--fa-beat-scale, 1.25));  }}@keyframes fa-beat {  0%, 90% {    -webkit-transform: scale(1);            transform: scale(1);  }  45% {    -webkit-transform: scale(var(--fa-beat-scale, 1.25));            transform: scale(var(--fa-beat-scale, 1.25));  }}@-webkit-keyframes fa-bounce {  0% {    -webkit-transform: scale(1, 1) translateY(0);            transform: scale(1, 1) translateY(0);  }  10% {    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);  }  30% {    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));  }  50% {    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);  }  57% {    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));  }  64% {    -webkit-transform: scale(1, 1) translateY(0);            transform: scale(1, 1) translateY(0);  }  100% {    -webkit-transform: scale(1, 1) translateY(0);            transform: scale(1, 1) translateY(0);  }}@keyframes fa-bounce {  0% {    -webkit-transform: scale(1, 1) translateY(0);            transform: scale(1, 1) translateY(0);  }  10% {    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);  }  30% {    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));  }  50% {    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);  }  57% {    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));  }  64% {    -webkit-transform: scale(1, 1) translateY(0);            transform: scale(1, 1) translateY(0);  }  100% {    -webkit-transform: scale(1, 1) translateY(0);            transform: scale(1, 1) translateY(0);  }}@-webkit-keyframes fa-fade {  50% {    opacity: var(--fa-fade-opacity, 0.4);  }}@keyframes fa-fade {  50% {    opacity: var(--fa-fade-opacity, 0.4);  }}@-webkit-keyframes fa-beat-fade {  0%, 100% {    opacity: var(--fa-beat-fade-opacity, 0.4);    -webkit-transform: scale(1);            transform: scale(1);  }  50% {    opacity: 1;    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));            transform: scale(var(--fa-beat-fade-scale, 1.125));  }}@keyframes fa-beat-fade {  0%, 100% {    opacity: var(--fa-beat-fade-opacity, 0.4);    -webkit-transform: scale(1);            transform: scale(1);  }  50% {    opacity: 1;    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));            transform: scale(var(--fa-beat-fade-scale, 1.125));  }}@-webkit-keyframes fa-flip {  50% {    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));  }}@keyframes fa-flip {  50% {    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));  }}@-webkit-keyframes fa-shake {  0% {    -webkit-transform: rotate(-15deg);            transform: rotate(-15deg);  }  4% {    -webkit-transform: rotate(15deg);            transform: rotate(15deg);  }  8%, 24% {    -webkit-transform: rotate(-18deg);            transform: rotate(-18deg);  }  12%, 28% {    -webkit-transform: rotate(18deg);            transform: rotate(18deg);  }  16% {    -webkit-transform: rotate(-22deg);            transform: rotate(-22deg);  }  20% {    -webkit-transform: rotate(22deg);            transform: rotate(22deg);  }  32% {    -webkit-transform: rotate(-12deg);            transform: rotate(-12deg);  }  36% {    -webkit-transform: rotate(12deg);            transform: rotate(12deg);  }  40%, 100% {    -webkit-transform: rotate(0deg);            transform: rotate(0deg);  }}@keyframes fa-shake {  0% {    -webkit-transform: rotate(-15deg);            transform: rotate(-15deg);  }  4% {    -webkit-transform: rotate(15deg);            transform: rotate(15deg);  }  8%, 24% {    -webkit-transform: rotate(-18deg);            transform: rotate(-18deg);  }  12%, 28% {    -webkit-transform: rotate(18deg);            transform: rotate(18deg);  }  16% {    -webkit-transform: rotate(-22deg);            transform: rotate(-22deg);  }  20% {    -webkit-transform: rotate(22deg);            transform: rotate(22deg);  }  32% {    -webkit-transform: rotate(-12deg);            transform: rotate(-12deg);  }  36% {    -webkit-transform: rotate(12deg);            transform: rotate(12deg);  }  40%, 100% {    -webkit-transform: rotate(0deg);            transform: rotate(0deg);  }}@-webkit-keyframes fa-spin {  0% {    -webkit-transform: rotate(0deg);            transform: rotate(0deg);  }  100% {    -webkit-transform: rotate(360deg);            transform: rotate(360deg);  }}@keyframes fa-spin {  0% {    -webkit-transform: rotate(0deg);            transform: rotate(0deg);  }  100% {    -webkit-transform: rotate(360deg);            transform: rotate(360deg);  }}.fa-rotate-90 {  -webkit-transform: rotate(90deg);          transform: rotate(90deg);}.fa-rotate-180 {  -webkit-transform: rotate(180deg);          transform: rotate(180deg);}.fa-rotate-270 {  -webkit-transform: rotate(270deg);          transform: rotate(270deg);}.fa-flip-horizontal {  -webkit-transform: scale(-1, 1);          transform: scale(-1, 1);}.fa-flip-vertical {  -webkit-transform: scale(1, -1);          transform: scale(1, -1);}.fa-flip-both,.fa-flip-horizontal.fa-flip-vertical {  -webkit-transform: scale(-1, -1);          transform: scale(-1, -1);}.fa-rotate-by {  -webkit-transform: rotate(var(--fa-rotate-angle, none));          transform: rotate(var(--fa-rotate-angle, none));}.fa-stack {  display: inline-block;  vertical-align: middle;  height: 2em;  position: relative;  width: 2.5em;}.fa-stack-1x,.fa-stack-2x {  bottom: 0;  left: 0;  margin: auto;  position: absolute;  right: 0;  top: 0;  z-index: var(--fa-stack-z-index, auto);}.svg-inline--fa.fa-stack-1x {  height: 1em;  width: 1.25em;}.svg-inline--fa.fa-stack-2x {  height: 2em;  width: 2.5em;}.fa-inverse {  color: var(--fa-inverse, #fff);}.sr-only,.fa-sr-only {  position: absolute;  width: 1px;  height: 1px;  padding: 0;  margin: -1px;  overflow: hidden;  clip: rect(0, 0, 0, 0);  white-space: nowrap;  border-width: 0;}.sr-only-focusable:not(:focus),.fa-sr-only-focusable:not(:focus) {  position: absolute;  width: 1px;  height: 1px;  padding: 0;  margin: -1px;  overflow: hidden;  clip: rect(0, 0, 0, 0);  white-space: nowrap;  border-width: 0;}.svg-inline--fa .fa-primary {  fill: var(--fa-primary-color, currentColor);  opacity: var(--fa-primary-opacity, 1);}.svg-inline--fa .fa-secondary {  fill: var(--fa-secondary-color, currentColor);  opacity: var(--fa-secondary-opacity, 0.4);}.svg-inline--fa.fa-swap-opacity .fa-primary {  opacity: var(--fa-secondary-opacity, 0.4);}.svg-inline--fa.fa-swap-opacity .fa-secondary {  opacity: var(--fa-primary-opacity, 1);}.svg-inline--fa mask .fa-primary,.svg-inline--fa mask .fa-secondary {  fill: black;}.fad.fa-inverse,.fa-duotone.fa-inverse {  color: var(--fa-inverse, #fff);}')
		]));
var $author$project$Frontend$Visuals$defaultFontColor = A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95);
var $author$project$Frontend$RunBot$UserInputEndSessionEvent = {$: 8};
var $author$project$Frontend$Main$describeNavigateBackImplication = function (implication) {
	return {
		eS: 'Stop Bot and Leave Play Session',
		gp: 'Returning to the previous screen will end the play session and stop the bot.',
		gE: $author$project$Frontend$Main$RunBotEvent($author$project$Frontend$RunBot$UserInputEndSessionEvent)
	};
};
var $author$project$Frontend$Visuals$elementFontSizePercent = function (percent) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		A2(
			$elm$html$Html$Attributes$style,
			'font-size',
			$elm$core$String$fromInt(percent) + '%'));
};
var $author$project$Frontend$Visuals$errorColor = A3($mdgriffith$elm_ui$Element$rgb, 1, 0.6, 0);
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $elm$core$String$words = _String_words;
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 0:
						return 'serif';
					case 1:
						return 'sans-serif';
					case 2:
						return 'monospace';
					case 3:
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 4:
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.c_;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			$mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $author$project$Frontend$Visuals$cssStyleHtmlElement = function (style) {
	return A3(
		$elm$html$Html$node,
		'style',
		_List_Nil,
		_List_fromArray(
			[
				$elm$html$Html$text(style)
			]));
};
var $author$project$Frontend$Visuals$composeMarkdownCssStyleText = function (_v0) {
	var containerClassName = _v0.kz;
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$concatMap,
			function (_v1) {
				var htmlTags = _v1.a;
				var cssContent = _v1.b;
				return A2(
					$elm$core$List$map,
					function (htmlTag) {
						return A2(
							$elm$core$String$join,
							'\n',
							_List_fromArray(
								[
									'.' + (containerClassName + (' ' + (htmlTag + ' {'))),
									$elm$core$String$trim(cssContent),
									'}'
								]));
					},
					htmlTags);
			},
			_List_fromArray(
				[
					_Utils_Tuple2(
					_List_fromArray(
						['h1']),
					'\npadding-top: 0;\npadding-bottom: 0.3em;\nfont-size: 2em;\nborder-bottom: 1px solid rgba(255,255,255,0.1);\nmargin-top: 24px;\nmargin-bottom: 16px;\nfont-weight: 600;\nline-height: 1.25;\n'),
					_Utils_Tuple2(
					_List_fromArray(
						['h2']),
					'\npadding-top: 0;\npadding-bottom: 0.3em;\nfont-size: 1.5em;\nborder-bottom: 1px solid rgba(255,255,255,0.1);\nmargin-top: 24px;\nmargin-bottom: 16px;\nfont-weight: 600;\nline-height: 1.25;\n'),
					_Utils_Tuple2(
					_List_fromArray(
						['h3']),
					'\npadding-top: 0;\npadding-bottom: 0.3em;\nfont-size: 1.25em;\nmargin-bottom: 16px;\nfont-weight: 600;\nline-height: 1.25;\n'),
					_Utils_Tuple2(
					_List_fromArray(
						['a:link', 'a:visited']),
					'\ncolor: rgb(77,179,230);\ntext-decoration: none;\n'),
					_Utils_Tuple2(
					_List_fromArray(
						['a:hover', 'a:active']),
					'\ncolor: rgb(77,179,230);\ntext-decoration: underline;\n'),
					_Utils_Tuple2(
					_List_fromArray(
						['pre']),
					'\nbackground-color: rgba(66,111,111,0.3);\nmargin-top: 0;\npadding: 0.8em;\nfont-size: 90%;\nline-height: 1.5;\nborder-radius: 0.4em;\noverflow-y: auto;\n'),
					_Utils_Tuple2(
					_List_fromArray(
						['code:not(pre code)']),
					'\nbackground-color: rgba(66,111,111,0.4);\npadding-block: 0.2em;\npadding-inline: 0.4em;\nfont-size: 90%;\nline-height: 1.5;\nborder-radius: 0.4em;\n'),
					_Utils_Tuple2(
					_List_fromArray(
						['p:not(li p)']),
					'\nmargin-top: 0;\n'),
					_Utils_Tuple2(
					_List_fromArray(
						['ul']),
					'\nmargin-top: 0;\n')
				])));
};
var $author$project$Frontend$Visuals$globalCssStyleText = A2(
	$elm$core$String$join,
	'\n\n',
	_List_fromArray(
		[
			$author$project$Frontend$Visuals$composeMarkdownCssStyleText(
			{kz: 'markdown-body'}),
			'\n\n::-webkit-scrollbar {\n  width: 1.2em;\n  height: 1.2em;\n  background-color: rgba(255,255,255,0.17); /* or add it to the track */\n}\n\n::-webkit-scrollbar-thumb {\n  background: rgba(255,255,255,0.4);\n}\n\n'
		]));
var $author$project$Frontend$Visuals$globalCssStyleHtmlElement = $author$project$Frontend$Visuals$cssStyleHtmlElement($author$project$Frontend$Visuals$globalCssStyleText);
var $mdgriffith$elm_ui$Internal$Model$InFront = 4;
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 3) {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 4, element);
};
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = 1;
var $mdgriffith$elm_ui$Internal$Model$Layout = 0;
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	j4: $elm$core$Maybe$Nothing,
	ka: $elm$core$Maybe$Nothing,
	mH: $elm$core$Maybe$Just(
		{
			bk: 0,
			af: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			aA: _Utils_Tuple2(0, 0),
			iO: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 0:
					var hoverable = opt.a;
					var _v4 = record.lg;
					if (_v4.$ === 1) {
						return _Utils_update(
							record,
							{
								lg: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 1:
					var focusStyle = opt.a;
					var _v5 = record.k4;
					if (_v5.$ === 1) {
						return _Utils_update(
							record,
							{
								k4: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.lQ;
					if (_v6.$ === 1) {
						return _Utils_update(
							record,
							{
								lQ: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			k4: function () {
				var _v0 = record.k4;
				if (_v0.$ === 1) {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			lg: function () {
				var _v1 = record.lg;
				if (_v1.$ === 1) {
					return 1;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			lQ: function () {
				var _v2 = record.lQ;
				if (_v2.$ === 1) {
					return 0;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{k4: $elm$core$Maybe$Nothing, lg: $elm$core$Maybe$Nothing, lQ: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 0:
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 1:
				var styles = el.a.m0;
				var html = el.a.lh;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 2:
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.lQ;
			if (_v0 === 1) {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 1};
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 3, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.hE;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.ms, $mdgriffith$elm_ui$Internal$Style$classes.j$, $mdgriffith$elm_ui$Internal$Style$classes.mK]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $mdgriffith$elm_ui$Element$layout = $mdgriffith$elm_ui$Element$layoutWith(
	{hE: _List_Nil});
var $mdgriffith$elm_ui$Internal$Model$Max = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$maximum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Max, i, l);
	});
var $author$project$Frontend$Visuals$mitigate_2024_09_scrollbar_issue = $mdgriffith$elm_ui$Element$htmlAttribute(
	A2($elm$html$Html$Attributes$style, 'contain', 'size'));
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $mdgriffith$elm_ui$Element$padding = function (x) {
	var f = x;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			f,
			f,
			f,
			f));
};
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 9};
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 5, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $elm$html$Html$Attributes$title = $elm$html$Html$Attributes$stringProperty('title');
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$xmark = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'xmark',
	_Utils_Tuple2(384, 512),
	_Utils_Tuple2('M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$xmark = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$xmark);
var $author$project$Frontend$Visuals$popupCloseButton = function (_v0) {
	var closeEvent = _v0.fA;
	var title = _v0.jg;
	return A2(
		$mdgriffith$elm_ui$Element$Input$button,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color(
						A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.2))
					])),
				$mdgriffith$elm_ui$Element$Border$rounded(2),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				$elm$html$Html$Attributes$title(title))
			]),
		{
			lA: A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
					]),
				$mdgriffith$elm_ui$Element$html(
					$lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Solid$xmark))),
			by: $elm$core$Maybe$Just(closeEvent)
		});
};
var $author$project$Frontend$Visuals$rootFontFamily = _List_fromArray(
	['Segoe UI', 'Tahoma', 'Geneva', 'Verdana', 'sans-serif']);
var $mdgriffith$elm_ui$Internal$Model$AsRow = 0;
var $mdgriffith$elm_ui$Internal$Model$asRow = 0;
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.bS + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.aK)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$scrollbarY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.my);
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === -2) {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $mdgriffith$elm_ui$Internal$Model$AsTextColumn = 5;
var $mdgriffith$elm_ui$Internal$Model$asTextColumn = 5;
var $mdgriffith$elm_ui$Internal$Model$Min = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$minimum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Min, i, l);
	});
var $mdgriffith$elm_ui$Element$textColumn = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asTextColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width(
					A2(
						$mdgriffith$elm_ui$Element$maximum,
						750,
						A2($mdgriffith$elm_ui$Element$minimum, 500, $mdgriffith$elm_ui$Element$fill))),
				attrs),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$triangleExclamation = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'triangle-exclamation',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M256 32c14.2 0 27.3 7.5 34.5 19.8l216 368c7.3 12.4 7.3 27.7 .2 40.1S486.3 480 472 480H40c-14.3 0-27.6-7.7-34.7-20.1s-7-27.8 .2-40.1l216-368C228.7 39.5 241.8 32 256 32zm0 128c-13.3 0-24 10.7-24 24V296c0 13.3 10.7 24 24 24s24-10.7 24-24V184c0-13.3-10.7-24-24-24zm32 224a32 32 0 1 0 -64 0 32 32 0 1 0 64 0z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$triangleExclamation = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$triangleExclamation);
var $mdgriffith$elm_ui$Element$Font$typeface = $mdgriffith$elm_ui$Internal$Model$Typeface;
var $author$project$Frontend$Main$UserInputEnterClientSettingsEvent = function (a) {
	return {$: 1, a: a};
};
var $author$project$Frontend$Main$UserInputExitClientSettingsEvent = {$: 2};
var $mdgriffith$elm_ui$Internal$Model$Heading = function (a) {
	return {$: 4, a: a};
};
var $mdgriffith$elm_ui$Element$Region$heading = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Describe, $mdgriffith$elm_ui$Internal$Model$Heading);
var $author$project$Frontend$Visuals$headingAttributes = function (rank) {
	var fontSizePercent = A2($elm$core$Basics$max, 0, 90 - (rank * 20)) + 100;
	return _List_fromArray(
		[
			$author$project$Frontend$Visuals$elementFontSizePercent(fontSizePercent),
			$mdgriffith$elm_ui$Element$Region$heading(rank)
		]);
};
var $mdgriffith$elm_ui$Element$map = $mdgriffith$elm_ui$Internal$Model$map;
var $author$project$Frontend$Visuals$userSelectNone = $mdgriffith$elm_ui$Element$htmlAttribute(
	A2($elm$html$Html$Attributes$style, 'user-select', 'none'));
var $mdgriffith$elm_ui$Element$Input$HiddenLabel = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Element$Input$labelHidden = $mdgriffith$elm_ui$Element$Input$HiddenLabel;
var $mdgriffith$elm_ui$Element$Input$Placeholder = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$placeholder = $mdgriffith$elm_ui$Element$Input$Placeholder;
var $mdgriffith$elm_ui$Element$Input$TextInputNode = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Element$Input$TextArea = {$: 1};
var $mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 6};
var $mdgriffith$elm_ui$Element$Region$announce = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$LivePolite);
var $mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 1) {
			var labelText = label.a;
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asColumn,
				$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position) {
				case 2:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cQ),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 3:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cQ),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 0:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cQ),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cQ),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var $mdgriffith$elm_ui$Element$Input$autofill = A2(
	$elm$core$Basics$composeL,
	$mdgriffith$elm_ui$Internal$Model$Attr,
	$elm$html$Html$Attributes$attribute('autocomplete'));
var $mdgriffith$elm_ui$Internal$Model$Behind = 5;
var $mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 5, element);
};
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding = function (attrs) {
	var gatherSpacing = F2(
		function (attr, found) {
			if ((attr.$ === 4) && (attr.b.$ === 5)) {
				var _v2 = attr.b;
				var x = _v2.b;
				var y = _v2.c;
				if (found.$ === 1) {
					return $elm$core$Maybe$Just(y);
				} else {
					return found;
				}
			} else {
				return found;
			}
		});
	var _v0 = A3($elm$core$List$foldr, gatherSpacing, $elm$core$Maybe$Nothing, attrs);
	if (_v0.$ === 1) {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		var vSpace = _v0.a;
		return $mdgriffith$elm_ui$Element$moveUp(
			$elm$core$Basics$floor(vSpace / 2));
	}
};
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.kn);
var $mdgriffith$elm_ui$Element$Input$darkGrey = A3($mdgriffith$elm_ui$Element$rgb, 186 / 255, 189 / 255, 182 / 255);
var $mdgriffith$elm_ui$Element$Input$defaultTextPadding = A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12);
var $mdgriffith$elm_ui$Element$Input$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 6, a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Input$defaultTextPadding,
		$mdgriffith$elm_ui$Element$Border$rounded(3),
		$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$darkGrey),
		$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
	]);
var $mdgriffith$elm_ui$Element$Input$getHeight = function (attr) {
	if (attr.$ === 8) {
		var h = attr.a;
		return $elm$core$Maybe$Just(h);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 5, a: a};
};
var $mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 1) {
		var textLabel = label.a;
		return $mdgriffith$elm_ui$Internal$Model$Describe(
			$mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var $mdgriffith$elm_ui$Element$Input$isConstrained = function (len) {
	isConstrained:
	while (true) {
		switch (len.$) {
			case 1:
				return false;
			case 0:
				return true;
			case 2:
				return true;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isConstrained;
			default:
				var l = len.b;
				return true;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 1) {
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$isStacked = function (label) {
	if (!label.$) {
		var loc = label.a;
		switch (loc) {
			case 0:
				return false;
			case 1:
				return false;
			case 2:
				return true;
			default:
				return true;
		}
	} else {
		return true;
	}
};
var $mdgriffith$elm_ui$Element$Input$negateBox = function (box) {
	return {cp: -box.cp, cV: -box.cV, c9: -box.c9, $7: -box.$7};
};
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 1, a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var top = _v0.$7;
	var right = _v0.c9;
	var bottom = _v0.cp;
	var left = _v0.cV;
	if (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) {
		var topFloat = top;
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(top),
				topFloat,
				topFloat,
				topFloat,
				topFloat));
	} else {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
				top,
				right,
				bottom,
				left));
	}
};
var $mdgriffith$elm_ui$Element$Input$isFill = function (len) {
	isFill:
	while (true) {
		switch (len.$) {
			case 2:
				return true;
			case 1:
				return false;
			case 0:
				return false;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isPixel = function (len) {
	isPixel:
	while (true) {
		switch (len.$) {
			case 1:
				return false;
			case 0:
				return true;
			case 2:
				return false;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
		}
	}
};
var $mdgriffith$elm_ui$Internal$Model$paddingNameFloat = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(top) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(right) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(bottom) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(left)))))));
	});
var $mdgriffith$elm_ui$Element$Input$redistributeOver = F4(
	function (isMultiline, stacked, attr, els) {
		switch (attr.$) {
			case 9:
				return _Utils_update(
					els,
					{
						k: A2($elm$core$List$cons, attr, els.k)
					});
			case 7:
				var width = attr.a;
				return $mdgriffith$elm_ui$Element$Input$isFill(width) ? _Utils_update(
					els,
					{
						r: A2($elm$core$List$cons, attr, els.r),
						I: A2($elm$core$List$cons, attr, els.I),
						k: A2($elm$core$List$cons, attr, els.k)
					}) : (stacked ? _Utils_update(
					els,
					{
						r: A2($elm$core$List$cons, attr, els.r)
					}) : _Utils_update(
					els,
					{
						k: A2($elm$core$List$cons, attr, els.k)
					}));
			case 8:
				var height = attr.a;
				return (!stacked) ? _Utils_update(
					els,
					{
						r: A2($elm$core$List$cons, attr, els.r),
						k: A2($elm$core$List$cons, attr, els.k)
					}) : ($mdgriffith$elm_ui$Element$Input$isFill(height) ? _Utils_update(
					els,
					{
						r: A2($elm$core$List$cons, attr, els.r),
						k: A2($elm$core$List$cons, attr, els.k)
					}) : ($mdgriffith$elm_ui$Element$Input$isPixel(height) ? _Utils_update(
					els,
					{
						k: A2($elm$core$List$cons, attr, els.k)
					}) : _Utils_update(
					els,
					{
						k: A2($elm$core$List$cons, attr, els.k)
					})));
			case 6:
				return _Utils_update(
					els,
					{
						r: A2($elm$core$List$cons, attr, els.r)
					});
			case 5:
				return _Utils_update(
					els,
					{
						r: A2($elm$core$List$cons, attr, els.r)
					});
			case 4:
				switch (attr.b.$) {
					case 5:
						var _v1 = attr.b;
						return _Utils_update(
							els,
							{
								r: A2($elm$core$List$cons, attr, els.r),
								I: A2($elm$core$List$cons, attr, els.I),
								k: A2($elm$core$List$cons, attr, els.k),
								bO: A2($elm$core$List$cons, attr, els.bO)
							});
					case 7:
						var cls = attr.a;
						var _v2 = attr.b;
						var pad = _v2.a;
						var t = _v2.b;
						var r = _v2.c;
						var b = _v2.d;
						var l = _v2.e;
						if (isMultiline) {
							return _Utils_update(
								els,
								{
									X: A2($elm$core$List$cons, attr, els.X),
									k: A2($elm$core$List$cons, attr, els.k)
								});
						} else {
							var newTop = t - A2($elm$core$Basics$min, t, b);
							var newLineHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'line-height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newBottom = b - A2($elm$core$Basics$min, t, b);
							var reducedVerticalPadding = A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, r, newBottom, l),
									newTop,
									r,
									newBottom,
									l));
							return _Utils_update(
								els,
								{
									X: A2($elm$core$List$cons, attr, els.X),
									I: A2(
										$elm$core$List$cons,
										newHeight,
										A2($elm$core$List$cons, newLineHeight, els.I)),
									k: A2($elm$core$List$cons, reducedVerticalPadding, els.k)
								});
						}
					case 6:
						var _v3 = attr.b;
						return _Utils_update(
							els,
							{
								X: A2($elm$core$List$cons, attr, els.X),
								k: A2($elm$core$List$cons, attr, els.k)
							});
					case 10:
						return _Utils_update(
							els,
							{
								X: A2($elm$core$List$cons, attr, els.X),
								k: A2($elm$core$List$cons, attr, els.k)
							});
					case 2:
						return _Utils_update(
							els,
							{
								r: A2($elm$core$List$cons, attr, els.r)
							});
					case 1:
						var _v4 = attr.b;
						return _Utils_update(
							els,
							{
								r: A2($elm$core$List$cons, attr, els.r)
							});
					default:
						var flag = attr.a;
						var cls = attr.b;
						return _Utils_update(
							els,
							{
								k: A2($elm$core$List$cons, attr, els.k)
							});
				}
			case 0:
				return els;
			case 1:
				var a = attr.a;
				return _Utils_update(
					els,
					{
						I: A2($elm$core$List$cons, attr, els.I)
					});
			case 2:
				return _Utils_update(
					els,
					{
						I: A2($elm$core$List$cons, attr, els.I)
					});
			case 3:
				return _Utils_update(
					els,
					{
						k: A2($elm$core$List$cons, attr, els.k)
					});
			default:
				return _Utils_update(
					els,
					{
						I: A2($elm$core$List$cons, attr, els.I)
					});
		}
	});
var $mdgriffith$elm_ui$Element$Input$redistribute = F3(
	function (isMultiline, stacked, attrs) {
		return function (redist) {
			return {
				X: $elm$core$List$reverse(redist.X),
				r: $elm$core$List$reverse(redist.r),
				I: $elm$core$List$reverse(redist.I),
				k: $elm$core$List$reverse(redist.k),
				bO: $elm$core$List$reverse(redist.bO)
			};
		}(
			A3(
				$elm$core$List$foldl,
				A2($mdgriffith$elm_ui$Element$Input$redistributeOver, isMultiline, stacked),
				{X: _List_Nil, r: _List_Nil, I: _List_Nil, k: _List_Nil, bO: _List_Nil},
				attrs));
	});
var $mdgriffith$elm_ui$Element$Input$renderBox = function (_v0) {
	var top = _v0.$7;
	var right = _v0.c9;
	var bottom = _v0.cp;
	var left = _v0.cV;
	return $elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px'))))));
};
var $mdgriffith$elm_ui$Element$Input$charcoal = A3($mdgriffith$elm_ui$Element$rgb, 136 / 255, 138 / 255, 133 / 255);
var $mdgriffith$elm_ui$Element$Input$renderPlaceholder = F3(
	function (_v0, forPlaceholder, on) {
		var placeholderAttrs = _v0.a;
		var placeholderEl = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				forPlaceholder,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$charcoal),
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.hs + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.mc)),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alpha(
							on ? 1 : 0)
						]),
					placeholderAttrs)),
			placeholderEl);
	});
var $elm$html$Html$span = _VirtualDom_node('span');
var $elm$html$Html$Attributes$spellcheck = $elm$html$Html$Attributes$boolProperty('spellcheck');
var $mdgriffith$elm_ui$Element$Input$spellcheck = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$spellcheck);
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $mdgriffith$elm_ui$Element$Input$value = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$value);
var $mdgriffith$elm_ui$Element$Input$textHelper = F3(
	function (textInput, attrs, textOptions) {
		var withDefaults = _Utils_ap($mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle, attrs);
		var redistributed = A3(
			$mdgriffith$elm_ui$Element$Input$redistribute,
			_Utils_eq(textInput.t, $mdgriffith$elm_ui$Element$Input$TextArea),
			$mdgriffith$elm_ui$Element$Input$isStacked(textOptions.lA),
			withDefaults);
		var onlySpacing = function (attr) {
			if ((attr.$ === 4) && (attr.b.$ === 5)) {
				var _v9 = attr.b;
				return true;
			} else {
				return false;
			}
		};
		var heightConstrained = function () {
			var _v7 = textInput.t;
			if (!_v7.$) {
				var inputType = _v7.a;
				return false;
			} else {
				return A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$mdgriffith$elm_ui$Element$Input$isConstrained,
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Element$Input$getHeight, withDefaults)))));
			}
		}();
		var getPadding = function (attr) {
			if ((attr.$ === 4) && (attr.b.$ === 7)) {
				var cls = attr.a;
				var _v6 = attr.b;
				var pad = _v6.a;
				var t = _v6.b;
				var r = _v6.c;
				var b = _v6.d;
				var l = _v6.e;
				return $elm$core$Maybe$Just(
					{
						cp: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(b - 3)),
						cV: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(l - 3)),
						c9: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(r - 3)),
						$7: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(t - 3))
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var parentPadding = A2(
			$elm$core$Maybe$withDefault,
			{cp: 0, cV: 0, c9: 0, $7: 0},
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2($elm$core$List$filterMap, getPadding, withDefaults))));
		var inputElement = A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			function () {
				var _v3 = textInput.t;
				if (!_v3.$) {
					var inputType = _v3.a;
					return $mdgriffith$elm_ui$Internal$Model$NodeName('input');
				} else {
					return $mdgriffith$elm_ui$Internal$Model$NodeName('textarea');
				}
			}(),
			_Utils_ap(
				function () {
					var _v4 = textInput.t;
					if (!_v4.$) {
						var inputType = _v4.a;
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_(inputType)),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.lu)
							]);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.lq),
								$mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding(withDefaults),
								$mdgriffith$elm_ui$Element$paddingEach(parentPadding),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2(
									$elm$html$Html$Attributes$style,
									'margin',
									$mdgriffith$elm_ui$Element$Input$renderBox(
										$mdgriffith$elm_ui$Element$Input$negateBox(parentPadding)))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$style, 'box-sizing', 'content-box'))
							]);
					}
				}(),
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Input$value(textOptions.aD),
							$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Events$onInput(textOptions.lZ)),
							$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(textOptions.lA),
							$mdgriffith$elm_ui$Element$Input$spellcheck(textInput.aq),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Internal$Model$NoAttribute,
							A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$Input$autofill, textInput.ai))
						]),
					redistributed.I)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil));
		var wrappedInput = function () {
			var _v0 = textInput.t;
			if (_v0.$ === 1) {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_Utils_ap(
						(heightConstrained ? $elm$core$List$cons($mdgriffith$elm_ui$Element$scrollbarY) : $elm$core$Basics$identity)(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.ge),
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.lt)
								])),
						redistributed.k),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asParagraph,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$inFront(inputElement),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.ls),
												redistributed.bO)))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(
									function () {
										if (textOptions.aD === '') {
											var _v1 = textOptions.mf;
											if (_v1.$ === 1) {
												return _List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('\u00A0')
													]);
											} else {
												var place = _v1.a;
												return _List_fromArray(
													[
														A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, _List_Nil, textOptions.aD === '')
													]);
											}
										} else {
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Internal$Model$unstyled(
													A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.lr)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text(textOptions.aD + '\u00A0')
															])))
												]);
										}
									}()))
							])));
			} else {
				var inputType = _v0.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2(
							$elm$core$List$cons,
							A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.ge),
							$elm$core$List$concat(
								_List_fromArray(
									[
										redistributed.k,
										function () {
										var _v2 = textOptions.mf;
										if (_v2.$ === 1) {
											return _List_Nil;
										} else {
											var place = _v2.a;
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Element$behindContent(
													A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, redistributed.X, textOptions.aD === ''))
												]);
										}
									}()
									])))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[inputElement])));
			}
		}();
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.kE),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(textOptions.lA) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(5),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Region$announce, redistributed.r))),
			textOptions.lA,
			wrappedInput);
	});
var $mdgriffith$elm_ui$Element$Input$text = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		ai: $elm$core$Maybe$Nothing,
		aq: false,
		t: $mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var $author$project$Frontend$ClientSettings$view = function (state) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text('play session recording destination directory'),
				A2(
				$mdgriffith$elm_ui$Element$Input$text,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Frontend$Visuals$backgroundColor),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				{
					lA: $mdgriffith$elm_ui$Element$Input$labelHidden('play session recording destination'),
					lZ: function (newDestination) {
						return {c4: newDestination};
					},
					mf: $elm$core$Maybe$Just(
						A2(
							$mdgriffith$elm_ui$Element$Input$placeholder,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('play session recording destination directory'))),
					aD: A2(
						$elm$core$Maybe$withDefault,
						'',
						A2(
							$elm_community$maybe_extra$Maybe$Extra$orElse,
							A2(
								$elm$core$Maybe$andThen,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Tuple$second,
									$elm$core$Maybe$map(
										function ($) {
											return $.c4;
										})),
								state.cU),
							A2(
								$elm$core$Maybe$map,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Tuple$second,
									function ($) {
										return $.c4;
									}),
								state.d5)))
				}),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alpha(0.6),
						$author$project$Frontend$Visuals$userSelectNone
					]),
				$mdgriffith$elm_ui$Element$text(
					A2(
						$elm$core$Maybe$withDefault,
						'loading...',
						A2(
							$elm$core$Maybe$map,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Tuple$second,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Maybe$map(
										function ($) {
											return $.c4;
										}),
									$elm$core$Maybe$withDefault(''))),
							state.cU))))
			]));
};
var $author$project$Frontend$Main$viewClientSettingsModal = function (state) {
	var popupElement = A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Frontend$Visuals$backgroundColor),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$padding($author$project$Frontend$Visuals$defaultFontSize),
				$mdgriffith$elm_ui$Element$Border$width(2),
				$mdgriffith$elm_ui$Element$Border$color(
				A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.3)),
				$mdgriffith$elm_ui$Element$Border$rounded(8),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto'))
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$inFront(
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$author$project$Frontend$Visuals$elementFontSizePercent(140),
									$mdgriffith$elm_ui$Element$alignRight,
									$mdgriffith$elm_ui$Element$alignTop
								]),
							$author$project$Frontend$Visuals$popupCloseButton(
								{fA: $author$project$Frontend$Main$UserInputExitClientSettingsEvent, jg: 'Cancel'})))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						A2(
							$elm$core$List$cons,
							$author$project$Frontend$Visuals$userSelectNone,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$centerX,
								$author$project$Frontend$Visuals$headingAttributes(2))),
						$mdgriffith$elm_ui$Element$text('Client Settings'))
					])),
				A2(
				$mdgriffith$elm_ui$Element$map,
				A2($elm$core$Basics$composeR, $elm$core$Maybe$Just, $author$project$Frontend$Main$UserInputEnterClientSettingsEvent),
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					$author$project$Frontend$ClientSettings$view(state)))
			]));
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
				$mdgriffith$elm_ui$Element$Background$color(
				A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.5)),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'backdrop-filter', 'blur(1px)')),
				$mdgriffith$elm_ui$Element$inFront(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$padding($author$project$Frontend$Visuals$defaultFontSize * 2),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'pointer-events', 'none'))
						]),
					popupElement))
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Events$onClick($author$project$Frontend$Main$UserInputExitClientSettingsEvent)
					]),
				_List_Nil)
			]));
};
var $author$project$Frontend$Main$DevToolsEvent = function (a) {
	return {$: 11, a: a};
};
var $author$project$Frontend$View$documentMap = F2(
	function (map, document) {
		return {
			ff: A2($mdgriffith$elm_ui$Element$map, map, document.ff),
			jg: document.jg
		};
	});
var $elm$url$Url$Builder$toQueryPair = function (_v0) {
	var key = _v0.a;
	var value = _v0.b;
	return key + ('=' + value);
};
var $elm$url$Url$Builder$toQuery = function (parameters) {
	if (!parameters.b) {
		return '';
	} else {
		return '?' + A2(
			$elm$core$String$join,
			'&',
			A2($elm$core$List$map, $elm$url$Url$Builder$toQueryPair, parameters));
	}
};
var $elm$url$Url$Builder$absolute = F2(
	function (pathSegments, parameters) {
		return '/' + (A2($elm$core$String$join, '/', pathSegments) + $elm$url$Url$Builder$toQuery(parameters));
	});
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode_HostInterface_ImageExportFunction = function (valueToEncode) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'PngImageExportFunction',
				A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_Nil))
			]));
};
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode_HostInterface_SessionEventExportQuery = function (valueToEncode) {
	var tagArgument0 = valueToEncode;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'ReadFromWindowScreenshotCropExport',
				A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'binningFactor',
									$elm$json$Json$Encode$int(tagArgument0.fd)),
									_Utils_Tuple2(
									'inBinningFactorCropIndex',
									$elm$json$Json$Encode$int(tagArgument0.gG)),
									_Utils_Tuple2(
									'exportFunction',
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode_HostInterface_ImageExportFunction(tagArgument0.f4))
								]))
						])))
			]));
};
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode_HostInterface_SessionExportQuery = function (valueToEncode) {
	var tagArgument0 = valueToEncode.a;
	var tagArgument1 = valueToEncode.b;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'SessionExportQueryEvent',
				A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$json$Json$Encode$int(tagArgument0),
							$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode_HostInterface_SessionEventExportQuery(tagArgument1)
						])))
			]));
};
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode_88b22727f2 = function (valueToEncode) {
	return $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode_HostInterface_SessionExportQuery(valueToEncode);
};
var $author$project$CompilationInterface$GenerateJsonConverters$jsonEncodeSessionExportQuery = $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonEncode_88b22727f2;
var $elm$url$Url$Builder$QueryParameter = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$url$Url$percentEncode = _Url_percentEncode;
var $elm$url$Url$Builder$string = F2(
	function (key, value) {
		return A2(
			$elm$url$Url$Builder$QueryParameter,
			$elm$url$Url$percentEncode(key),
			$elm$url$Url$percentEncode(value));
	});
var $author$project$Frontend$DevTools$InspectSessionEvent = F2(
	function (a, b) {
		return {$: 5, a: a, b: b};
	});
var $author$project$HostInterface$SessionExportQueryEvent = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$Frontend$DevTools$UserInputClick = function (a) {
	return {$: 2, a: a};
};
var $author$project$Frontend$DevTools$ViewSessionSummary = {$: 0};
var $mdgriffith$elm_ui$Internal$Flag$fontAlignment = $mdgriffith$elm_ui$Internal$Flag$flag(12);
var $mdgriffith$elm_ui$Element$Font$center = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.m9);
var $author$project$Frontend$DevTools$constrainTimelineViewportToSessionSummary = F2(
	function (session, viewport) {
		return _Utils_update(
			viewport,
			{
				x: A2($elm$core$Basics$max, 0, viewport.x),
				G: A2($elm$core$Basics$min, session.eX - 1, viewport.G)
			});
	});
var $elm$html$Html$Attributes$download = function (fileName) {
	return A2($elm$html$Html$Attributes$stringProperty, 'download', fileName);
};
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $mdgriffith$elm_ui$Element$downloadAs = F2(
	function (attrs, _v0) {
		var url = _v0.eC;
		var filename = _v0.f7;
		var label = _v0.lA;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$download(filename)),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cD),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.aK),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$fileExport = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'file-export',
	_Utils_Tuple2(576, 512),
	_Utils_Tuple2('M0 64C0 28.7 28.7 0 64 0H224V128c0 17.7 14.3 32 32 32H384V288H216c-13.3 0-24 10.7-24 24s10.7 24 24 24H384V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V64zM384 336V288H494.1l-39-39c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l80 80c9.4 9.4 9.4 24.6 0 33.9l-80 80c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l39-39H384zm0-208H256V0L384 128z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$fileExport = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$fileExport);
var $mdgriffith$elm_ui$Element$fillPortion = $mdgriffith$elm_ui$Internal$Model$Fill;
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $mdgriffith$elm_ui$Element$transparent = function (on) {
	return on ? A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2($mdgriffith$elm_ui$Internal$Model$Transparency, 'transparent', 1.0)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2($mdgriffith$elm_ui$Internal$Model$Transparency, 'visible', 0.0));
};
var $author$project$Frontend$DevTools$UserInputDownloadJsonFileFromEvent = function (a) {
	return {$: 1, a: a};
};
var $author$project$Frontend$DevTools$FromOctoberAgentResponse = $elm$core$Basics$identity;
var $author$project$DevTools$BotInterface_To_Host_2024_10_20_SerialInterface$ApplyFunctionShimResponse = function (a) {
	return {$: 1, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_20_SerialInterface$EstimateSerializedStateLengthShimResponse = function (a) {
	return {$: 4, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_20_SerialInterface$ListBranchesShimResponse = function (a) {
	return {$: 5, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_20_SerialInterface$ListExposedFunctionsShimResponse = function (a) {
	return {$: 0, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_20_SerialInterface$RemoveBranchesShimResponse = function (a) {
	return {$: 6, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_20_SerialInterface$SerializeStateShimResponse = function (a) {
	return {$: 2, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_20_SerialInterface$SetBranchesStateShimResponse = function (a) {
	return {$: 3, a: a};
};
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_20_SerialInterface_StateShimResponse = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'ApplyFunctionShimResponse',
			$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_20_SerialInterface$ApplyFunctionShimResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result,
								$elm$json$Json$Decode$string,
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'producedStateDifferentFromStateArgument',
										_List_fromArray(
											['ProducedStateDifferentFromStateArgument']),
										$elm$json$Json$Decode$bool),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'resultLessStateJson',
											_List_fromArray(
												['ResultLessStateJson']),
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$value)),
										$elm$json$Json$Decode$succeed(
											F2(
												function (resultLessStateJson, producedStateDifferentFromStateArgument) {
													return {hY: producedStateDifferentFromStateArgument, ik: resultLessStateJson};
												})))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'EstimateSerializedStateLengthShimResponse',
			$elm$json$Json$Decode$lazy(
				function (_v1) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_20_SerialInterface$EstimateSerializedStateLengthShimResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2($author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result, $elm$json$Json$Decode$string, $elm$json$Json$Decode$int)));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'ListBranchesShimResponse',
			$elm$json$Json$Decode$lazy(
				function (_v2) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_20_SerialInterface$ListBranchesShimResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($elm$json$Json$Decode$string)));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'ListExposedFunctionsShimResponse',
			$elm$json$Json$Decode$lazy(
				function (_v3) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_20_SerialInterface$ListExposedFunctionsShimResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List(
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'functionDescription',
										_List_fromArray(
											['FunctionDescription']),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'parameters',
												_List_fromArray(
													['Parameters']),
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List(
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'typeIsAppStateType',
															_List_fromArray(
																['TypeIsAppStateType']),
															$elm$json$Json$Decode$bool),
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'typeSourceCodeText',
																_List_fromArray(
																	['TypeSourceCodeText']),
																$elm$json$Json$Decode$string),
															A2(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
																A3(
																	$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																	'patternSourceCodeText',
																	_List_fromArray(
																		['PatternSourceCodeText']),
																	$elm$json$Json$Decode$string),
																$elm$json$Json$Decode$succeed(
																	F3(
																		function (patternSourceCodeText, typeSourceCodeText, typeIsAppStateType) {
																			return {hP: patternSourceCodeText, jp: typeIsAppStateType, jq: typeSourceCodeText};
																		}))))))),
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'returnType',
													_List_fromArray(
														['ReturnType']),
													A2(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
														A3(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
															'containsAppStateType',
															_List_fromArray(
																['ContainsAppStateType']),
															$elm$json$Json$Decode$bool),
														A2(
															$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
															A3(
																$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
																'sourceCodeText',
																_List_fromArray(
																	['SourceCodeText']),
																$elm$json$Json$Decode$string),
															$elm$json$Json$Decode$succeed(
																F2(
																	function (sourceCodeText, containsAppStateType) {
																		return {fF: containsAppStateType, iU: sourceCodeText};
																	}))))),
												$elm$json$Json$Decode$succeed(
													F2(
														function (returnType, parameters) {
															return {hN: parameters, ep: returnType};
														}))))),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'functionName',
											_List_fromArray(
												['FunctionName']),
											$elm$json$Json$Decode$string),
										$elm$json$Json$Decode$succeed(
											F2(
												function (functionName, functionDescription) {
													return {cL: functionDescription, gk: functionName};
												})))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'RemoveBranchesShimResponse',
			$elm$json$Json$Decode$lazy(
				function (_v4) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_20_SerialInterface$RemoveBranchesShimResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'removedCount',
									_List_fromArray(
										['RemovedCount']),
									$elm$json$Json$Decode$int),
								$elm$json$Json$Decode$succeed(
									function (removedCount) {
										return {ia: removedCount};
									}))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'SerializeStateShimResponse',
			$elm$json$Json$Decode$lazy(
				function (_v5) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_20_SerialInterface$SerializeStateShimResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2($author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result, $elm$json$Json$Decode$string, $elm$json$Json$Decode$value)));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'SetBranchesStateShimResponse',
			$elm$json$Json$Decode$lazy(
				function (_v6) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_20_SerialInterface$SetBranchesStateShimResponse,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2($author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result, $elm$json$Json$Decode$string, $elm$json$Json$Decode$string)));
				}))
		]));
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_0c1d4f1a31 = A2($author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Result, $elm$json$Json$Decode$string, $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_20_SerialInterface_StateShimResponse);
var $author$project$CompilationInterface$GenerateJsonConverters$jsonDecodeProcessSerializedEventResponse = $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_0c1d4f1a31;
var $author$project$Frontend$DevTools$decodeAgentResponse = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2($elm$json$Json$Decode$map, $elm$core$Basics$identity, $author$project$CompilationInterface$GenerateJsonConverters$jsonDecodeProcessSerializedEventResponse)
		]));
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $author$project$Frontend$View$exportButtonLabelFromText = function (labelText) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size($author$project$Frontend$Visuals$defaultFontSize)
					]),
				$mdgriffith$elm_ui$Element$html(
					$lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Solid$fileExport))),
				$mdgriffith$elm_ui$Element$text(labelText)
			]));
};
var $author$project$Frontend$DevTools$indentAttribute = function (amount) {
	return $mdgriffith$elm_ui$Element$paddingEach(
		{cp: 0, cV: amount, c9: 0, $7: 0});
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$ContinueSession = function (a) {
	return {$: 0, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$FinishSession = function (a) {
	return {$: 1, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$CreateVolatileProcess = function (a) {
	return {$: 0, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$InvokeMethodOnWindowRequest = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$OpenWindowRequest = function (a) {
	return {$: 3, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$RandomBytesRequest = function (a) {
	return {$: 6, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$ReleaseVolatileProcess = function (a) {
	return {$: 2, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$RequestToVolatileProcess = function (a) {
	return {$: 1, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$WindowsInputRequest = function (a) {
	return {$: 5, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$ChromeDevToolsProtocolRuntimeEvaluateMethod = function (a) {
	return {$: 1, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$CloseWindowMethod = {$: 0};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$ReadFromWindowMethod = {$: 3};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$SetZoomFactorOnWebViewMethod = function (a) {
	return {$: 2, a: a};
};
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_MethodOnWindow = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'ChromeDevToolsProtocolRuntimeEvaluateMethod',
			$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$ChromeDevToolsProtocolRuntimeEvaluateMethod,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'awaitPromise',
									_List_fromArray(
										['AwaitPromise']),
									$elm$json$Json$Decode$bool),
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'expression',
										_List_fromArray(
											['Expression']),
										$elm$json$Json$Decode$string),
									$elm$json$Json$Decode$succeed(
										F2(
											function (expression, awaitPromise) {
												return {e7: awaitPromise, f5: expression};
											}))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'CloseWindowMethod',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull($author$project$DevTools$BotInterface_To_Host_2024_10_19$CloseWindowMethod)),
			A2(
			$elm$json$Json$Decode$field,
			'ReadFromWindowMethod',
			$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecodeSucceedWhenNotNull($author$project$DevTools$BotInterface_To_Host_2024_10_19$ReadFromWindowMethod)),
			A2(
			$elm$json$Json$Decode$field,
			'SetZoomFactorOnWebViewMethod',
			$elm$json$Json$Decode$lazy(
				function (_v1) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$SetZoomFactorOnWebViewMethod,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'zoomFactorMikro',
									_List_fromArray(
										['ZoomFactorMikro']),
									$elm$json$Json$Decode$int),
								$elm$json$Json$Decode$succeed(
									function (zoomFactorMikro) {
										return {jN: zoomFactorMikro};
									}))));
				}))
		]));
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$RequestNotRequiringInputFocus = function (a) {
	return {$: 1, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$RequestRequiringInputFocus = function (a) {
	return {$: 0, a: a};
};
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_RequestToVolatileProcessConsideringInputFocusStructure = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'RequestNotRequiringInputFocus',
			$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$RequestNotRequiringInputFocus,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'request',
									_List_fromArray(
										['Request']),
									$elm$json$Json$Decode$string),
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'processId',
										_List_fromArray(
											['ProcessId']),
										$elm$json$Json$Decode$string),
									$elm$json$Json$Decode$succeed(
										F2(
											function (processId, request) {
												return {Q: processId, bc: request};
											}))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'RequestRequiringInputFocus',
			$elm$json$Json$Decode$lazy(
				function (_v1) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$RequestRequiringInputFocus,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'acquireInputFocus',
									_List_fromArray(
										['AcquireInputFocus']),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'maximumDelayMilliseconds',
											_List_fromArray(
												['MaximumDelayMilliseconds']),
											$elm$json$Json$Decode$int),
										$elm$json$Json$Decode$succeed(
											function (maximumDelayMilliseconds) {
												return {hg: maximumDelayMilliseconds};
											}))),
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'request',
										_List_fromArray(
											['Request']),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'request',
												_List_fromArray(
													['Request']),
												$elm$json$Json$Decode$string),
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'processId',
													_List_fromArray(
														['ProcessId']),
													$elm$json$Json$Decode$string),
												$elm$json$Json$Decode$succeed(
													F2(
														function (processId, request) {
															return {Q: processId, bc: request};
														}))))),
									$elm$json$Json$Decode$succeed(
										F2(
											function (request, acquireInputFocus) {
												return {eQ: acquireInputFocus, bc: request};
											}))))));
				}))
		]));
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$WebBrowserWindow = $elm$core$Basics$identity;
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_WindowType = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'WebBrowserWindow',
			$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$map,
						$elm$core$Basics$identity,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'additionalBrowserArguments',
									_List_fromArray(
										['AdditionalBrowserArguments']),
									$elm$json$Json$Decode$string),
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'isInPrivateModeEnabled',
										_List_fromArray(
											['IsInPrivateModeEnabled']),
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$bool)),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'language',
											_List_fromArray(
												['Language']),
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'userDataFolder',
												_List_fromArray(
													['UserDataFolder']),
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($elm$json$Json$Decode$string)),
											$elm$json$Json$Decode$succeed(
												F4(
													function (userDataFolder, language, isInPrivateModeEnabled, additionalBrowserArguments) {
														return {eV: additionalBrowserArguments, gT: isInPrivateModeEnabled, g$: language, jv: userDataFolder};
													}))))))));
				}))
		]));
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$AbortIfWindowNotInForeground = function (a) {
	return {$: 11, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$BringWindowToForeground = function (a) {
	return {$: 10, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$ButtonDown = function (a) {
	return {$: 5, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$ButtonScroll = F3(
	function (a, b, c) {
		return {$: 7, a: a, b: b, c: c};
	});
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$ButtonUp = function (a) {
	return {$: 6, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$CharacterDown = function (a) {
	return {$: 8, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$CharacterUp = function (a) {
	return {$: 9, a: a};
};
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$KeyDown = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$KeyUp = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$MouseMoveAbsolute = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$MouseMoveRelative = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $author$project$DevTools$BotInterface_To_Host_2024_10_19$WaitMilliseconds = function (a) {
	return {$: 0, a: a};
};
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_WindowsInputSequenceItem = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'AbortIfWindowNotInForeground',
			$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$AbortIfWindowNotInForeground,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'BringWindowToForeground',
			$elm$json$Json$Decode$lazy(
				function (_v1) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$BringWindowToForeground,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'ButtonDown',
			$elm$json$Json$Decode$lazy(
				function (_v2) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$ButtonDown,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'ButtonScroll',
			$elm$json$Json$Decode$lazy(
				function (_v3) {
					return A4(
						$elm$json$Json$Decode$map3,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$ButtonScroll,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int),
						A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$int),
						A2($elm$json$Json$Decode$index, 2, $elm$json$Json$Decode$int));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'ButtonUp',
			$elm$json$Json$Decode$lazy(
				function (_v4) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$ButtonUp,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'CharacterDown',
			$elm$json$Json$Decode$lazy(
				function (_v5) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$CharacterDown,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'CharacterUp',
			$elm$json$Json$Decode$lazy(
				function (_v6) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$CharacterUp,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'KeyDown',
			$elm$json$Json$Decode$lazy(
				function (_v7) {
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$KeyDown,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int),
						A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$bool));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'KeyUp',
			$elm$json$Json$Decode$lazy(
				function (_v8) {
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$KeyUp,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int),
						A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$bool));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'MouseMoveAbsolute',
			$elm$json$Json$Decode$lazy(
				function (_v9) {
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$MouseMoveAbsolute,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int),
						A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$int));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'MouseMoveRelative',
			$elm$json$Json$Decode$lazy(
				function (_v10) {
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$MouseMoveRelative,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int),
						A2($elm$json$Json$Decode$index, 1, $elm$json$Json$Decode$int));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'WaitMilliseconds',
			$elm$json$Json$Decode$lazy(
				function (_v11) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$WaitMilliseconds,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int));
				}))
		]));
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_Task = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'CreateVolatileProcess',
			$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$CreateVolatileProcess,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'programCode',
									_List_fromArray(
										['ProgramCode']),
									$elm$json$Json$Decode$string),
								$elm$json$Json$Decode$succeed(
									function (programCode) {
										return {hZ: programCode};
									}))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'InvokeMethodOnWindowRequest',
			$elm$json$Json$Decode$lazy(
				function (_v1) {
					return A3(
						$elm$json$Json$Decode$map2,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$InvokeMethodOnWindowRequest,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$string),
						A2($elm$json$Json$Decode$index, 1, $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_MethodOnWindow));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'OpenWindowRequest',
			$elm$json$Json$Decode$lazy(
				function (_v2) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$OpenWindowRequest,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'userGuide',
									_List_fromArray(
										['UserGuide']),
									$elm$json$Json$Decode$string),
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'windowType',
										_List_fromArray(
											['WindowType']),
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe($author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_WindowType)),
									$elm$json$Json$Decode$succeed(
										F2(
											function (windowType, userGuide) {
												return {jw: userGuide, jL: windowType};
											}))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'RandomBytesRequest',
			$elm$json$Json$Decode$lazy(
				function (_v3) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$RandomBytesRequest,
						A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'ReleaseVolatileProcess',
			$elm$json$Json$Decode$lazy(
				function (_v4) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$ReleaseVolatileProcess,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'processId',
									_List_fromArray(
										['ProcessId']),
									$elm$json$Json$Decode$string),
								$elm$json$Json$Decode$succeed(
									function (processId) {
										return {Q: processId};
									}))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'RequestToVolatileProcess',
			$elm$json$Json$Decode$lazy(
				function (_v5) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$RequestToVolatileProcess,
						A2($elm$json$Json$Decode$index, 0, $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_RequestToVolatileProcessConsideringInputFocusStructure));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'WindowsInputRequest',
			$elm$json$Json$Decode$lazy(
				function (_v6) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$WindowsInputRequest,
						A2(
							$elm$json$Json$Decode$index,
							0,
							$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List($author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_WindowsInputSequenceItem)));
				}))
		]));
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_BotEventResponse = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'ContinueSession',
			$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$ContinueSession,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'notifyWhenArrivedAtTime',
									_List_fromArray(
										['NotifyWhenArrivedAtTime']),
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_Maybe(
										A2(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
											A3(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
												'timeInMilliseconds',
												_List_fromArray(
													['TimeInMilliseconds']),
												$elm$json$Json$Decode$int),
											$elm$json$Json$Decode$succeed(
												function (timeInMilliseconds) {
													return {bI: timeInMilliseconds};
												})))),
								A2(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
									A3(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
										'startTasks',
										_List_fromArray(
											['StartTasks']),
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode__generic_List(
											A2(
												$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
												A3(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
													'task',
													_List_fromArray(
														['Task']),
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_Task),
												A2(
													$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
													A3(
														$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
														'taskId',
														_List_fromArray(
															['TaskId']),
														$elm$json$Json$Decode$string),
													$elm$json$Json$Decode$succeed(
														F2(
															function (taskId, task) {
																return {jc: task, di: taskId};
															})))))),
									A2(
										$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
										A3(
											$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
											'statusText',
											_List_fromArray(
												['StatusText']),
											$elm$json$Json$Decode$string),
										$elm$json$Json$Decode$succeed(
											F3(
												function (statusText, startTasks, notifyWhenArrivedAtTime) {
													return {ht: notifyWhenArrivedAtTime, i$: startTasks, dg: statusText};
												})))))));
				})),
			A2(
			$elm$json$Json$Decode$field,
			'FinishSession',
			$elm$json$Json$Decode$lazy(
				function (_v1) {
					return A2(
						$elm$json$Json$Decode$map,
						$author$project$DevTools$BotInterface_To_Host_2024_10_19$FinishSession,
						A2(
							$elm$json$Json$Decode$index,
							0,
							A2(
								$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_andMap,
								A3(
									$author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_field_withAlternateNames,
									'statusText',
									_List_fromArray(
										['StatusText']),
									$elm$json$Json$Decode$string),
								$elm$json$Json$Decode$succeed(
									function (statusText) {
										return {dg: statusText};
									}))));
				}))
		]));
var $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_04f66fa3b9 = $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_DevTools_BotInterface_To_Host_2024_10_19_BotEventResponse;
var $author$project$CompilationInterface$GenerateJsonConverters$jsonDecodeProcessEventResponseResultLessStateJson = $author$project$CompilationInterface$GenerateJsonConverters$Generated_56aedd2c$jsonDecode_04f66fa3b9;
var $author$project$Frontend$DevTools$mapFromGeneralAgentResponseStructureToLatest = function (serializedAgentResponse) {
	var fromOctober = serializedAgentResponse;
	return $elm$core$Result$Ok(fromOctober);
};
var $author$project$Frontend$Visuals$statusTextFromBotBackgroundColor = A3($mdgriffith$elm_ui$Element$rgb, 0.1, 0.13, 0.1);
var $author$project$Frontend$Visuals$textFormattedAsInConsoleElement = A2(
	$elm$core$Basics$composeR,
	$elm$html$Html$text,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$singleton,
		A2(
			$elm$core$Basics$composeR,
			$elm$html$Html$div(
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'font-family', 'monospace, monospace'),
						A2($elm$html$Html$Attributes$style, 'word-break', 'break-all'),
						A2($elm$html$Html$Attributes$style, 'white-space', 'pre-wrap'),
						A2($elm$html$Html$Attributes$style, 'line-height', 'normal')
					])),
			$mdgriffith$elm_ui$Element$html)));
var $author$project$Frontend$Visuals$statusTextFromBotElement = function (_v0) {
	var enableScrolling = _v0.kX;
	var scrollAttributes = enableScrolling ? _List_fromArray(
		[$mdgriffith$elm_ui$Element$scrollbarY, $author$project$Frontend$Visuals$mitigate_2024_09_scrollbar_issue]) : _List_Nil;
	return A2(
		$elm$core$Basics$composeR,
		$author$project$Frontend$Visuals$textFormattedAsInConsoleElement,
		$mdgriffith$elm_ui$Element$el(
			$elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color($author$project$Frontend$Visuals$statusTextFromBotBackgroundColor),
							$mdgriffith$elm_ui$Element$padding(4),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
						scrollAttributes
					]))));
};
var $elm_community$string_extra$String$Extra$breaker = F3(
	function (width, string, acc) {
		breaker:
		while (true) {
			if (string === '') {
				return $elm$core$List$reverse(acc);
			} else {
				var $temp$width = width,
					$temp$string = A2($elm$core$String$dropLeft, width, string),
					$temp$acc = A2(
					$elm$core$List$cons,
					A3($elm$core$String$slice, 0, width, string),
					acc);
				width = $temp$width;
				string = $temp$string;
				acc = $temp$acc;
				continue breaker;
			}
		}
	});
var $elm_community$string_extra$String$Extra$break = F2(
	function (width, string) {
		return ((!width) || (string === '')) ? _List_fromArray(
			[string]) : A3($elm_community$string_extra$String$Extra$breaker, width, string, _List_Nil);
	});
var $elm$core$String$reverse = _String_reverse;
var $author$project$Frontend$Visuals$stringFromIntWithThousandSeparator = F2(
	function (_v0, integer) {
		var positiveSign = _v0.el;
		var negativeSign = _v0.ec;
		var integerValue = $elm$core$Basics$abs(integer);
		var signText = _Utils_eq(integer, integerValue) ? positiveSign : negativeSign;
		var valueFormattedText = $elm$core$String$reverse(
			A2(
				$elm$core$String$join,
				'\u00A0',
				A2(
					$elm_community$string_extra$String$Extra$break,
					3,
					$elm$core$String$reverse(
						$elm$core$String$fromInt(integerValue)))));
		return _Utils_ap(signText, valueFormattedText);
	});
var $author$project$Frontend$DevTools$Clock_IconInTimeline = 5;
var $author$project$Frontend$DevTools$Stopwatch_IconInTimeline = 1;
var $author$project$Frontend$DevTools$Wrench_IconInTimeline = 4;
var $author$project$Frontend$Visuals$defaultLinkConfig = {
	af: A3($mdgriffith$elm_ui$Element$rgb, 0.3, 0.7, 0.9),
	cY: A3($mdgriffith$elm_ui$Element$rgb, 0.3, 0.7, 0.9),
	l4: true
};
var $author$project$Frontend$View$botDescriptionMarkdownConfig = {
	kq: {
		af: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.4)
	},
	lF: $author$project$Frontend$Visuals$defaultLinkConfig
};
var $mdgriffith$elm_ui$Internal$Model$Monospace = {$: 2};
var $mdgriffith$elm_ui$Element$Font$monospace = $mdgriffith$elm_ui$Internal$Model$Monospace;
var $mdgriffith$elm_ui$Element$scrollbarX = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.mx);
var $author$project$Frontend$MarkdownElmUI$codeBlock = F2(
	function (config, details) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(config.kq.af),
					$mdgriffith$elm_ui$Element$padding(15),
					$mdgriffith$elm_ui$Element$Font$family(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$typeface('Consolas'),
							$mdgriffith$elm_ui$Element$Font$monospace
						])),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'white-space', 'pre')),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'line-height', 'normal')),
							$mdgriffith$elm_ui$Element$scrollbarX,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$author$project$Frontend$Visuals$mitigate_2024_09_scrollbar_issue
						]),
					$mdgriffith$elm_ui$Element$html(
						$elm$html$Html$text(details.ff)))
				]));
	});
var $author$project$Frontend$DevTools$Error_IconInTimeline = 8;
var $avh4$elm_color$Color$RgbaSpace = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $avh4$elm_color$Color$fromRgba = function (components) {
	return A4($avh4$elm_color$Color$RgbaSpace, components.en, components.dX, components.dB, components.bi);
};
var $mdgriffith$elm_ui$Element$toRgb = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	return {bi: a, dB: b, dX: g, en: r};
};
var $author$project$Frontend$DevTools$errorColoredIcon = {
	af: $avh4$elm_color$Color$fromRgba(
		$mdgriffith$elm_ui$Element$toRgb($author$project$Frontend$Visuals$errorColor)),
	aa: 8
};
var $avh4$elm_color$Color$rgb = F3(
	function (r, g, b) {
		return A4($avh4$elm_color$Color$RgbaSpace, r, g, b, 1.0);
	});
var $author$project$Frontend$DevTools$Cube_IconInTimeline = 3;
var $author$project$Frontend$DevTools$Dice_IconInTimeline = 7;
var $author$project$Frontend$DevTools$Envelope_IconInTimeline = 2;
var $author$project$Frontend$DevTools$Image_IconInTimeline = 6;
var $author$project$Frontend$DevTools$taskCompletedEventIcons = F2(
	function (_v0, taskCompleted) {
		var agentEventOriginalString = _v0.eZ;
		return $elm$core$List$concat(
			_List_fromArray(
				[
					(4000 < $elm$core$String$length(agentEventOriginalString)) ? _List_fromArray(
					[
						{
						af: A3($avh4$elm_color$Color$rgb, 1, 0.7, 0.4),
						aa: 3
					}
					]) : _List_fromArray(
					[
						{
						af: A3($avh4$elm_color$Color$rgb, 1, 0.7, 0.4),
						aa: 2
					}
					]),
					function () {
					var _v1 = taskCompleted.jd;
					_v1$2:
					while (true) {
						switch (_v1.$) {
							case 3:
								if ((!_v1.b.$) && (_v1.b.a.$ === 1)) {
									return _List_fromArray(
										[
											{
											af: A3($avh4$elm_color$Color$rgb, 0.6, 1, 0.5),
											aa: 6
										}
										]);
								} else {
									break _v1$2;
								}
							case 4:
								return _List_fromArray(
									[
										{
										af: A3($avh4$elm_color$Color$rgb, 0.6, 0.6, 1),
										aa: 7
									}
									]);
							default:
								break _v1$2;
						}
					}
					return _List_Nil;
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$Padding = F5(
	function (a, b, c, d, e) {
		return {$: 0, a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Model$Spaced = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, _v0) {
				var pad = _v0.a;
				var spacing = _v0.b;
				return _Utils_Tuple2(
					function () {
						if (!pad.$) {
							var x = pad.a;
							return pad;
						} else {
							if ((attr.$ === 4) && (attr.b.$ === 7)) {
								var _v3 = attr.b;
								var name = _v3.a;
								var t = _v3.b;
								var r = _v3.c;
								var b = _v3.d;
								var l = _v3.e;
								return $elm$core$Maybe$Just(
									A5($mdgriffith$elm_ui$Internal$Model$Padding, name, t, r, b, l));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}(),
					function () {
						if (!spacing.$) {
							var x = spacing.a;
							return spacing;
						} else {
							if ((attr.$ === 4) && (attr.b.$ === 5)) {
								var _v6 = attr.b;
								var name = _v6.a;
								var x = _v6.b;
								var y = _v6.c;
								return $elm$core$Maybe$Just(
									A3($mdgriffith$elm_ui$Internal$Model$Spaced, name, x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}());
			}),
		_Utils_Tuple2($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
		attrs);
};
var $mdgriffith$elm_ui$Element$wrappedRow = F2(
	function (attrs, children) {
		var _v0 = $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding(attrs);
		var padded = _v0.a;
		var spaced = _v0.b;
		if (spaced.$ === 1) {
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asRow,
				$mdgriffith$elm_ui$Internal$Model$div,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.bS + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.aK + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.eL)))),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							attrs))),
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
		} else {
			var _v2 = spaced.a;
			var spaceName = _v2.a;
			var x = _v2.b;
			var y = _v2.c;
			var newPadding = function () {
				if (!padded.$) {
					var _v5 = padded.a;
					var name = _v5.a;
					var t = _v5.b;
					var r = _v5.c;
					var b = _v5.d;
					var l = _v5.e;
					if ((_Utils_cmp(r, x / 2) > -1) && (_Utils_cmp(b, y / 2) > -1)) {
						var newTop = t - (y / 2);
						var newRight = r - (x / 2);
						var newLeft = l - (x / 2);
						var newBottom = b - (y / 2);
						return $elm$core$Maybe$Just(
							A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, newRight, newBottom, newLeft),
									newTop,
									newRight,
									newBottom,
									newLeft)));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}();
			if (!newPadding.$) {
				var pad = newPadding.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asRow,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.bS + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.aK + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.eL)))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								_Utils_ap(
									attrs,
									_List_fromArray(
										[pad]))))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
			} else {
				var halfY = -(y / 2);
				var halfX = -(x / 2);
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					attrs,
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asRow,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.bS + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.aK + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.eL)))),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											A2(
												$elm$html$Html$Attributes$style,
												'margin',
												$elm$core$String$fromFloat(halfY) + ('px' + (' ' + ($elm$core$String$fromFloat(halfX) + 'px'))))),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Internal$Model$Attr(
												A2(
													$elm$html$Html$Attributes$style,
													'width',
													'calc(100% + ' + ($elm$core$String$fromInt(x) + 'px)'))),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$Attr(
													A2(
														$elm$html$Html$Attributes$style,
														'height',
														'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))),
												A2(
													$elm$core$List$cons,
													A2(
														$mdgriffith$elm_ui$Internal$Model$StyleClass,
														$mdgriffith$elm_ui$Internal$Flag$spacing,
														A3($mdgriffith$elm_ui$Internal$Model$SpacingStyle, spaceName, x, y)),
													_List_Nil))))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(children))
							])));
			}
		}
	});
var $author$project$Frontend$DevTools$viewAgentEventDetails = function (agentEvent) {
	var failedToDecodeEvent = F2(
		function (summaryText, errorText) {
			return {
				dK: $elm$core$Maybe$Nothing,
				aY: function (_v13) {
					return A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$errorColor),
								$mdgriffith$elm_ui$Element$padding($author$project$Frontend$Visuals$defaultFontSize)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(summaryText + ': '),
								$mdgriffith$elm_ui$Element$text(errorText)
							]));
				},
				a1: function (_v14) {
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(summaryText)
						]);
				},
				M: _List_fromArray(
					[$author$project$Frontend$DevTools$errorColoredIcon]),
				bf: summaryText
			};
		});
	var _v0 = agentEvent.e$;
	if (_v0.$ === 1) {
		var err = _v0.a;
		return A2(failedToDecodeEvent, 'Failed to load event string', err);
	} else {
		var agentEventString = _v0.a;
		var _v1 = agentEventString.cI;
		if (_v1.$ === 1) {
			var err = _v1.a;
			return A2(
				failedToDecodeEvent,
				'Failed to decode agent event',
				$elm$json$Json$Decode$errorToString(err));
		} else {
			var decodedAgentEvent = _v1.a;
			var columnFromSummaryTextAndDetailsAndHeadingElements = function (properties) {
				return {
					dK: $elm$core$Maybe$Just(decodedAgentEvent),
					aY: function (_v11) {
						return A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
								]),
							properties.aM(0));
					},
					a1: function (_v12) {
						return _Utils_ap(
							properties.d_(0),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text(properties.aB)
								]));
					},
					M: properties.M,
					bf: properties.aB
				};
			};
			var continueWithFromOctoberAgentEvent = function (agentEventFromOctober) {
				var columnFromSummaryTextAndDetails = function (properties) {
					return columnFromSummaryTextAndDetailsAndHeadingElements(
						{
							aM: properties.aM,
							d_: function (_v10) {
								return _List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('at'),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$htmlAttribute(
														A2($elm$html$Html$Attributes$style, 'font-family', 'monospace, monospace'))
													]),
												$mdgriffith$elm_ui$Element$text(
													A2(
														$author$project$Frontend$Visuals$stringFromIntWithThousandSeparator,
														{ec: '-\u00A0', el: ''},
														agentEventFromOctober.bI)))
											]))
									]);
							},
							M: properties.M,
							aB: properties.aB
						});
				};
				var _v5 = agentEventFromOctober.f0;
				switch (_v5.$) {
					case 0:
						return columnFromSummaryTextAndDetails(
							{
								aM: function (_v6) {
									return _List_Nil;
								},
								M: _List_fromArray(
									[
										{
										af: A3($avh4$elm_color$Color$rgb, 0.6, 0.8, 1),
										aa: 5
									}
									]),
								aB: 'Time arrived'
							});
					case 1:
						var botSettings = _v5.a;
						return columnFromSummaryTextAndDetails(
							{
								aM: function (_v7) {
									return _List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text('New bot-settings:'),
											(botSettings === '') ? $mdgriffith$elm_ui$Element$text('Empty settings string') : A2(
											$author$project$Frontend$MarkdownElmUI$codeBlock,
											$author$project$Frontend$View$botDescriptionMarkdownConfig,
											{ff: botSettings, g$: $elm$core$Maybe$Nothing})
										]);
								},
								M: _List_fromArray(
									[
										{
										af: A3($avh4$elm_color$Color$rgb, 0.6, 0.6, 1),
										aa: 4
									}
									]),
								aB: 'bot-settings changed'
							});
					case 3:
						var taskCompleted = _v5.a;
						return columnFromSummaryTextAndDetails(
							{
								aM: function (_v8) {
									return _List_Nil;
								},
								M: A2(
									$author$project$Frontend$DevTools$taskCompletedEventIcons,
									{eZ: agentEventString.c2},
									taskCompleted),
								aB: 'Task completed'
							});
					default:
						var sessionDurationPlanned = _v5.a;
						return columnFromSummaryTextAndDetails(
							{
								aM: function (_v9) {
									return _List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$wrappedRow,
											_List_Nil,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text('Planned length in milliseconds: '),
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$htmlAttribute(
															A2($elm$html$Html$Attributes$style, 'font-family', 'monospace, monospace'))
														]),
													$mdgriffith$elm_ui$Element$text(
														A2(
															$author$project$Frontend$Visuals$stringFromIntWithThousandSeparator,
															{ec: '-\u00A0', el: ''},
															sessionDurationPlanned.bI)))
												]))
										]);
								},
								M: _List_fromArray(
									[
										{
										af: A3($avh4$elm_color$Color$rgb, 0.6, 0.6, 1),
										aa: 1
									}
									]),
								aB: 'Session length planned'
							});
				}
			};
			var _v2 = $author$project$Frontend$DevTools$mapFromGeneralAgentEventStructureToLatest(decodedAgentEvent);
			if (_v2.$ === 1) {
				var mapError = _v2.a;
				return columnFromSummaryTextAndDetailsAndHeadingElements(
					{
						aM: function (_v3) {
							return _List_Nil;
						},
						d_: function (_v4) {
							return _List_Nil;
						},
						M: _List_fromArray(
							[$author$project$Frontend$DevTools$errorColoredIcon]),
						aB: 'Failed to map to latest agent event structure: ' + mapError
					});
			} else {
				var fromOctober = _v2.a;
				return continueWithFromOctoberAgentEvent(fromOctober);
			}
		}
	}
};
var $author$project$EveOnline$VolatileProcessInterface$CompletedEffectSequenceOnWindow = {$: 4};
var $author$project$EveOnline$VolatileProcessInterface$FailedToBringWindowToFront = function (a) {
	return {$: 3, a: a};
};
var $author$project$EveOnline$VolatileProcessInterface$ListGameClientProcessesResponse = function (a) {
	return {$: 0, a: a};
};
var $author$project$EveOnline$VolatileProcessInterface$ReadFromWindowResult = function (a) {
	return {$: 2, a: a};
};
var $author$project$EveOnline$VolatileProcessInterface$SearchUIRootAddressResult = function (a) {
	return {$: 1, a: a};
};
var $author$project$EveOnline$VolatileProcessInterface$Completed = function (a) {
	return {$: 1, a: a};
};
var $author$project$EveOnline$VolatileProcessInterface$ProcessNotFound = {$: 0};
var $author$project$EveOnline$VolatileProcessInterface$MemoryReadingCompletedStructure = F3(
	function (processId, readingId, memoryReadingSerialRepresentationJson) {
		return {lM: memoryReadingSerialRepresentationJson, Q: processId, h7: readingId};
	});
var $author$project$EveOnline$VolatileProcessInterface$jsonDecode_optionalField = F2(
	function (fieldName, decoder) {
		var finishDecoding = function (json) {
			var _v0 = A2(
				$elm$json$Json$Decode$decodeValue,
				A2($elm$json$Json$Decode$field, fieldName, $elm$json$Json$Decode$value),
				json);
			if (!_v0.$) {
				var val = _v0.a;
				return A2(
					$elm$json$Json$Decode$map,
					$elm$core$Maybe$Just,
					A2($elm$json$Json$Decode$field, fieldName, decoder));
			} else {
				return $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing);
			}
		};
		return A2($elm$json$Json$Decode$andThen, finishDecoding, $elm$json$Json$Decode$value);
	});
var $author$project$EveOnline$VolatileProcessInterface$decodeMemoryReadingCompleted = A4(
	$elm$json$Json$Decode$map3,
	$author$project$EveOnline$VolatileProcessInterface$MemoryReadingCompletedStructure,
	A2($elm$json$Json$Decode$field, 'processId', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'readingId', $elm$json$Json$Decode$string),
	A2($author$project$EveOnline$VolatileProcessInterface$jsonDecode_optionalField, 'memoryReadingSerialRepresentationJson', $elm$json$Json$Decode$string));
var $author$project$EveOnline$VolatileProcessInterface$decodeReadFromWindowResult = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			'ProcessNotFound',
			$elm$json$Json$Decode$succeed($author$project$EveOnline$VolatileProcessInterface$ProcessNotFound)),
			A2(
			$elm$json$Json$Decode$map,
			$author$project$EveOnline$VolatileProcessInterface$Completed,
			A2($elm$json$Json$Decode$field, 'Completed', $author$project$EveOnline$VolatileProcessInterface$decodeMemoryReadingCompleted))
		]));
var $author$project$EveOnline$VolatileProcessInterface$SearchUIRootAddressResultStructure = F2(
	function (processId, uiRootAddress) {
		return {Q: processId, eB: uiRootAddress};
	});
var $elm$json$Json$Decode$nullable = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)
			]));
};
var $author$project$EveOnline$VolatileProcessInterface$decodeSearchUIRootAddressResult = A3(
	$elm$json$Json$Decode$map2,
	$author$project$EveOnline$VolatileProcessInterface$SearchUIRootAddressResultStructure,
	A2($elm$json$Json$Decode$field, 'processId', $elm$json$Json$Decode$int),
	A2(
		$elm$json$Json$Decode$map,
		$elm_community$maybe_extra$Maybe$Extra$join,
		A2(
			$author$project$EveOnline$VolatileProcessInterface$jsonDecode_optionalField,
			'uiRootAddress',
			$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string))));
var $author$project$EveOnline$VolatileProcessInterface$GameClientProcessSummaryStruct = F4(
	function (processId, mainWindowId, mainWindowTitle, mainWindowZIndex) {
		return {lI: mainWindowId, lJ: mainWindowTitle, lK: mainWindowZIndex, Q: processId};
	});
var $elm$json$Json$Decode$map4 = _Json_map4;
var $author$project$EveOnline$VolatileProcessInterface$jsonDecodeGameClientProcessSummary = A5(
	$elm$json$Json$Decode$map4,
	$author$project$EveOnline$VolatileProcessInterface$GameClientProcessSummaryStruct,
	A2($elm$json$Json$Decode$field, 'processId', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'mainWindowId', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'mainWindowTitle', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'mainWindowZIndex', $elm$json$Json$Decode$int));
var $author$project$EveOnline$VolatileProcessInterface$jsonDecodeSucceedWhenNotNull = function (valueIfNotNull) {
	return A2(
		$elm$json$Json$Decode$andThen,
		function (asValue) {
			return _Utils_eq(asValue, $elm$json$Json$Encode$null) ? $elm$json$Json$Decode$fail('Is null.') : $elm$json$Json$Decode$succeed(valueIfNotNull);
		},
		$elm$json$Json$Decode$value);
};
var $author$project$EveOnline$VolatileProcessInterface$decodeResponseFromVolatileHost = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			$author$project$EveOnline$VolatileProcessInterface$ListGameClientProcessesResponse,
			A2(
				$elm$json$Json$Decode$field,
				'ListGameClientProcessesResponse',
				$elm$json$Json$Decode$list($author$project$EveOnline$VolatileProcessInterface$jsonDecodeGameClientProcessSummary))),
			A2(
			$elm$json$Json$Decode$map,
			$author$project$EveOnline$VolatileProcessInterface$SearchUIRootAddressResult,
			A2($elm$json$Json$Decode$field, 'SearchUIRootAddressResult', $author$project$EveOnline$VolatileProcessInterface$decodeSearchUIRootAddressResult)),
			A2(
			$elm$json$Json$Decode$map,
			$author$project$EveOnline$VolatileProcessInterface$ReadFromWindowResult,
			A2($elm$json$Json$Decode$field, 'ReadFromWindowResult', $author$project$EveOnline$VolatileProcessInterface$decodeReadFromWindowResult)),
			A2(
			$elm$json$Json$Decode$field,
			'FailedToBringWindowToFront',
			A2($elm$json$Json$Decode$map, $author$project$EveOnline$VolatileProcessInterface$FailedToBringWindowToFront, $elm$json$Json$Decode$string)),
			A2(
			$elm$json$Json$Decode$field,
			'CompletedEffectSequenceOnWindow',
			$author$project$EveOnline$VolatileProcessInterface$jsonDecodeSucceedWhenNotNull($author$project$EveOnline$VolatileProcessInterface$CompletedEffectSequenceOnWindow))
		]));
var $author$project$EveOnline$VolatileProcessInterface$deserializeResponseFromVolatileHost = $elm$json$Json$Decode$decodeString($author$project$EveOnline$VolatileProcessInterface$decodeResponseFromVolatileHost);
var $author$project$EveOnline$MemoryReading$UITreeNodeChild = $elm$core$Basics$identity;
var $author$project$EveOnline$MemoryReading$decodeOptionalField = F2(
	function (fieldName, decoder) {
		var finishDecoding = function (json) {
			var _v0 = A2(
				$elm$json$Json$Decode$decodeValue,
				A2($elm$json$Json$Decode$field, fieldName, $elm$json$Json$Decode$value),
				json);
			if (!_v0.$) {
				return A2(
					$elm$json$Json$Decode$map,
					$elm$core$Maybe$Just,
					A2($elm$json$Json$Decode$field, fieldName, decoder));
			} else {
				return $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing);
			}
		};
		return A2($elm$json$Json$Decode$andThen, finishDecoding, $elm$json$Json$Decode$value);
	});
var $author$project$EveOnline$MemoryReading$decodeOptionalOrNullField = F2(
	function (fieldName, decoder) {
		return A2(
			$elm$json$Json$Decode$map,
			$elm$core$Maybe$andThen($elm$core$Basics$identity),
			A2(
				$author$project$EveOnline$MemoryReading$decodeOptionalField,
				fieldName,
				$elm$json$Json$Decode$nullable(decoder)));
	});
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$json$Json$Decode$map5 = _Json_map5;
function $author$project$EveOnline$MemoryReading$cyclic$uiTreeNodeDecoder() {
	return A6(
		$elm$json$Json$Decode$map5,
		F5(
			function (originalJson, pythonObjectAddress, pythonObjectTypeName, dictEntriesOfInterest, children) {
				return {
					cv: A2(
						$elm$core$Maybe$map,
						$elm$core$List$map($elm$core$Basics$identity),
						children),
					fM: $elm$core$Dict$fromList(dictEntriesOfInterest),
					hI: originalJson,
					h$: pythonObjectAddress,
					h0: pythonObjectTypeName
				};
			}),
		$elm$json$Json$Decode$value,
		A2($elm$json$Json$Decode$field, 'pythonObjectAddress', $elm$json$Json$Decode$string),
		A2(
			$elm$json$Json$Decode$map,
			$elm$core$Maybe$withDefault(''),
			A2($author$project$EveOnline$MemoryReading$decodeOptionalField, 'pythonObjectTypeName', $elm$json$Json$Decode$string)),
		A2(
			$elm$json$Json$Decode$field,
			'dictEntriesOfInterest',
			$elm$json$Json$Decode$keyValuePairs($elm$json$Json$Decode$value)),
		A2(
			$author$project$EveOnline$MemoryReading$decodeOptionalOrNullField,
			'children',
			$elm$json$Json$Decode$list(
				$elm$json$Json$Decode$lazy(
					function (_v0) {
						return $author$project$EveOnline$MemoryReading$cyclic$uiTreeNodeDecoder();
					}))));
}
var $author$project$EveOnline$MemoryReading$uiTreeNodeDecoder = $author$project$EveOnline$MemoryReading$cyclic$uiTreeNodeDecoder();
$author$project$EveOnline$MemoryReading$cyclic$uiTreeNodeDecoder = function () {
	return $author$project$EveOnline$MemoryReading$uiTreeNodeDecoder;
};
var $author$project$EveOnline$MemoryReading$decodeMemoryReadingFromString = $elm$json$Json$Decode$decodeString($author$project$EveOnline$MemoryReading$uiTreeNodeDecoder);
var $author$project$EveOnline$ParseUserInterface$justCaseWithDisplayRegion = function (child) {
	if (child.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var childWithRegion = child.a;
		return $elm$core$Maybe$Just(childWithRegion);
	}
};
var $author$project$EveOnline$ParseUserInterface$listChildrenWithDisplayRegion = function (parent) {
	return A2(
		$elm$core$List$filterMap,
		$author$project$EveOnline$ParseUserInterface$justCaseWithDisplayRegion,
		A2($elm$core$Maybe$withDefault, _List_Nil, parent.cv));
};
var $author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion = function (parent) {
	return A2(
		$elm$core$List$concatMap,
		function (child) {
			return A2(
				$elm$core$List$cons,
				child,
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(child));
		},
		$author$project$EveOnline$ParseUserInterface$listChildrenWithDisplayRegion(parent));
};
var $author$project$Frontend$EveOnlineAlternateUIMain$parseOverviewWindow = function (overviewWindow) {
	var mapEntry = function (originalEntry) {
		return {fb: originalEntry.fb, fs: originalEntry.cs, gA: originalEntry.gA, js: originalEntry.b};
	};
	var headers = A2(
		$elm$core$List$map,
		$elm$core$Tuple$first,
		A2(
			$elm$core$List$sortBy,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Tuple$second,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.i;
					},
					function ($) {
						return $.nB;
					})),
			overviewWindow.fX));
	var entries = A2(
		$elm$core$List$map,
		mapEntry,
		A2(
			$elm$core$List$sortBy,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.i;
					},
					function ($) {
						return $.nC;
					})),
			overviewWindow.am));
	return {am: entries, gq: headers};
};
var $author$project$EveOnline$ParseUserInterface$ChildWithRegion = function (a) {
	return {$: 0, a: a};
};
var $author$project$EveOnline$ParseUserInterface$ChildWithoutRegion = function (a) {
	return {$: 1, a: a};
};
var $author$project$EveOnline$ParseUserInterface$areaFromDisplayRegion = function (region) {
	return ((region.u < 0) || (region._ < 0)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(region.u * region._);
};
var $author$project$EveOnline$ParseUserInterface$jsonDecodeIntFromIntOrString = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			$elm$json$Json$Decode$int,
			A2(
			$elm$json$Json$Decode$andThen,
			function (asString) {
				var _v0 = $elm$core$String$toInt(asString);
				if (!_v0.$) {
					var asInt = _v0.a;
					return $elm$json$Json$Decode$succeed(asInt);
				} else {
					return $elm$json$Json$Decode$fail('Failed to parse integer from string \'' + (asString + '\''));
				}
			},
			$elm$json$Json$Decode$string)
		]));
var $author$project$EveOnline$ParseUserInterface$getDisplayRegionFromDictEntries = function (uiNode) {
	var fixedNumberFromJsonValue = $elm$json$Json$Decode$decodeValue(
		$elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					$author$project$EveOnline$ParseUserInterface$jsonDecodeIntFromIntOrString,
					A2($elm$json$Json$Decode$field, 'int_low32', $author$project$EveOnline$ParseUserInterface$jsonDecodeIntFromIntOrString)
				])));
	var fixedNumberFromPropertyName = function (propertyName) {
		return A2(
			$elm$core$Maybe$andThen,
			A2($elm$core$Basics$composeR, fixedNumberFromJsonValue, $elm$core$Result$toMaybe),
			A2($elm$core$Dict$get, propertyName, uiNode.fM));
	};
	var _v0 = _Utils_Tuple2(
		_Utils_Tuple2(
			fixedNumberFromPropertyName('_displayX'),
			fixedNumberFromPropertyName('_displayY')),
		_Utils_Tuple2(
			fixedNumberFromPropertyName('_displayWidth'),
			fixedNumberFromPropertyName('_displayHeight')));
	if ((((!_v0.a.a.$) && (!_v0.a.b.$)) && (!_v0.b.a.$)) && (!_v0.b.b.$)) {
		var _v1 = _v0.a;
		var displayX = _v1.a.a;
		var displayY = _v1.b.a;
		var _v2 = _v0.b;
		var displayWidth = _v2.a.a;
		var displayHeight = _v2.b.a;
		return $elm$core$Maybe$Just(
			{_: displayHeight, u: displayWidth, nB: displayX, nC: displayY});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$EveOnline$ParseUserInterface$listUnique = A2(
	$elm$core$List$foldr,
	F2(
		function (nextElement, elements) {
			return A2($elm$core$List$member, nextElement, elements) ? elements : A2($elm$core$List$cons, nextElement, elements);
		}),
	_List_Nil);
var $author$project$EveOnline$ParseUserInterface$subtractRegionFromRegion = function (_v0) {
	var minuend = _v0.b1;
	var subtrahend = _v0.b9;
	var subtrahendRight = subtrahend.nB + subtrahend.u;
	var subtrahendBottom = subtrahend.nC + subtrahend._;
	var minuendRight = minuend.nB + minuend.u;
	var minuendBottom = minuend.nC + minuend._;
	return $author$project$EveOnline$ParseUserInterface$listUnique(
		A2(
			$elm$core$List$filter,
			function (rect) {
				return (0 < rect.u) && (0 < rect._);
			},
			A2(
				$elm$core$List$map,
				function (rect) {
					return {_: rect.cp - rect.$7, u: rect.c9 - rect.cV, nB: rect.cV, nC: rect.$7};
				},
				_List_fromArray(
					[
						{
						cp: A2($elm$core$Basics$min, subtrahend.nC, minuendBottom),
						cV: minuend.nB,
						c9: minuendRight,
						$7: minuend.nC
					},
						{
						cp: minuendBottom,
						cV: minuend.nB,
						c9: A2($elm$core$Basics$min, subtrahend.nB, minuendRight),
						$7: minuend.nC
					},
						{
						cp: minuendBottom,
						cV: A2($elm$core$Basics$max, subtrahendRight, minuend.nB),
						c9: minuendRight,
						$7: minuend.nC
					},
						{
						cp: minuendBottom,
						cV: minuend.nB,
						c9: minuendRight,
						$7: A2($elm$core$Basics$max, subtrahendBottom, minuend.nC)
					}
					]))));
};
var $author$project$EveOnline$ParseUserInterface$subtractRegionsFromRegion = function (_v0) {
	var minuend = _v0.b1;
	var subtrahend = _v0.b9;
	return A3(
		$elm$core$List$foldl,
		F2(
			function (subtrahendPart, previousResults) {
				return A2(
					$elm$core$List$concatMap,
					function (minuendPart) {
						return $author$project$EveOnline$ParseUserInterface$subtractRegionFromRegion(
							{b1: minuendPart, b9: subtrahendPart});
					},
					previousResults);
			}),
		_List_fromArray(
			[minuend]),
		subtrahend);
};
var $author$project$EveOnline$ParseUserInterface$typeOccludesFollowingSiblingNodes = function (node) {
	return node.h0 === 'SortHeaders';
};
var $author$project$EveOnline$MemoryReading$unwrapUITreeNodeChild = function (child) {
	var node = child;
	return node;
};
var $author$project$EveOnline$ParseUserInterface$asUITreeNodeWithDisplayRegion = F2(
	function (_v2, uiNode) {
		var selfDisplayRegion = _v2.b8;
		var totalDisplayRegion = _v2.i;
		var occludedRegions = _v2.b2;
		return {
			cv: A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					A2(
						$elm$core$List$foldl,
						F2(
							function (currentChild, mappedSiblings) {
								var occludingSiblingsRegions = A2(
									$elm$core$List$map,
									function ($) {
										return $.i;
									},
									A2(
										$elm$core$List$filter,
										A2(
											$elm$core$Basics$composeR,
											function ($) {
												return $.b;
											},
											$author$project$EveOnline$ParseUserInterface$typeOccludesFollowingSiblingNodes),
										A2($elm$core$List$filterMap, $author$project$EveOnline$ParseUserInterface$justCaseWithDisplayRegion, mappedSiblings)));
								return A2(
									$elm$core$List$cons,
									A3(
										$author$project$EveOnline$ParseUserInterface$asUITreeNodeWithInheritedOffset,
										{nB: totalDisplayRegion.nB, nC: totalDisplayRegion.nC},
										{
											b2: _Utils_ap(occludedRegions, occludingSiblingsRegions)
										},
										$author$project$EveOnline$MemoryReading$unwrapUITreeNodeChild(currentChild)),
									mappedSiblings);
							}),
						_List_Nil),
					$elm$core$List$reverse),
				uiNode.cv),
			b8: selfDisplayRegion,
			i: totalDisplayRegion,
			ji: A2(
				$elm$core$Maybe$withDefault,
				{_: 0, u: 0, nB: -1, nC: -1},
				$elm$core$List$head(
					A2(
						$elm$core$List$sortBy,
						A2(
							$elm$core$Basics$composeR,
							$author$project$EveOnline$ParseUserInterface$areaFromDisplayRegion,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Maybe$withDefault(-1),
								$elm$core$Basics$negate)),
						$author$project$EveOnline$ParseUserInterface$subtractRegionsFromRegion(
							{b1: totalDisplayRegion, b9: occludedRegions})))),
			b: uiNode
		};
	});
var $author$project$EveOnline$ParseUserInterface$asUITreeNodeWithInheritedOffset = F3(
	function (inheritedOffset, _v0, rawNode) {
		var occludedRegions = _v0.b2;
		var _v1 = $author$project$EveOnline$ParseUserInterface$getDisplayRegionFromDictEntries(rawNode);
		if (_v1.$ === 1) {
			return $author$project$EveOnline$ParseUserInterface$ChildWithoutRegion(rawNode);
		} else {
			var selfRegion = _v1.a;
			return $author$project$EveOnline$ParseUserInterface$ChildWithRegion(
				A2(
					$author$project$EveOnline$ParseUserInterface$asUITreeNodeWithDisplayRegion,
					{
						b2: occludedRegions,
						b8: selfRegion,
						i: _Utils_update(
							selfRegion,
							{nB: inheritedOffset.nB + selfRegion.nB, nC: inheritedOffset.nC + selfRegion.nC})
					},
					rawNode));
		}
	});
var $author$project$EveOnline$ParseUserInterface$parseUITreeWithDisplayRegionFromUITree = function (uiTree) {
	var selfDisplayRegion = A2(
		$elm$core$Maybe$withDefault,
		{_: 0, u: 0, nB: 0, nC: 0},
		$author$project$EveOnline$ParseUserInterface$getDisplayRegionFromDictEntries(uiTree));
	return A2(
		$author$project$EveOnline$ParseUserInterface$asUITreeNodeWithDisplayRegion,
		{b2: _List_Nil, b8: selfDisplayRegion, i: selfDisplayRegion},
		uiTree);
};
var $author$project$EveOnline$ParseUserInterface$parseAgentConversationWindow = function (windowUINode) {
	return {b: windowUINode};
};
var $author$project$EveOnline$ParseUserInterface$parseAgentConversationWindowsFromUITreeRoot = function (uiTreeRoot) {
	return A2(
		$elm$core$List$map,
		$author$project$EveOnline$ParseUserInterface$parseAgentConversationWindow,
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('AgentDialogueWindow'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot)));
};
var $author$project$EveOnline$ParseUserInterface$getDisplayText = function (uiNode) {
	return $elm$core$List$head(
		A2(
			$elm$core$List$sortBy,
			A2($elm$core$Basics$composeR, $elm$core$String$length, $elm$core$Basics$negate),
			A2(
				$elm$core$List$filterMap,
				function (displayTextPropertyName) {
					return A2(
						$elm$core$Maybe$andThen,
						A2(
							$elm$core$Basics$composeR,
							$elm$json$Json$Decode$decodeValue($elm$json$Json$Decode$string),
							$elm$core$Result$toMaybe),
						A2($elm$core$Dict$get, displayTextPropertyName, uiNode.fM));
				},
				_List_fromArray(
					['_setText', '_text']))));
};
var $author$project$EveOnline$MemoryReading$listDescendantsInUITreeNode = function (parent) {
	return A2(
		$elm$core$List$concatMap,
		function (child) {
			return A2(
				$elm$core$List$cons,
				child,
				$author$project$EveOnline$MemoryReading$listDescendantsInUITreeNode(child));
		},
		A2(
			$elm$core$List$map,
			$author$project$EveOnline$MemoryReading$unwrapUITreeNodeChild,
			A2($elm$core$Maybe$withDefault, _List_Nil, parent.cv)));
};
var $author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTexts = function (uiNode) {
	return A2(
		$elm$core$List$filterMap,
		$author$project$EveOnline$ParseUserInterface$getDisplayText,
		A2(
			$elm$core$List$cons,
			uiNode,
			$author$project$EveOnline$MemoryReading$listDescendantsInUITreeNode(uiNode)));
};
var $author$project$EveOnline$ParseUserInterface$findButtonInDescendantsByDisplayTextsPredicate = function (displayTextsPredicate) {
	return A2(
		$elm$core$Basics$composeR,
		$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$filter(
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$String$contains('Button')))),
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$filter(
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						A2($elm$core$Basics$composeR, $author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTexts, displayTextsPredicate))),
				A2(
					$elm$core$Basics$composeR,
					$elm$core$List$sortBy(
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.i;
							},
							A2(
								$elm$core$Basics$composeR,
								$author$project$EveOnline$ParseUserInterface$areaFromDisplayRegion,
								$elm$core$Maybe$withDefault(0)))),
					$elm$core$List$head))));
};
var $author$project$EveOnline$ParseUserInterface$findButtonInDescendantsContainingDisplayText = function (displayText) {
	return $author$project$EveOnline$ParseUserInterface$findButtonInDescendantsByDisplayTextsPredicate(
		$elm$core$List$any(
			A2(
				$elm$core$Basics$composeR,
				$elm$core$String$toLower,
				$elm$core$String$contains(
					$elm$core$String$toLower(displayText)))));
};
var $author$project$EveOnline$ParseUserInterface$parseBookmarkLocationWindow = function (windowUINode) {
	return {
		fp: A2($author$project$EveOnline$ParseUserInterface$findButtonInDescendantsContainingDisplayText, 'cancel', windowUINode),
		i4: A2($author$project$EveOnline$ParseUserInterface$findButtonInDescendantsContainingDisplayText, 'submit', windowUINode),
		b: windowUINode
	};
};
var $author$project$EveOnline$ParseUserInterface$parseBookmarkLocationWindowFromUITreeRoot = function (uiTreeRoot) {
	return A2(
		$elm$core$Maybe$map,
		$author$project$EveOnline$ParseUserInterface$parseBookmarkLocationWindow,
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('BookmarkLocationWindow'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot))));
};
var $author$project$EveOnline$ParseUserInterface$parseCharacterSheetWindow = function (windowUINode) {
	var skillGroups = A2(
		$elm$core$List$filter,
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.b;
			},
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.h0;
				},
				$elm$core$String$contains('SkillGroupGauge'))),
		$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(windowUINode));
	return {iP: skillGroups, b: windowUINode};
};
var $author$project$EveOnline$ParseUserInterface$parseCharacterSheetWindowFromUITreeRoot = function (uiTreeRoot) {
	return A2(
		$elm$core$Maybe$map,
		$author$project$EveOnline$ParseUserInterface$parseCharacterSheetWindow,
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('CharacterSheetWindow'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot))));
};
var $author$project$EveOnline$ParseUserInterface$getStringPropertyFromDictEntries = F2(
	function (dictEntryKey, uiNode) {
		return A2(
			$elm$core$Maybe$andThen,
			A2(
				$elm$core$Basics$composeR,
				$elm$json$Json$Decode$decodeValue($elm$json$Json$Decode$string),
				$elm$core$Result$toMaybe),
			A2($elm$core$Dict$get, dictEntryKey, uiNode.fM));
	});
var $author$project$EveOnline$ParseUserInterface$getNameFromDictEntries = $author$project$EveOnline$ParseUserInterface$getStringPropertyFromDictEntries('_name');
var $author$project$EveOnline$ParseUserInterface$getHintTextFromDictEntries = $author$project$EveOnline$ParseUserInterface$getStringPropertyFromDictEntries('_hint');
var $author$project$EveOnline$ParseUserInterface$parseChatUserEntry = function (chatUserUiNode) {
	var standingIconNode = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('FlagIconWithState'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(chatUserUiNode)));
	var standingIconHint = A2(
		$elm$core$Maybe$andThen,
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.b;
			},
			$author$project$EveOnline$ParseUserInterface$getHintTextFromDictEntries),
		standingIconNode);
	var name = $elm$core$List$head(
		$elm$core$List$reverse(
			A2(
				$elm$core$List$sortBy,
				$elm$core$String$length,
				$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTexts(chatUserUiNode.b))));
	return {c_: name, i_: standingIconHint, b: chatUserUiNode};
};
var $author$project$EveOnline$ParseUserInterface$parseScrollControls = function (scrollControlsNode) {
	var scrollHandle = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('ScrollHandle'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(scrollControlsNode)));
	return {iz: scrollHandle, b: scrollControlsNode};
};
var $author$project$EveOnline$ParseUserInterface$parseChatWindowUserlist = function (userlistNode) {
	var visibleUsers = A2(
		$elm$core$List$map,
		$author$project$EveOnline$ParseUserInterface$parseChatUserEntry,
		A2(
			$elm$core$List$filter,
			function (uiNode) {
				return A2(
					$elm$core$List$member,
					uiNode.b.h0,
					_List_fromArray(
						['XmppChatSimpleUserEntry', 'XmppChatUserEntry']));
			},
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(userlistNode)));
	var scrollControls = A2(
		$elm$core$Maybe$map,
		$author$project$EveOnline$ParseUserInterface$parseScrollControls,
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$String$contains('ScrollControls'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(userlistNode))));
	return {bC: scrollControls, b: userlistNode, jD: visibleUsers};
};
var $author$project$EveOnline$ParseUserInterface$parseChatWindow = function (chatWindowUiNode) {
	var userlistNode = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$map(
							A2(
								$elm$core$Basics$composeR,
								$elm$core$String$toLower,
								$elm$core$String$contains('userlist'))),
						$elm$core$Maybe$withDefault(false)))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(chatWindowUiNode)));
	return {
		c_: $author$project$EveOnline$ParseUserInterface$getNameFromDictEntries(chatWindowUiNode.b),
		b: chatWindowUiNode,
		jx: A2($elm$core$Maybe$map, $author$project$EveOnline$ParseUserInterface$parseChatWindowUserlist, userlistNode)
	};
};
var $author$project$EveOnline$ParseUserInterface$parseChatWindowStack = function (chatWindowStackUiNode) {
	var chatWindowNode = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('XmppChatWindow'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(chatWindowStackUiNode)));
	return {
		fv: A2($elm$core$Maybe$map, $author$project$EveOnline$ParseUserInterface$parseChatWindow, chatWindowNode),
		b: chatWindowStackUiNode
	};
};
var $author$project$EveOnline$ParseUserInterface$parseChatWindowStacksFromUITreeRoot = function (uiTreeRoot) {
	return A2(
		$elm$core$List$map,
		$author$project$EveOnline$ParseUserInterface$parseChatWindowStack,
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('ChatWindowStack'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot)));
};
var $author$project$EveOnline$ParseUserInterface$parseContextMenu = function (contextMenuUINode) {
	var entriesUINodes = A2(
		$elm$core$List$filter,
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.b;
			},
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.h0;
				},
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$toLower,
					$elm$core$String$contains('menuentry')))),
		$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(contextMenuUINode));
	var entries = A2(
		$elm$core$List$sortBy,
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.b;
			},
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.i;
				},
				function ($) {
					return $.nC;
				})),
		A2(
			$elm$core$List$map,
			function (entryUINode) {
				var text = A2(
					$elm$core$Maybe$withDefault,
					'',
					$elm$core$List$head(
						A2(
							$elm$core$List$sortBy,
							A2($elm$core$Basics$composeR, $elm$core$String$length, $elm$core$Basics$negate),
							A2(
								$elm$core$List$filterMap,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.b;
									},
									$author$project$EveOnline$ParseUserInterface$getDisplayText),
								$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(entryUINode)))));
				return {aD: text, b: entryUINode};
			},
			entriesUINodes));
	return {am: entries, b: contextMenuUINode};
};
var $author$project$EveOnline$ParseUserInterface$parseContextMenusFromUITreeRoot = function (uiTreeRoot) {
	var _v0 = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$map($elm$core$String$toLower),
						$elm$core$Basics$eq(
							$elm$core$Maybe$Just('l_menu'))))),
			$author$project$EveOnline$ParseUserInterface$listChildrenWithDisplayRegion(uiTreeRoot)));
	if (_v0.$ === 1) {
		return _List_Nil;
	} else {
		var layerMenu = _v0.a;
		return A2(
			$elm$core$List$map,
			$author$project$EveOnline$ParseUserInterface$parseContextMenu,
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$toLower,
							$elm$core$String$contains('menu')))),
				$author$project$EveOnline$ParseUserInterface$listChildrenWithDisplayRegion(layerMenu)));
	}
};
var $author$project$EveOnline$ParseUserInterface$parseDirectionalScannerWindowFromUITreeRoot = function (uiTreeRoot) {
	var _v0 = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('DirectionalScanner'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot)));
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var windowNode = _v0.a;
		var scrollNode = $elm$core$List$head(
			A2(
				$elm$core$List$sortBy,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.i;
					},
					A2(
						$elm$core$Basics$composeR,
						$author$project$EveOnline$ParseUserInterface$areaFromDisplayRegion,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$withDefault(0),
							$elm$core$Basics$negate))),
				A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.h0;
							},
							A2(
								$elm$core$Basics$composeR,
								$elm$core$String$toLower,
								$elm$core$String$contains('scroll')))),
					$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(windowNode))));
		var scanResultsNodes = A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('DirectionalScanResultEntry'))),
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Maybe$map, $author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion, scrollNode)));
		return $elm$core$Maybe$Just(
			{dc: scanResultsNodes, iA: scrollNode, b: windowNode});
	}
};
var $author$project$EveOnline$ParseUserInterface$DronesWindowEntryDrone = function (a) {
	return {$: 1, a: a};
};
var $author$project$EveOnline$ParseUserInterface$DronesWindowEntryGroup = function (a) {
	return {$: 0, a: a};
};
var $author$project$EveOnline$ParseUserInterface$enumerateDescendantsOfDronesGroup = function (group) {
	return A2(
		$elm$core$List$concatMap,
		function (child) {
			if (child.$ === 1) {
				return _List_fromArray(
					[child]);
			} else {
				var childGroup = child.a;
				return A2(
					$elm$core$List$cons,
					child,
					$author$project$EveOnline$ParseUserInterface$enumerateDescendantsOfDronesGroup(childGroup));
			}
		},
		group.cv);
};
var $elm_community$list_extra$List$Extra$takeWhile = function (predicate) {
	var takeWhileMemo = F2(
		function (memo, list) {
			takeWhileMemo:
			while (true) {
				if (!list.b) {
					return $elm$core$List$reverse(memo);
				} else {
					var x = list.a;
					var xs = list.b;
					if (predicate(x)) {
						var $temp$memo = A2($elm$core$List$cons, x, memo),
							$temp$list = xs;
						memo = $temp$memo;
						list = $temp$list;
						continue takeWhileMemo;
					} else {
						return $elm$core$List$reverse(memo);
					}
				}
			}
		});
	return takeWhileMemo(_List_Nil);
};
var $author$project$EveOnline$ParseUserInterface$dronesGroupTreesFromFlatListOfEntries = function (entriesBeforeOrdering) {
	var verticalOffsetFromEntry = function (entry) {
		if (entry.$ === 1) {
			var droneEntry = entry.a;
			return droneEntry.b.i.nC;
		} else {
			var groupEntry = entry.a;
			return groupEntry.aw.b.i.nC;
		}
	};
	var entriesOrderedVertically = A2($elm$core$List$sortBy, verticalOffsetFromEntry, entriesBeforeOrdering);
	return A2(
		$elm$core$Maybe$withDefault,
		_List_Nil,
		A2(
			$elm$core$Maybe$map,
			function (topmostGroupEntry) {
				var entriesUpToSibling = A2(
					$elm_community$list_extra$List$Extra$takeWhile,
					function (entry) {
						if (entry.$ === 1) {
							return true;
						} else {
							var group = entry.a;
							return _Utils_cmp(topmostGroupEntry.aw.b.i.nB, group.aw.b.i.nB - 3) < 0;
						}
					},
					A2(
						$elm_community$list_extra$List$Extra$dropWhile,
						A2(
							$elm$core$Basics$composeR,
							verticalOffsetFromEntry,
							function (offset) {
								return _Utils_cmp(
									offset,
									verticalOffsetFromEntry(
										$author$project$EveOnline$ParseUserInterface$DronesWindowEntryGroup(topmostGroupEntry))) < 1;
							}),
						entriesOrderedVertically));
				var childGroupTrees = $author$project$EveOnline$ParseUserInterface$dronesGroupTreesFromFlatListOfEntries(entriesUpToSibling);
				var childDrones = A2(
					$elm_community$list_extra$List$Extra$takeWhile,
					function (entry) {
						if (entry.$ === 1) {
							return true;
						} else {
							return false;
						}
					},
					entriesUpToSibling);
				var children = A2(
					$elm$core$List$sortBy,
					verticalOffsetFromEntry,
					$elm$core$List$concat(
						_List_fromArray(
							[
								childDrones,
								A2($elm$core$List$map, $author$project$EveOnline$ParseUserInterface$DronesWindowEntryGroup, childGroupTrees)
							])));
				var topmostGroupTree = {cv: children, aw: topmostGroupEntry.aw};
				var bottommostDescendantOffset = A2(
					$elm$core$Maybe$withDefault,
					verticalOffsetFromEntry(
						$author$project$EveOnline$ParseUserInterface$DronesWindowEntryGroup(topmostGroupTree)),
					$elm$core$List$maximum(
						A2(
							$elm$core$List$map,
							verticalOffsetFromEntry,
							$author$project$EveOnline$ParseUserInterface$enumerateDescendantsOfDronesGroup(topmostGroupTree))));
				var entriesBelow = A2(
					$elm_community$list_extra$List$Extra$dropWhile,
					A2(
						$elm$core$Basics$composeR,
						verticalOffsetFromEntry,
						function (offset) {
							return _Utils_cmp(offset, bottommostDescendantOffset) < 1;
						}),
					entriesOrderedVertically);
				return A2(
					$elm$core$List$cons,
					topmostGroupTree,
					$author$project$EveOnline$ParseUserInterface$dronesGroupTreesFromFlatListOfEntries(entriesBelow));
			},
			$elm$core$List$head(
				A2(
					$elm$core$List$filterMap,
					function (entry) {
						if (entry.$ === 1) {
							return $elm$core$Maybe$Nothing;
						} else {
							var group = entry.a;
							return $elm$core$Maybe$Just(group);
						}
					},
					entriesOrderedVertically))));
};
var $author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTextsWithRegion = function (uiNode) {
	return A2(
		$elm$core$List$filterMap,
		function (descendant) {
			var displayText = A2(
				$elm$core$Maybe$withDefault,
				'',
				$author$project$EveOnline$ParseUserInterface$getDisplayText(descendant.b));
			return (0 < $elm$core$String$length(displayText)) ? $elm$core$Maybe$Just(
				_Utils_Tuple2(displayText, descendant)) : $elm$core$Maybe$Nothing;
		},
		A2(
			$elm$core$List$cons,
			uiNode,
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiNode)));
};
var $author$project$EveOnline$ParseUserInterface$parseDronesWindowDroneEntry = function (droneEntryNode) {
	var mainText = $elm$core$List$head(
		A2(
			$elm$core$List$map,
			$elm$core$Tuple$first,
			A2(
				$elm$core$List$sortBy,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Tuple$second,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.i;
						},
						A2(
							$elm$core$Basics$composeR,
							$author$project$EveOnline$ParseUserInterface$areaFromDisplayRegion,
							$elm$core$Maybe$withDefault(0)))),
				$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTextsWithRegion(droneEntryNode))));
	var gaugeValuePercentFromContainerName = function (containerName) {
		return A2(
			$elm$core$Maybe$andThen,
			function (gaugeNode) {
				var gaudeDescendantFromName = function (gaugeDescendantName) {
					return $elm$core$List$head(
						A2(
							$elm$core$List$filter,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.b;
								},
								A2(
									$elm$core$Basics$composeR,
									$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
									$elm$core$Basics$eq(
										$elm$core$Maybe$Just(gaugeDescendantName)))),
							$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(gaugeNode)));
				};
				return A2(
					$elm$core$Maybe$andThen,
					function (gaugeBar) {
						return A2(
							$elm$core$Maybe$map,
							function (droneGaugeBarDmg) {
								return (((gaugeBar.i.u - droneGaugeBarDmg.i.u) * 100) / gaugeBar.i.u) | 0;
							},
							gaudeDescendantFromName('droneGaugeBarDmg'));
					},
					gaudeDescendantFromName('droneGaugeBar'));
			},
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						A2(
							$elm$core$Basics$composeR,
							$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
							$elm$core$Basics$eq(
								$elm$core$Maybe$Just(containerName)))),
					$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(droneEntryNode))));
	};
	var hitpointsPercent = A2(
		$elm$core$Maybe$andThen,
		function (shieldPercent) {
			return A2(
				$elm$core$Maybe$andThen,
				function (armorPercent) {
					return A2(
						$elm$core$Maybe$map,
						function (structPercent) {
							return {dy: armorPercent, et: shieldPercent, ew: structPercent};
						},
						gaugeValuePercentFromContainerName('gauge_struct'));
				},
				gaugeValuePercentFromContainerName('gauge_armor'));
		},
		gaugeValuePercentFromContainerName('gauge_shield'));
	return {cM: hitpointsPercent, a6: mainText, b: droneEntryNode};
};
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $elm$core$Result$fromMaybe = F2(
	function (err, maybe) {
		if (!maybe.$) {
			var v = maybe.a;
			return $elm$core$Result$Ok(v);
		} else {
			return $elm$core$Result$Err(err);
		}
	});
var $author$project$EveOnline$ParseUserInterface$parseQuantityFromDroneGroupTitleText = function (droneGroupTitleText) {
	var _v0 = A2(
		$elm$core$List$drop,
		1,
		A2($elm$core$String$split, '(', droneGroupTitleText));
	if (!_v0.b) {
		return $elm$core$Result$Ok($elm$core$Maybe$Nothing);
	} else {
		if (!_v0.b.b) {
			var textAfterOpeningParenthesis = _v0.a;
			var _v1 = $elm$core$List$head(
				A2($elm$core$String$split, ')', textAfterOpeningParenthesis));
			if (_v1.$ === 1) {
				return $elm$core$Result$Err('Missing closing parens');
			} else {
				var textInParens = _v1.a;
				var _v2 = $elm_community$result_extra$Result$Extra$combine(
					A2(
						$elm$core$List$map,
						function (numberText) {
							return A2(
								$elm$core$Result$fromMaybe,
								'Failed to parse to integer from \'' + (numberText + '\''),
								$elm$core$String$toInt(numberText));
						},
						A2(
							$elm$core$List$map,
							$elm$core$String$trim,
							A2($elm$core$String$split, '/', textInParens))));
				if (_v2.$ === 1) {
					var err = _v2.a;
					return $elm$core$Result$Err('Failed to parse numbers in parentheses: ' + err);
				} else {
					var integersInParens = _v2.a;
					_v3$2:
					while (true) {
						if (integersInParens.b) {
							if (!integersInParens.b.b) {
								var singleNumber = integersInParens.a;
								return $elm$core$Result$Ok(
									$elm$core$Maybe$Just(
										{dI: singleNumber, b0: $elm$core$Maybe$Nothing}));
							} else {
								if (!integersInParens.b.b.b) {
									var firstNumber = integersInParens.a;
									var _v4 = integersInParens.b;
									var secondNumber = _v4.a;
									return $elm$core$Result$Ok(
										$elm$core$Maybe$Just(
											{
												dI: firstNumber,
												b0: $elm$core$Maybe$Just(secondNumber)
											}));
								} else {
									break _v3$2;
								}
							}
						} else {
							break _v3$2;
						}
					}
					return $elm$core$Result$Err('Found unexpected number of numbers in parentheses.');
				}
			}
		} else {
			return $elm$core$Result$Err('Found unexpected number of parentheses.');
		}
	}
};
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (!result.$) {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $author$project$EveOnline$ParseUserInterface$parseDronesWindowDroneGroupHeader = function (groupHeaderUiNode) {
	var _v0 = $elm$core$List$head(
		A2(
			$elm$core$List$map,
			$elm$core$Tuple$first,
			A2(
				$elm$core$List$sortBy,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Tuple$second,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.i;
						},
						A2(
							$elm$core$Basics$composeR,
							$author$project$EveOnline$ParseUserInterface$areaFromDisplayRegion,
							$elm$core$Maybe$withDefault(0)))),
				$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTextsWithRegion(groupHeaderUiNode))));
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var mainText = _v0.a;
		var quantityFromTitle = A2(
			$elm$core$Result$withDefault,
			$elm$core$Maybe$Nothing,
			$author$project$EveOnline$ParseUserInterface$parseQuantityFromDroneGroupTitleText(mainText));
		return $elm$core$Maybe$Just(
			{
				a6: $elm$core$Maybe$Just(mainText),
				h2: quantityFromTitle,
				b: groupHeaderUiNode
			});
	}
};
var $author$project$EveOnline$ParseUserInterface$parseDronesWindowFromUITreeRoot = function (uiTreeRoot) {
	var _v0 = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$member,
						$elm$core$Basics$apR(
							_List_fromArray(
								['DroneView', 'DronesWindow']))))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot)));
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var windowNode = _v0.a;
		var droneGroupHeaders = A2(
			$elm$core$List$filterMap,
			$author$project$EveOnline$ParseUserInterface$parseDronesWindowDroneGroupHeader,
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$String$contains('DroneGroupHeader'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(windowNode)));
		var droneEntries = A2(
			$elm$core$List$map,
			$author$project$EveOnline$ParseUserInterface$parseDronesWindowDroneEntry,
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						function (pythonTypeName) {
							return A2($elm$core$String$startsWith, 'Drone', pythonTypeName) && A2($elm$core$String$endsWith, 'Entry', pythonTypeName);
						})),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(windowNode)));
		var droneGroups = $author$project$EveOnline$ParseUserInterface$dronesGroupTreesFromFlatListOfEntries(
			$elm$core$List$concat(
				_List_fromArray(
					[
						A2($elm$core$List$map, $author$project$EveOnline$ParseUserInterface$DronesWindowEntryDrone, droneEntries),
						A2(
						$elm$core$List$map,
						$author$project$EveOnline$ParseUserInterface$DronesWindowEntryGroup,
						A2(
							$elm$core$List$map,
							function (header) {
								return {cv: _List_Nil, aw: header};
							},
							droneGroupHeaders))
					])));
		var droneGroupFromHeaderTextPart = function (headerTextPart) {
			return $elm$core$List$head(
				A2(
					$elm$core$List$sortBy,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.aw;
						},
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.a6;
							},
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Maybe$map($elm$core$String$length),
								$elm$core$Maybe$withDefault(999)))),
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.aw;
							},
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.a6;
								},
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Maybe$withDefault(''),
									A2(
										$elm$core$Basics$composeR,
										$elm$core$String$toLower,
										$elm$core$String$contains(
											$elm$core$String$toLower(headerTextPart)))))),
						droneGroups)));
		};
		return $elm$core$Maybe$Just(
			{
				fO: droneGroupFromHeaderTextPart('in bay'),
				fP: droneGroupFromHeaderTextPart('in space'),
				fQ: droneGroups,
				b: windowNode
			});
	}
};
var $author$project$EveOnline$ParseUserInterface$parseFittingWindow = function (windowUINode) {
	return {b: windowUINode};
};
var $author$project$EveOnline$ParseUserInterface$parseFittingWindowFromUITreeRoot = function (uiTreeRoot) {
	return A2(
		$elm$core$Maybe$map,
		$author$project$EveOnline$ParseUserInterface$parseFittingWindow,
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('FittingWindow'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot))));
};
var $author$project$EveOnline$ParseUserInterface$parseFleetWindow = function (windowUINode) {
	var fleetMembers = A2(
		$elm$core$List$filter,
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.b;
			},
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.h0;
				},
				$elm$core$Basics$eq('FleetMember'))),
		$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(windowUINode));
	return {gb: fleetMembers, b: windowUINode};
};
var $author$project$EveOnline$ParseUserInterface$parseFleetWindowFromUITreeRoot = function (uiTreeRoot) {
	return A2(
		$elm$core$Maybe$map,
		$author$project$EveOnline$ParseUserInterface$parseFleetWindow,
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('FleetWindow'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot))));
};
var $author$project$EveOnline$ParseUserInterface$parseHeatStatusTooltip = function (tooltipNode) {
	var parsePercentFromPrefix = function (prefix) {
		return A2(
			$elm$core$Maybe$andThen,
			$elm$core$String$toInt,
			A2(
				$elm$core$Maybe$andThen,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$split('%'),
					$elm$core$List$head),
				A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$split(' '),
						A2(
							$elm$core$Basics$composeR,
							$elm$core$List$filter(
								A2($elm$core$Basics$composeR, $elm$core$String$isEmpty, $elm$core$Basics$not)),
							A2(
								$elm$core$Basics$composeR,
								$elm$core$List$drop(1),
								$elm$core$String$join('')))),
					$elm$core$List$head(
						A2(
							$elm$core$List$filter,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$String$toLower,
								$elm$core$String$startsWith(prefix)),
							A2(
								$elm$core$List$map,
								$elm$core$String$trim,
								$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTexts(tooltipNode.b)))))));
	};
	return {
		gw: parsePercentFromPrefix('high'),
		g9: parsePercentFromPrefix('low'),
		hh: parsePercentFromPrefix('medium'),
		b: tooltipNode
	};
};
var $author$project$EveOnline$ParseUserInterface$parseHeatStatusTooltipFromUITreeRoot = function (uiTreeRoot) {
	return A2(
		$elm$core$Maybe$map,
		$author$project$EveOnline$ParseUserInterface$parseHeatStatusTooltip,
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTextsWithRegion,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$sortBy(
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Tuple$second,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.i;
									},
									function ($) {
										return $.nC;
									}))),
						A2(
							$elm$core$Basics$composeR,
							$elm$core$List$head,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Maybe$map(
									A2(
										$elm$core$Basics$composeR,
										$elm$core$Tuple$first,
										$elm$core$String$contains('Heat Status'))),
								$elm$core$Maybe$withDefault(false))))),
				A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.h0;
							},
							$elm$core$Basics$eq('TooltipPanel'))),
					$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot)))));
};
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $author$project$EveOnline$MemoryReading$countDescendantsInUITreeNode = function (parent) {
	return $elm$core$List$sum(
		A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				$author$project$EveOnline$MemoryReading$countDescendantsInUITreeNode,
				$elm$core$Basics$add(1)),
			A2(
				$elm$core$List$map,
				$author$project$EveOnline$MemoryReading$unwrapUITreeNodeChild,
				A2($elm$core$Maybe$withDefault, _List_Nil, parent.cv))));
};
var $author$project$EveOnline$ParseUserInterface$parseInfoPanelAgentMissionsFromInfoPanelContainer = function (infoPanelContainerNode) {
	var _v0 = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('InfoPanelAgentMissions'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(infoPanelContainerNode)));
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var infoPanelNode = _v0.a;
		var entries = A2(
			$elm$core$List$map,
			function (uiNode) {
				return {b: uiNode};
			},
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('MissionEntry'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(infoPanelNode)));
		return $elm$core$Maybe$Just(
			{am: entries, b: infoPanelNode});
	}
};
var $author$project$EveOnline$ParseUserInterface$getTexturePathFromDictEntries = $author$project$EveOnline$ParseUserInterface$getStringPropertyFromDictEntries('texturePath');
var $author$project$EveOnline$ParseUserInterface$parseInfoPanelIconsFromInfoPanelContainer = function (infoPanelContainerNode) {
	var _v0 = $elm$core$List$head(
		A2(
			$elm$core$List$sortBy,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.i;
				},
				function ($) {
					return $.nC;
				}),
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$map(
								$elm$core$Basics$eq('iconCont')),
							$elm$core$Maybe$withDefault(false)))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(infoPanelContainerNode))));
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var iconContainerNode = _v0.a;
		var iconNodeFromTexturePathEnd = function (texturePathEnd) {
			return $elm$core$List$head(
				A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						A2(
							$elm$core$Basics$composeR,
							$author$project$EveOnline$ParseUserInterface$getTexturePathFromDictEntries,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Maybe$map(
									$elm$core$String$endsWith(texturePathEnd)),
								$elm$core$Maybe$withDefault(false)))),
					$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(iconContainerNode)));
		};
		return $elm$core$Maybe$Just(
			{
				e0: iconNodeFromTexturePathEnd('Missions.png'),
				fK: iconNodeFromTexturePathEnd('dailyChallenge.png'),
				g8: iconNodeFromTexturePathEnd('LocationInfo.png'),
				ip: iconNodeFromTexturePathEnd('Route.png'),
				iB: iconNodeFromTexturePathEnd('search.png'),
				b: iconContainerNode
			});
	}
};
var $author$project$EveOnline$ParseUserInterface$getSubstringBetweenXmlTagsAfterMarker = function (marker) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$String$split(marker),
		A2(
			$elm$core$Basics$composeR,
			$elm$core$List$drop(1),
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$head,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Maybe$andThen(
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$split('>'),
							A2(
								$elm$core$Basics$composeR,
								$elm$core$List$drop(1),
								$elm$core$List$head))),
					$elm$core$Maybe$andThen(
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$split('<'),
							$elm$core$List$head))))));
};
var $elm_community$maybe_extra$Maybe$Extra$oneOf = F2(
	function (fmbs, a) {
		oneOf:
		while (true) {
			if (!fmbs.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var fmb = fmbs.a;
				var rest = fmbs.b;
				var _v1 = fmb(a);
				if (!_v1.$) {
					var b = _v1.a;
					return $elm$core$Maybe$Just(b);
				} else {
					var $temp$fmbs = rest,
						$temp$a = a;
					fmbs = $temp$fmbs;
					a = $temp$a;
					continue oneOf;
				}
			}
		}
	});
var $author$project$EveOnline$ParseUserInterface$parseCurrentSolarSystemFromUINodeText = $elm_community$maybe_extra$Maybe$Extra$oneOf(
	_List_fromArray(
		[
			$author$project$EveOnline$ParseUserInterface$getSubstringBetweenXmlTagsAfterMarker('alt=\'Current Solar System\''),
			$author$project$EveOnline$ParseUserInterface$getSubstringBetweenXmlTagsAfterMarker('alt=\"Current Solar System\"')
		]));
var $author$project$EveOnline$ParseUserInterface$parseCurrentStationNameFromInfoPanelLocationInfoLabelText = A2(
	$elm$core$Basics$composeR,
	$author$project$EveOnline$ParseUserInterface$getSubstringBetweenXmlTagsAfterMarker('alt=\'Current Station\''),
	$elm$core$Maybe$map($elm$core$String$trim));
var $elm$core$String$toFloat = _String_toFloat;
var $author$project$EveOnline$ParseUserInterface$parseSecurityStatusPercentFromUINodeText = A2(
	$elm$core$Basics$composeR,
	$elm_community$maybe_extra$Maybe$Extra$oneOf(
		_List_fromArray(
			[
				$author$project$EveOnline$ParseUserInterface$getSubstringBetweenXmlTagsAfterMarker('hint=\'Security status\''),
				$author$project$EveOnline$ParseUserInterface$getSubstringBetweenXmlTagsAfterMarker('hint=\"Security status\"><color=')
			])),
	A2(
		$elm$core$Basics$composeR,
		$elm$core$Maybe$andThen(
			A2($elm$core$Basics$composeR, $elm$core$String$trim, $elm$core$String$toFloat)),
		$elm$core$Maybe$map(
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Basics$mul(100),
				$elm$core$Basics$round))));
var $author$project$EveOnline$ParseUserInterface$parseInfoPanelLocationInfoFromInfoPanelContainer = function (infoPanelContainerNode) {
	var _v0 = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('InfoPanelLocationInfo'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(infoPanelContainerNode)));
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var infoPanelNode = _v0.a;
		var securityStatusPercent = $elm$core$List$head(
			A2(
				$elm$core$List$filterMap,
				$author$project$EveOnline$ParseUserInterface$parseSecurityStatusPercentFromUINodeText,
				$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTexts(infoPanelNode.b)));
		var maybeListSurroundingsButton = $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('ListSurroundingsBtn'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(infoPanelNode)));
		var expandedContent = A2(
			$elm$core$Maybe$map,
			function (expandedContainer) {
				return {
					fJ: $elm$core$List$head(
						A2(
							$elm$core$List$filterMap,
							$author$project$EveOnline$ParseUserInterface$parseCurrentStationNameFromInfoPanelLocationInfoLabelText,
							$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTexts(expandedContainer.b)))
				};
			},
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (uiNode) {
						return A2($elm$core$String$contains, 'Container', uiNode.b.h0) && A2(
							$elm$core$String$contains,
							'mainCont',
							A2(
								$elm$core$Maybe$withDefault,
								'',
								$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries(uiNode.b)));
					},
					$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(infoPanelNode))));
		var currentSolarSystemName = A2(
			$elm$core$Maybe$map,
			$elm$core$String$trim,
			$elm$core$List$head(
				A2(
					$elm$core$List$filterMap,
					$author$project$EveOnline$ParseUserInterface$parseCurrentSolarSystemFromUINodeText,
					$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTexts(infoPanelNode.b))));
		return A2(
			$elm$core$Maybe$map,
			function (listSurroundingsButton) {
				return {fI: currentSolarSystemName, f1: expandedContent, g6: listSurroundingsButton, iC: securityStatusPercent, b: infoPanelNode};
			},
			maybeListSurroundingsButton);
	}
};
var $author$project$EveOnline$ParseUserInterface$parseInfoPanelRouteFromInfoPanelContainer = function (infoPanelContainerNode) {
	var _v0 = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('InfoPanelRoute'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(infoPanelContainerNode)));
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var infoPanelRouteNode = _v0.a;
		var routeElementMarker = A2(
			$elm$core$List$map,
			function (uiNode) {
				return {b: uiNode};
			},
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('AutopilotDestinationIcon'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(infoPanelRouteNode)));
		return $elm$core$Maybe$Just(
			{iq: routeElementMarker, b: infoPanelRouteNode});
	}
};
var $author$project$EveOnline$ParseUserInterface$parseInfoPanelContainerFromUIRoot = function (uiTreeRoot) {
	var _v0 = $elm$core$List$head(
		A2(
			$elm$core$List$sortBy,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2($elm$core$Basics$composeR, $author$project$EveOnline$MemoryReading$countDescendantsInUITreeNode, $elm$core$Basics$negate)),
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('InfoPanelContainer'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot))));
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var containerNode = _v0.a;
		return $elm$core$Maybe$Just(
			{
				gB: $author$project$EveOnline$ParseUserInterface$parseInfoPanelIconsFromInfoPanelContainer(containerNode),
				gI: $author$project$EveOnline$ParseUserInterface$parseInfoPanelAgentMissionsFromInfoPanelContainer(containerNode),
				gK: $author$project$EveOnline$ParseUserInterface$parseInfoPanelLocationInfoFromInfoPanelContainer(containerNode),
				gL: $author$project$EveOnline$ParseUserInterface$parseInfoPanelRouteFromInfoPanelContainer(containerNode),
				b: containerNode
			});
	}
};
var $author$project$EveOnline$ParseUserInterface$InventoryItemsListView = function (a) {
	return {$: 0, a: a};
};
var $author$project$EveOnline$ParseUserInterface$InventoryItemsNotListView = function (a) {
	return {$: 1, a: a};
};
var $author$project$EveOnline$ParseUserInterface$getContainedTreeViewEntryRootNodes = function (parentNode) {
	var leftTreeEntriesAllNodes = A2(
		$elm$core$List$filter,
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.b;
			},
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.h0;
				},
				$elm$core$String$startsWith('TreeViewEntry'))),
		$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(parentNode));
	var isContainedInTreeEntry = function (candidate) {
		return A2(
			$elm$core$List$member,
			candidate,
			A2($elm$core$List$concatMap, $author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion, leftTreeEntriesAllNodes));
	};
	return A2(
		$elm$core$List$filter,
		A2($elm$core$Basics$composeR, isContainedInTreeEntry, $elm$core$Basics$not),
		leftTreeEntriesAllNodes);
};
var $author$project$EveOnline$ParseUserInterface$parseNumberTruncatingAfterOptionalDecimalSeparator = function (numberDisplayText) {
	var expectedSeparators = _List_fromArray(
		[',', '.', '’', ' ', '\u00A0', '\u202F']);
	var groupsTexts = A3(
		$elm$core$List$foldl,
		function (separator) {
			return $elm$core$List$concatMap(
				$elm$core$String$split(separator));
		},
		_List_fromArray(
			[
				$elm$core$String$trim(numberDisplayText)
			]),
		expectedSeparators);
	var lastGroupIsFraction = function () {
		var _v0 = $elm$core$List$reverse(groupsTexts);
		if (_v0.b && _v0.b.b) {
			var lastGroupText = _v0.a;
			var _v1 = _v0.b;
			return $elm$core$String$length(lastGroupText) < 3;
		} else {
			return false;
		}
	}();
	var integerText = A2(
		$elm$core$String$join,
		'',
		lastGroupIsFraction ? $elm$core$List$reverse(
			A2(
				$elm$core$List$drop,
				1,
				$elm$core$List$reverse(groupsTexts))) : groupsTexts);
	return A2(
		$elm$core$Result$fromMaybe,
		'Failed to parse to integer: ' + integerText,
		$elm$core$String$toInt(integerText));
};
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $author$project$EveOnline$ParseUserInterface$parseInventoryCapacityGaugeText = function (capacityText) {
	var parseMaybeNumber = A2(
		$elm$core$Basics$composeR,
		$elm$core$Maybe$map(
			A2(
				$elm$core$Basics$composeR,
				$elm$core$String$trim,
				A2(
					$elm$core$Basics$composeR,
					$author$project$EveOnline$ParseUserInterface$parseNumberTruncatingAfterOptionalDecimalSeparator,
					$elm$core$Result$map($elm$core$Maybe$Just)))),
		$elm$core$Maybe$withDefault(
			$elm$core$Result$Ok($elm$core$Maybe$Nothing)));
	var continueWithTexts = function (_v8) {
		var usedText = _v8.eD;
		var maybeMaximumText = _v8.d7;
		var maybeSelectedText = _v8.d8;
		var _v5 = $author$project$EveOnline$ParseUserInterface$parseNumberTruncatingAfterOptionalDecimalSeparator(usedText);
		if (_v5.$ === 1) {
			var parseNumberError = _v5.a;
			return $elm$core$Result$Err('Failed to parse used number: ' + parseNumberError);
		} else {
			var used = _v5.a;
			var _v6 = parseMaybeNumber(maybeMaximumText);
			if (_v6.$ === 1) {
				var parseNumberError = _v6.a;
				return $elm$core$Result$Err('Failed to parse maximum number: ' + parseNumberError);
			} else {
				var maximum = _v6.a;
				var _v7 = parseMaybeNumber(maybeSelectedText);
				if (_v7.$ === 1) {
					var parseNumberError = _v7.a;
					return $elm$core$Result$Err('Failed to parse selected number: ' + parseNumberError);
				} else {
					var selected = _v7.a;
					return $elm$core$Result$Ok(
						{b0: maximum, iF: selected, ju: used});
				}
			}
		}
	};
	var continueAfterSeparatingBySlash = function (_v4) {
		var beforeSlashText = _v4.dA;
		var afterSlashMaybeText = _v4.dt;
		var _v2 = A2(
			$elm$core$String$split,
			')',
			$elm$core$String$trim(beforeSlashText));
		_v2$2:
		while (true) {
			if (_v2.b) {
				if (!_v2.b.b) {
					var onlyUsedText = _v2.a;
					return continueWithTexts(
						{d7: afterSlashMaybeText, d8: $elm$core$Maybe$Nothing, eD: onlyUsedText});
				} else {
					if (!_v2.b.b.b) {
						var firstPart = _v2.a;
						var _v3 = _v2.b;
						var secondPart = _v3.a;
						return continueWithTexts(
							{
								d7: afterSlashMaybeText,
								d8: $elm$core$Maybe$Just(
									A3($elm$core$String$replace, '(', '', firstPart)),
								eD: secondPart
							});
					} else {
						break _v2$2;
					}
				}
			} else {
				break _v2$2;
			}
		}
		return $elm$core$Result$Err('Unexpected number of components in text before slash \'' + (beforeSlashText + '\''));
	};
	var _v0 = A2(
		$elm$core$String$split,
		'/',
		A3($elm$core$String$replace, 'm³', '', capacityText));
	_v0$2:
	while (true) {
		if (_v0.b) {
			if (!_v0.b.b) {
				var withoutSlash = _v0.a;
				return continueAfterSeparatingBySlash(
					{dt: $elm$core$Maybe$Nothing, dA: withoutSlash});
			} else {
				if (!_v0.b.b.b) {
					var partBeforeSlash = _v0.a;
					var _v1 = _v0.b;
					var partAfterSlash = _v1.a;
					return continueAfterSeparatingBySlash(
						{
							dt: $elm$core$Maybe$Just(partAfterSlash),
							dA: partBeforeSlash
						});
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Result$Err('Unexpected number of components in capacityText \'' + (capacityText + '\''));
};
var $author$project$EveOnline$ParseUserInterface$InventoryWindowLeftTreeEntryChild = $elm$core$Basics$identity;
var $author$project$EveOnline$ParseUserInterface$parseInventoryWindowTreeViewEntry = function (treeEntryNode) {
	var topContNode = $elm$core$List$head(
		A2(
			$elm$core$List$sortBy,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.i;
				},
				function ($) {
					return $.nC;
				}),
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$map(
								$elm$core$String$startsWith('topCont_')),
							$elm$core$Maybe$withDefault(false)))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(treeEntryNode))));
	var toggleBtn = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$map(
							$elm$core$Basics$eq('toggleBtn')),
						$elm$core$Maybe$withDefault(false)))),
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Maybe$map, $author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion, topContNode))));
	var text = A2(
		$elm$core$Maybe$withDefault,
		'',
		A2(
			$elm$core$Maybe$map,
			$elm$core$Tuple$first,
			$elm$core$List$head(
				A2(
					$elm$core$List$sortBy,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Tuple$second,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.i;
							},
							function ($) {
								return $.nC;
							})),
					A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2($elm$core$Maybe$map, $author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTextsWithRegion, topContNode))))));
	var childrenNodes = $author$project$EveOnline$ParseUserInterface$getContainedTreeViewEntryRootNodes(treeEntryNode);
	var children = A2(
		$elm$core$List$map,
		A2($elm$core$Basics$composeR, $author$project$EveOnline$ParseUserInterface$parseInventoryWindowTreeViewEntry, $elm$core$Basics$identity),
		childrenNodes);
	return {cv: children, iE: topContNode, aD: text, jh: toggleBtn, b: treeEntryNode};
};
var $author$project$EveOnline$ParseUserInterface$parseInventoryWindow = function (windowUiNode) {
	var selectedContainerCapacityGaugeNode = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$String$contains('CapacityGauge'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(windowUiNode)));
	var selectedContainerCapacityGauge = A2(
		$elm$core$Maybe$map,
		$author$project$EveOnline$ParseUserInterface$parseInventoryCapacityGaugeText,
		$elm$core$List$head(
			A2(
				$elm$core$List$sortBy,
				A2($elm$core$Basics$composeR, $elm$core$String$length, $elm$core$Basics$negate),
				A2(
					$elm$core$List$filterMap,
					$author$project$EveOnline$ParseUserInterface$getDisplayText,
					A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2(
							$elm$core$Maybe$map,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.b;
								},
								$author$project$EveOnline$MemoryReading$listDescendantsInUITreeNode),
							selectedContainerCapacityGaugeNode))))));
	var rightContainerNode = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			function (uiNode) {
				return (uiNode.b.h0 === 'Container') && A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$elm$core$String$contains('right'),
						$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries(uiNode.b)));
			},
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(windowUiNode)));
	var subCaptionLabelText = $elm$core$List$head(
		A2(
			$elm$core$List$concatMap,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTexts),
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$map(
								$elm$core$String$startsWith('subCaptionLabel')),
							$elm$core$Maybe$withDefault(false)))),
				A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2($elm$core$Maybe$map, $author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion, rightContainerNode)))));
	var maybeSelectedContainerInventoryNode = A2(
		$elm$core$Maybe$andThen,
		A2(
			$elm$core$Basics$composeR,
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$filter(
					function (uiNode) {
						return A2(
							$elm$core$List$member,
							uiNode.b.h0,
							_List_fromArray(
								['ShipCargo', 'ShipDroneBay', 'ShipGeneralMiningHold', 'StationItems', 'ShipFleetHangar', 'StructureItemHangar']));
					}),
				$elm$core$List$head)),
		rightContainerNode);
	var selectedContainerInventory = A2(
		$elm$core$Maybe$map,
		function (selectedContainerInventoryNode) {
			var scrollControlsNode = $elm$core$List$head(
				A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.h0;
							},
							$elm$core$String$contains('ScrollControls'))),
					$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(selectedContainerInventoryNode)));
			var notListViewItemNodes = A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$String$contains('InvItem'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(selectedContainerInventoryNode));
			var listViewItemNodes = A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('Item'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(selectedContainerInventoryNode));
			var itemsView = (0 < $elm$core$List$length(listViewItemNodes)) ? $elm$core$Maybe$Just(
				$author$project$EveOnline$ParseUserInterface$InventoryItemsListView(
					{cR: listViewItemNodes})) : ((0 < $elm$core$List$length(notListViewItemNodes)) ? $elm$core$Maybe$Just(
				$author$project$EveOnline$ParseUserInterface$InventoryItemsNotListView(
					{cR: notListViewItemNodes})) : $elm$core$Maybe$Nothing);
			return {
				gY: itemsView,
				bC: A2($elm$core$Maybe$map, $author$project$EveOnline$ParseUserInterface$parseScrollControls, scrollControlsNode),
				b: selectedContainerInventoryNode
			};
		},
		maybeSelectedContainerInventoryNode);
	var leftTreeEntriesRootNodes = $author$project$EveOnline$ParseUserInterface$getContainedTreeViewEntryRootNodes(windowUiNode);
	var leftTreeEntries = A2($elm$core$List$map, $author$project$EveOnline$ParseUserInterface$parseInventoryWindowTreeViewEntry, leftTreeEntriesRootNodes);
	var buttonToSwitchToListView = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			function (uiNode) {
				return A2($elm$core$String$contains, 'ButtonIcon', uiNode.b.h0) && A2(
					$elm$core$String$endsWith,
					'38_16_190.png',
					A2(
						$elm$core$Maybe$withDefault,
						'',
						$author$project$EveOnline$ParseUserInterface$getTexturePathFromDictEntries(uiNode.b)));
			},
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Maybe$map, $author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion, rightContainerNode))));
	return {fl: buttonToSwitchToListView, g3: leftTreeEntries, iG: selectedContainerCapacityGauge, iH: selectedContainerInventory, i3: subCaptionLabelText, b: windowUiNode};
};
var $author$project$EveOnline$ParseUserInterface$parseInventoryWindowsFromUITreeRoot = function (uiTreeRoot) {
	return A2(
		$elm$core$List$map,
		$author$project$EveOnline$ParseUserInterface$parseInventoryWindow,
		A2(
			$elm$core$List$filter,
			function (uiNode) {
				return A2(
					$elm$core$List$member,
					uiNode.b.h0,
					_List_fromArray(
						['InventoryPrimary', 'ActiveShipCargo']));
			},
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot)));
};
var $author$project$EveOnline$ParseUserInterface$parseKeyActivationWindow = function (windowUiNode) {
	var activateButton = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('ActivateButton'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(windowUiNode)));
	return {eT: activateButton, b: windowUiNode};
};
var $author$project$EveOnline$ParseUserInterface$parseKeyActivationWindowFromUITreeRoot = function (uiTreeRoot) {
	return A2(
		$elm$core$Maybe$map,
		$author$project$EveOnline$ParseUserInterface$parseKeyActivationWindow,
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('KeyActivationWindow'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot))));
};
var $author$project$EveOnline$ParseUserInterface$parseLayerAbovemainFromUITreeRoot = function (uiTreeRoot) {
	return $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
					$elm$core$Basics$eq(
						$elm$core$Maybe$Just('l_abovemain')))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot)));
};
var $author$project$EveOnline$ParseUserInterface$parseMarketOrdersWindow = function (windowUINode) {
	return {b: windowUINode};
};
var $author$project$EveOnline$ParseUserInterface$parseMarketOrdersWindowFromUITreeRoot = function (uiTreeRoot) {
	return A2(
		$elm$core$Maybe$map,
		$author$project$EveOnline$ParseUserInterface$parseMarketOrdersWindow,
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('MarketOrdersWnd'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot))));
};
var $author$project$EveOnline$ParseUserInterface$parseMessageBox = function (uiNode) {
	var buttons = A2(
		$elm$core$List$map,
		function (buttonNode) {
			return {
				a6: $elm$core$List$head(
					A2(
						$elm$core$List$map,
						$elm$core$Tuple$first,
						A2(
							$elm$core$List$sortBy,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Tuple$second,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.i;
									},
									A2(
										$elm$core$Basics$composeR,
										$author$project$EveOnline$ParseUserInterface$areaFromDisplayRegion,
										$elm$core$Maybe$withDefault(0)))),
							$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTextsWithRegion(buttonNode)))),
				b: buttonNode
			};
		},
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$contains('ButtonGroup'),
						$elm$core$Basics$not))),
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$String$contains('Button'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiNode))));
	var buttonGroup = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$String$contains('ButtonGroup'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiNode)));
	return {fk: buttonGroup, fm: buttons, b: uiNode};
};
var $author$project$EveOnline$ParseUserInterface$parseMessageBoxesFromUITreeRoot = function (uiTreeRoot) {
	return A2(
		$elm$core$List$map,
		$author$project$EveOnline$ParseUserInterface$parseMessageBox,
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('MessageBox'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot)));
};
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {h: index, b$: match, lY: number, m1: submatches};
	});
var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{kk: false, lW: false},
		string);
};
var $elm$core$String$toUpper = _String_toUpper;
var $author$project$Common$EffectOnWindow$VirtualKeyCodeFromInt = $elm$core$Basics$identity;
var $author$project$Common$EffectOnWindow$vkey_F1 = 112;
var $author$project$Common$EffectOnWindow$vkey_F10 = 121;
var $author$project$Common$EffectOnWindow$vkey_F11 = 122;
var $author$project$Common$EffectOnWindow$vkey_F12 = 123;
var $author$project$Common$EffectOnWindow$vkey_F2 = 113;
var $author$project$Common$EffectOnWindow$vkey_F3 = 114;
var $author$project$Common$EffectOnWindow$vkey_F4 = 115;
var $author$project$Common$EffectOnWindow$vkey_F5 = 116;
var $author$project$Common$EffectOnWindow$vkey_F6 = 117;
var $author$project$Common$EffectOnWindow$vkey_F7 = 118;
var $author$project$Common$EffectOnWindow$vkey_F8 = 119;
var $author$project$Common$EffectOnWindow$vkey_F9 = 120;
var $author$project$Common$EffectOnWindow$vkey_LCONTROL = 162;
var $author$project$Common$EffectOnWindow$vkey_LMENU = 164;
var $author$project$Common$EffectOnWindow$vkey_LSHIFT = 160;
var $author$project$EveOnline$ParseUserInterface$parseKeyShortcutText = function (keyText) {
	return A2(
		$elm$core$Dict$get,
		$elm$core$String$toUpper(keyText),
		$elm$core$Dict$fromList(
			_List_fromArray(
				[
					_Utils_Tuple2('CTRL', $author$project$Common$EffectOnWindow$vkey_LCONTROL),
					_Utils_Tuple2('STRG', $author$project$Common$EffectOnWindow$vkey_LCONTROL),
					_Utils_Tuple2('ALT', $author$project$Common$EffectOnWindow$vkey_LMENU),
					_Utils_Tuple2('SHIFT', $author$project$Common$EffectOnWindow$vkey_LSHIFT),
					_Utils_Tuple2('UMSCH', $author$project$Common$EffectOnWindow$vkey_LSHIFT),
					_Utils_Tuple2('F1', $author$project$Common$EffectOnWindow$vkey_F1),
					_Utils_Tuple2('F2', $author$project$Common$EffectOnWindow$vkey_F2),
					_Utils_Tuple2('F3', $author$project$Common$EffectOnWindow$vkey_F3),
					_Utils_Tuple2('F4', $author$project$Common$EffectOnWindow$vkey_F4),
					_Utils_Tuple2('F5', $author$project$Common$EffectOnWindow$vkey_F5),
					_Utils_Tuple2('F6', $author$project$Common$EffectOnWindow$vkey_F6),
					_Utils_Tuple2('F7', $author$project$Common$EffectOnWindow$vkey_F7),
					_Utils_Tuple2('F8', $author$project$Common$EffectOnWindow$vkey_F8),
					_Utils_Tuple2('F9', $author$project$Common$EffectOnWindow$vkey_F9),
					_Utils_Tuple2('F10', $author$project$Common$EffectOnWindow$vkey_F10),
					_Utils_Tuple2('F11', $author$project$Common$EffectOnWindow$vkey_F11),
					_Utils_Tuple2('F12', $author$project$Common$EffectOnWindow$vkey_F12)
				])));
};
var $author$project$EveOnline$ParseUserInterface$parseModuleButtonTooltipShortcut = function (shortcutText) {
	return A2(
		$elm$core$Result$map,
		$elm$core$List$reverse,
		A3(
			$elm$core$List$foldl,
			F2(
				function (nextKeyText, previousResult) {
					return A2(
						$elm$core$Result$andThen,
						function (previousKeys) {
							var _v0 = $author$project$EveOnline$ParseUserInterface$parseKeyShortcutText(nextKeyText);
							if (!_v0.$) {
								var nextKey = _v0.a;
								return $elm$core$Result$Ok(
									A2($elm$core$List$cons, nextKey, previousKeys));
							} else {
								return $elm$core$Result$Err('Unknown key text: \'' + (nextKeyText + '\''));
							}
						},
						previousResult);
				}),
			$elm$core$Result$Ok(_List_Nil),
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$length,
					$elm$core$Basics$lt(0)),
				A2(
					$elm$core$List$map,
					$elm$core$String$trim,
					A2(
						$elm$core$List$concatMap,
						$elm$core$String$split('+'),
						A2($elm$core$String$split, '-', shortcutText))))));
};
var $author$project$EveOnline$ParseUserInterface$parseDistanceUnitInMeters = function (unitText) {
	var _v0 = $elm$core$String$trim(unitText);
	switch (_v0) {
		case 'm':
			return $elm$core$Maybe$Just(1);
		case 'km':
			return $elm$core$Maybe$Just(1000);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$EveOnline$ParseUserInterface$parseOverviewEntryDistanceInMetersFromText = function (distanceDisplayTextBeforeTrim) {
	var _v0 = $elm$core$List$reverse(
		A2(
			$elm$core$String$split,
			' ',
			$elm$core$String$trim(distanceDisplayTextBeforeTrim)));
	if (_v0.b) {
		var unitText = _v0.a;
		var reversedNumberTexts = _v0.b;
		var _v1 = $author$project$EveOnline$ParseUserInterface$parseDistanceUnitInMeters(unitText);
		if (_v1.$ === 1) {
			return $elm$core$Result$Err('Failed to parse distance unit text of \'' + (unitText + '\''));
		} else {
			var unitInMeters = _v1.a;
			var _v2 = $author$project$EveOnline$ParseUserInterface$parseNumberTruncatingAfterOptionalDecimalSeparator(
				A2(
					$elm$core$String$join,
					' ',
					$elm$core$List$reverse(reversedNumberTexts)));
			if (_v2.$ === 1) {
				var parseNumberError = _v2.a;
				return $elm$core$Result$Err('Failed to parse number: ' + parseNumberError);
			} else {
				var parsedNumber = _v2.a;
				return $elm$core$Result$Ok(parsedNumber * unitInMeters);
			}
		}
	} else {
		return $elm$core$Result$Err('Expecting at least one whitespace character separating number and unit.');
	}
};
var $author$project$EveOnline$ParseUserInterface$parseModuleButtonTooltip = function (tooltipUINode) {
	var upperRightCornerFromDisplayRegion = function (region) {
		return {nB: region.nB + region.u, nC: region.nC};
	};
	var optimalRangeString = $elm$core$List$head(
		A2(
			$elm$core$List$filterMap,
			function (text) {
				return A2(
					$elm$core$Maybe$map,
					$elm$core$String$trim,
					A2(
						$elm$core$Maybe$andThen,
						$elm$core$Basics$identity,
						A2(
							$elm$core$Maybe$andThen,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.m1;
								},
								A2(
									$elm$core$Basics$composeR,
									$elm$core$List$drop(1),
									$elm$core$List$head)),
							A2(
								$elm$core$Maybe$andThen,
								function (regex) {
									return $elm$core$List$head(
										A2($elm$regex$Regex$find, regex, text));
								},
								$elm$regex$Regex$fromString('Optimal range (|within)\\s*([\\d\\.]+\\s*[km]+)')))));
			},
			$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTexts(tooltipUINode.b)));
	var optimalRange = A2(
		$elm$core$Maybe$map,
		function (asString) {
			return {
				j2: asString,
				ln: $author$project$EveOnline$ParseUserInterface$parseOverviewEntryDistanceInMetersFromText(asString)
			};
		},
		optimalRangeString);
	var distanceSquared = F2(
		function (a, b) {
			var distanceY = a.nC - b.nC;
			var distanceX = a.nB - b.nB;
			return (distanceX * distanceX) + (distanceY * distanceY);
		});
	var shortcutCandidates = A2(
		$elm$core$List$sortBy,
		function ($) {
			return $.dN;
		},
		A2(
			$elm$core$List$map,
			function (_v1) {
				var text = _v1.a;
				var textUINode = _v1.b;
				return {
					dN: A2(
						distanceSquared,
						upperRightCornerFromDisplayRegion(textUINode.i),
						upperRightCornerFromDisplayRegion(tooltipUINode.i)),
					aD: text
				};
			},
			$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTextsWithRegion(tooltipUINode)));
	var shortcut = A2(
		$elm$core$Maybe$map,
		function (_v0) {
			var text = _v0.aD;
			return {
				ma: $author$project$EveOnline$ParseUserInterface$parseModuleButtonTooltipShortcut(text),
				aD: text
			};
		},
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				function (textAndDistance) {
					return textAndDistance.dN < 1000;
				},
				shortcutCandidates)));
	return {hD: optimalRange, iM: shortcut, b: tooltipUINode};
};
var $author$project$EveOnline$ParseUserInterface$parseModuleButtonTooltipFromUITreeRoot = function (uiTreeRoot) {
	var _v0 = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('ModuleButtonTooltip'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot)));
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var uiNode = _v0.a;
		return $elm$core$Maybe$Just(
			$author$project$EveOnline$ParseUserInterface$parseModuleButtonTooltip(uiNode));
	}
};
var $author$project$EveOnline$ParseUserInterface$parseNeocomClockText = function (clockText) {
	var _v0 = A2($elm$core$String$split, ':', clockText);
	if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
		var hourText = _v0.a;
		var _v1 = _v0.b;
		var minuteText = _v1.a;
		var _v2 = $elm$core$String$toInt(
			$elm$core$String$trim(hourText));
		if (_v2.$ === 1) {
			return $elm$core$Result$Err('Failed to parse hour: \'' + (hourText + '\''));
		} else {
			var hour = _v2.a;
			var _v3 = $elm$core$String$toInt(
				$elm$core$String$trim(minuteText));
			if (_v3.$ === 1) {
				return $elm$core$Result$Err('Failed to parse minute: \'' + (minuteText + '\''));
			} else {
				var minute = _v3.a;
				return $elm$core$Result$Ok(
					{lf: hour, lP: minute});
			}
		}
	} else {
		return $elm$core$Result$Err('Expecting exactly two substrings separated by a colon (:).');
	}
};
var $author$project$EveOnline$ParseUserInterface$parseNeocom = function (neocomUiNode) {
	var nodeFromTexturePathEnd = function (texturePathEnd) {
		return $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						$author$project$EveOnline$ParseUserInterface$getTexturePathFromDictEntries,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$map(
								$elm$core$String$endsWith(texturePathEnd)),
							$elm$core$Maybe$withDefault(false)))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(neocomUiNode)));
	};
	var maybeClockTextAndNode = $elm$core$List$head(
		A2(
			$elm$core$List$concatMap,
			$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTextsWithRegion,
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('InGameClock'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(neocomUiNode))));
	var clock = A2(
		$elm$core$Maybe$map,
		function (_v0) {
			var clockText = _v0.a;
			var clockNode = _v0.b;
			return {
				hO: $author$project$EveOnline$ParseUserInterface$parseNeocomClockText(clockText),
				aD: clockText,
				b: clockNode
			};
		},
		maybeClockTextAndNode);
	return {
		fz: clock,
		gz: nodeFromTexturePathEnd('items.png'),
		b: neocomUiNode
	};
};
var $author$project$EveOnline$ParseUserInterface$parseNeocomFromUITreeRoot = function (uiTreeRoot) {
	var _v0 = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('Neocom'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot)));
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var uiNode = _v0.a;
		return $elm$core$Maybe$Just(
			$author$project$EveOnline$ParseUserInterface$parseNeocom(uiNode));
	}
};
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $author$project$EveOnline$ParseUserInterface$ColorComponents = F4(
	function (a, r, g, b) {
		return {eM: a, j3: b, k7: g, ml: r};
	});
var $author$project$EveOnline$ParseUserInterface$jsonDecodeColorPercent = A5(
	$elm$json$Json$Decode$map4,
	$author$project$EveOnline$ParseUserInterface$ColorComponents,
	A2($elm$json$Json$Decode$field, 'aPercent', $author$project$EveOnline$ParseUserInterface$jsonDecodeIntFromIntOrString),
	A2($elm$json$Json$Decode$field, 'rPercent', $author$project$EveOnline$ParseUserInterface$jsonDecodeIntFromIntOrString),
	A2($elm$json$Json$Decode$field, 'gPercent', $author$project$EveOnline$ParseUserInterface$jsonDecodeIntFromIntOrString),
	A2($elm$json$Json$Decode$field, 'bPercent', $author$project$EveOnline$ParseUserInterface$jsonDecodeIntFromIntOrString));
var $author$project$EveOnline$ParseUserInterface$getColorPercentFromDictEntries = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.fM;
	},
	A2(
		$elm$core$Basics$composeR,
		$elm$core$Dict$get('_color'),
		$elm$core$Maybe$andThen(
			A2(
				$elm$core$Basics$composeR,
				$elm$json$Json$Decode$decodeValue($author$project$EveOnline$ParseUserInterface$jsonDecodeColorPercent),
				$elm$core$Result$toMaybe))));
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $author$project$EveOnline$ParseUserInterface$getOpacityFloatFromDictEntries = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.fM;
	},
	A2(
		$elm$core$Basics$composeR,
		$elm$core$Dict$get('_opacity'),
		$elm$core$Maybe$andThen(
			A2(
				$elm$core$Basics$composeR,
				$elm$json$Json$Decode$decodeValue($elm$json$Json$Decode$float),
				$elm$core$Result$toMaybe))));
var $author$project$EveOnline$ParseUserInterface$parseOverviewWindowEntry = F2(
	function (entriesHeaders, overviewEntryNode) {
		var textsLeftToRight = A2(
			$elm$core$List$map,
			$elm$core$Tuple$first,
			A2(
				$elm$core$List$sortBy,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Tuple$second,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.i;
						},
						function ($) {
							return $.nB;
						})),
				$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTextsWithRegion(overviewEntryNode)));
		var spaceObjectIconNode = $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('SpaceObjectIcon'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(overviewEntryNode)));
		var rightAlignedIconsHints = A2(
			$elm$core$List$filterMap,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				$author$project$EveOnline$ParseUserInterface$getHintTextFromDictEntries),
			A2(
				$elm$core$List$concatMap,
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion,
				A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						A2(
							$elm$core$Basics$composeR,
							$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Maybe$map(
									$elm$core$Basics$eq('rightAlignedIconContainer')),
								$elm$core$Maybe$withDefault(false)))),
					$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(overviewEntryNode))));
		var rightAlignedIconsHintsContainsTextIgnoringCase = function (textToSearch) {
			return A2(
				$elm$core$List$any,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$String$toLower,
					$elm$core$String$contains(
						$elm$core$String$toLower(textToSearch))),
				rightAlignedIconsHints);
		};
		var opacityPercent = A2(
			$elm$core$Maybe$map,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Basics$mul(100),
				$elm$core$Basics$round),
			$author$project$EveOnline$ParseUserInterface$getOpacityFloatFromDictEntries(overviewEntryNode.b));
		var namesUnderSpaceObjectIcon = $elm$core$Set$fromList(
			A2(
				$elm$core$List$filterMap,
				$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
				A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						$elm$core$Maybe$map,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.b;
							},
							$author$project$EveOnline$MemoryReading$listDescendantsInUITreeNode),
						spaceObjectIconNode))));
		var iconSpriteColorPercent = A2(
			$elm$core$Maybe$andThen,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				$author$project$EveOnline$ParseUserInterface$getColorPercentFromDictEntries),
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						A2(
							$elm$core$Basics$composeR,
							$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
							$elm$core$Basics$eq(
								$elm$core$Maybe$Just('iconSprite')))),
					A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2($elm$core$Maybe$map, $author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion, spaceObjectIconNode)))));
		var commonIndications = {
			gV: rightAlignedIconsHintsContainsTextIgnoringCase('is jamming me'),
			gW: rightAlignedIconsHintsContainsTextIgnoringCase('is warp disrupting me'),
			i9: A2($elm$core$Set$member, 'targetedByMeIndicator', namesUnderSpaceObjectIcon),
			ja: A2($elm$core$Set$member, 'targeting', namesUnderSpaceObjectIcon)
		};
		var cellsTexts = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$filterMap,
				function (_v0) {
					var cellText = _v0.a;
					var cell = _v0.b;
					var cellMiddle = cell.i.nB + ((cell.i.u / 2) | 0);
					var maybeHeader = $elm$core$List$head(
						A2(
							$elm$core$List$filter,
							function (_v2) {
								var header = _v2.b;
								return (_Utils_cmp(header.i.nB, cellMiddle + 1) < 0) && (_Utils_cmp(cellMiddle, (header.i.nB + header.i.u) - 1) < 0);
							},
							entriesHeaders));
					return A2(
						$elm$core$Maybe$map,
						function (_v1) {
							var headerText = _v1.a;
							return _Utils_Tuple2(headerText, cellText);
						},
						maybeHeader);
				},
				$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTextsWithRegion(overviewEntryNode)));
		var objectDistance = A2($elm$core$Dict$get, 'Distance', cellsTexts);
		var objectDistanceInMeters = A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Result$Err('Did not find the \'Distance\' cell text.'),
			A2($elm$core$Maybe$map, $author$project$EveOnline$ParseUserInterface$parseOverviewEntryDistanceInMetersFromText, objectDistance));
		var bgColorFillsPercent = A2(
			$elm$core$List$filterMap,
			function (fillUiNode) {
				return $author$project$EveOnline$ParseUserInterface$getColorPercentFromDictEntries(fillUiNode.b);
			},
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$map(
								$elm$core$Basics$eq('bgColor')),
							$elm$core$Maybe$withDefault(false)))),
				A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.h0;
							},
							$elm$core$Basics$eq('Fill'))),
					$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(overviewEntryNode))));
		return {
			fb: bgColorFillsPercent,
			cs: cellsTexts,
			fD: commonIndications,
			gA: iconSpriteColorPercent,
			ho: namesUnderSpaceObjectIcon,
			hu: A2($elm$core$Dict$get, 'Alliance', cellsTexts),
			hv: objectDistance,
			hw: objectDistanceInMeters,
			hx: A2($elm$core$Dict$get, 'Name', cellsTexts),
			hy: A2($elm$core$Dict$get, 'Type', cellsTexts),
			hB: opacityPercent,
			$9: rightAlignedIconsHints,
			dl: textsLeftToRight,
			b: overviewEntryNode
		};
	});
var $author$project$EveOnline$ParseUserInterface$parseOverviewWindowFromUITreeRoot = function (uiTreeRoot) {
	var _v0 = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$member,
						$elm$core$Basics$apR(
							_List_fromArray(
								['OverView', 'OverviewWindow', 'OverviewWindowOld']))))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot)));
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var overviewWindowNode = _v0.a;
		var scrollNode = $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$toLower,
							$elm$core$String$contains('scroll')))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(overviewWindowNode)));
		var scrollControlsNode = $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$String$contains('ScrollControls'))),
				A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2($elm$core$Maybe$map, $author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion, scrollNode))));
		var headersContainerNode = $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$toLower,
							$elm$core$String$contains('headers')))),
				A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2($elm$core$Maybe$map, $author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion, scrollNode))));
		var entriesHeaders = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2($elm$core$Maybe$map, $author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTextsWithRegion, headersContainerNode));
		var entries = A2(
			$elm$core$List$map,
			$author$project$EveOnline$ParseUserInterface$parseOverviewWindowEntry(entriesHeaders),
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('OverviewScrollEntry'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(overviewWindowNode)));
		return $elm$core$Maybe$Just(
			{
				am: entries,
				fX: entriesHeaders,
				bC: A2($elm$core$Maybe$map, $author$project$EveOnline$ParseUserInterface$parseScrollControls, scrollControlsNode),
				b: overviewWindowNode
			});
	}
};
var $author$project$EveOnline$ParseUserInterface$parseProbeScanResult = F2(
	function (entriesHeaders, scanResultNode) {
		var warpButton = $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						$author$project$EveOnline$ParseUserInterface$getTexturePathFromDictEntries,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$map(
								$elm$core$String$endsWith('44_32_18.png')),
							$elm$core$Maybe$withDefault(false)))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(scanResultNode)));
		var textsLeftToRight = A2(
			$elm$core$List$map,
			$elm$core$Tuple$first,
			A2(
				$elm$core$List$sortBy,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Tuple$second,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.i;
						},
						function ($) {
							return $.nB;
						})),
				$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTextsWithRegion(scanResultNode)));
		var cellsTexts = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$filterMap,
				function (_v0) {
					var cellText = _v0.a;
					var cell = _v0.b;
					var cellMiddle = cell.i.nB + ((cell.i.u / 2) | 0);
					var maybeHeader = $elm$core$List$head(
						A2(
							$elm$core$List$filter,
							function (_v2) {
								var header = _v2.b;
								return (_Utils_cmp(header.i.nB, cellMiddle + 1) < 0) && (_Utils_cmp(cellMiddle, (header.i.nB + header.i.u) - 1) < 0);
							},
							entriesHeaders));
					return A2(
						$elm$core$Maybe$map,
						function (_v1) {
							var headerText = _v1.a;
							return _Utils_Tuple2(headerText, cellText);
						},
						maybeHeader);
				},
				$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTextsWithRegion(scanResultNode)));
		return {cs: cellsTexts, dl: textsLeftToRight, b: scanResultNode, jE: warpButton};
	});
var $author$project$EveOnline$ParseUserInterface$parseProbeScannerWindowFromUITreeRoot = function (uiTreeRoot) {
	var _v0 = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('ProbeScannerWindow'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot)));
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var windowNode = _v0.a;
		var scrollNode = $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$toLower,
							$elm$core$String$contains('scroll')))),
				A2(
					$elm$core$List$concatMap,
					$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion,
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.b;
							},
							A2(
								$elm$core$Basics$composeR,
								$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Maybe$map(
										$elm$core$String$contains('ResultsContainer')),
									$elm$core$Maybe$withDefault(false)))),
						$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(windowNode)))));
		var scanResultsNodes = A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('ScanResultNew'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(windowNode));
		var headersContainerNode = scrollNode;
		var entriesHeaders = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2($elm$core$Maybe$map, $author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTextsWithRegion, headersContainerNode));
		var scanResults = A2(
			$elm$core$List$map,
			$author$project$EveOnline$ParseUserInterface$parseProbeScanResult(entriesHeaders),
			scanResultsNodes);
		return $elm$core$Maybe$Just(
			{dc: scanResults, b: windowNode});
	}
};
var $author$project$EveOnline$ParseUserInterface$parseRepairShopWindow = function (windowUINode) {
	var buttonFromLabelText = function (labelText) {
		return $elm$core$List$head(
			A2(
				$elm$core$List$sortBy,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.i;
					},
					A2(
						$elm$core$Basics$composeR,
						$author$project$EveOnline$ParseUserInterface$areaFromDisplayRegion,
						$elm$core$Maybe$withDefault(0))),
				A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						A2(
							$elm$core$Basics$composeR,
							$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTexts,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$List$map(
									A2($elm$core$Basics$composeR, $elm$core$String$trim, $elm$core$String$toLower)),
								$elm$core$List$member(
									$elm$core$String$toLower(labelText))))),
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.b;
							},
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.h0;
								},
								$elm$core$String$contains('Button'))),
						$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(windowUINode)))));
	};
	return {
		cR: A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('Item'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(windowUINode)),
		hR: buttonFromLabelText('pick new item'),
		ib: buttonFromLabelText('repair all'),
		ic: buttonFromLabelText('repair item'),
		b: windowUINode
	};
};
var $author$project$EveOnline$ParseUserInterface$parseRepairShopWindowFromUITreeRoot = function (uiTreeRoot) {
	return A2(
		$elm$core$Maybe$map,
		$author$project$EveOnline$ParseUserInterface$parseRepairShopWindow,
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('RepairShopWindow'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot))));
};
var $author$project$EveOnline$ParseUserInterface$parseSelectedItemWindow = function (windowNode) {
	var actionButtonFromTexturePathEnding = function (texturePathEnding) {
		return $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						$author$project$EveOnline$ParseUserInterface$getTexturePathFromDictEntries,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$map(
								A2(
									$elm$core$Basics$composeR,
									$elm$core$String$toLower,
									$elm$core$String$endsWith(
										$elm$core$String$toLower(texturePathEnding)))),
							$elm$core$Maybe$withDefault(false)))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(windowNode)));
	};
	var orbitButton = actionButtonFromTexturePathEnding('44_32_21.png');
	return {hF: orbitButton, b: windowNode};
};
var $author$project$EveOnline$ParseUserInterface$parseSelectedItemWindowFromUITreeRoot = function (uiTreeRoot) {
	return A2(
		$elm$core$Maybe$map,
		$author$project$EveOnline$ParseUserInterface$parseSelectedItemWindow,
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('ActiveItem'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot))));
};
var $author$project$EveOnline$ParseUserInterface$groupShipUIModulesIntoRows = F2(
	function (capacitor, modules) {
		var verticalDistanceThreshold = 20;
		var verticalCenterOfUINode = function (uiNode) {
			return uiNode.i.nC + ((uiNode.i._ / 2) | 0);
		};
		var capacitorVerticalCenter = verticalCenterOfUINode(capacitor.b);
		return A3(
			$elm$core$List$foldr,
			F2(
				function (shipModule, previousRows) {
					return (_Utils_cmp(
						verticalCenterOfUINode(shipModule.b),
						capacitorVerticalCenter - verticalDistanceThreshold) < 0) ? _Utils_update(
						previousRows,
						{
							$7: A2($elm$core$List$cons, shipModule, previousRows.$7)
						}) : ((_Utils_cmp(
						verticalCenterOfUINode(shipModule.b),
						capacitorVerticalCenter + verticalDistanceThreshold) > 0) ? _Utils_update(
						previousRows,
						{
							cp: A2($elm$core$List$cons, shipModule, previousRows.cp)
						}) : _Utils_update(
						previousRows,
						{
							ea: A2($elm$core$List$cons, shipModule, previousRows.ea)
						}));
				}),
			{cp: _List_Nil, ea: _List_Nil, $7: _List_Nil},
			modules);
	});
var $elm_community$maybe_extra$Maybe$Extra$combineHelp = F2(
	function (list, acc) {
		combineHelp:
		while (true) {
			if (list.b) {
				var head = list.a;
				var tail = list.b;
				if (!head.$) {
					var a = head.a;
					var $temp$list = tail,
						$temp$acc = A2($elm$core$List$cons, a, acc);
					list = $temp$list;
					acc = $temp$acc;
					continue combineHelp;
				} else {
					return $elm$core$Maybe$Nothing;
				}
			} else {
				return $elm$core$Maybe$Just(
					$elm$core$List$reverse(acc));
			}
		}
	});
var $elm_community$maybe_extra$Maybe$Extra$combine = function (list) {
	return A2($elm_community$maybe_extra$Maybe$Extra$combineHelp, list, _List_Nil);
};
var $author$project$EveOnline$ParseUserInterface$parseShipUICapacitorFromUINode = function (capacitorUINode) {
	var pmarks = A2(
		$elm$core$List$map,
		function (pmarkUINode) {
			return {
				dE: $author$project$EveOnline$ParseUserInterface$getColorPercentFromDictEntries(pmarkUINode.b),
				b: pmarkUINode
			};
		},
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$map(
							$elm$core$Basics$eq('pmark')),
						$elm$core$Maybe$withDefault(false)))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(capacitorUINode)));
	var maybePmarksFills = $elm_community$maybe_extra$Maybe$Extra$combine(
		A2(
			$elm$core$List$map,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.dE;
				},
				$elm$core$Maybe$map(
					function (colorPercent) {
						return colorPercent.eM < 20;
					})),
			pmarks));
	var levelFromPmarksPercent = A2(
		$elm$core$Maybe$andThen,
		function (pmarksFills) {
			return ($elm$core$List$length(pmarksFills) < 1) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				(($elm$core$List$length(
					A2($elm$core$List$filter, $elm$core$Basics$identity, pmarksFills)) * 100) / $elm$core$List$length(pmarksFills)) | 0);
		},
		maybePmarksFills);
	return {g4: levelFromPmarksPercent, hT: pmarks, b: capacitorUINode};
};
var $author$project$EveOnline$ParseUserInterface$getRotationFloatFromDictEntries = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.fM;
	},
	A2(
		$elm$core$Basics$composeR,
		$elm$core$Dict$get('_rotation'),
		$elm$core$Maybe$andThen(
			A2(
				$elm$core$Basics$composeR,
				$elm$json$Json$Decode$decodeValue($elm$json$Json$Decode$float),
				$elm$core$Result$toMaybe))));
var $author$project$EveOnline$ParseUserInterface$parseShipUIHeatGaugesFromUINode = function (gaugesUINode) {
	var heatGaugesRotationZeroValues = _List_fromArray(
		[-213, -108, -3]);
	var heatValuePercentFromRotationPercent = function (rotationPercent) {
		return $elm$core$List$head(
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				A2(
					$elm$core$List$map,
					function (gaugeRotationZero) {
						return ((_Utils_cmp(rotationPercent, gaugeRotationZero) < 1) && (_Utils_cmp(gaugeRotationZero - 100, rotationPercent) < 1)) ? $elm$core$Maybe$Just(-(rotationPercent - gaugeRotationZero)) : $elm$core$Maybe$Nothing;
					},
					heatGaugesRotationZeroValues)));
	};
	var gauges = A2(
		$elm$core$List$map,
		function (gaugeUiNode) {
			var rotationPercent = A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Basics$mul(100),
					$elm$core$Basics$round),
				$author$project$EveOnline$ParseUserInterface$getRotationFloatFromDictEntries(gaugeUiNode.b));
			return {
				gs: A2($elm$core$Maybe$andThen, heatValuePercentFromRotationPercent, rotationPercent),
				io: rotationPercent,
				b: gaugeUiNode
			};
		},
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$map(
							$elm$core$Basics$eq('heatGauge')),
						$elm$core$Maybe$withDefault(false)))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(gaugesUINode)));
	return {gl: gauges, b: gaugesUINode};
};
var $author$project$EveOnline$ParseUserInterface$ManeuverApproach = 3;
var $author$project$EveOnline$ParseUserInterface$ManeuverJump = 1;
var $author$project$EveOnline$ParseUserInterface$ManeuverOrbit = 2;
var $author$project$EveOnline$ParseUserInterface$ManeuverWarp = 0;
var $author$project$EveOnline$ParseUserInterface$parseShipUIIndication = function (indicationUINode) {
	var displayTexts = $author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTexts(indicationUINode.b);
	var maneuverType = $elm$core$List$head(
		A2(
			$elm$core$List$filterMap,
			function (_v0) {
				var pattern = _v0.a;
				var candidateManeuverType = _v0.b;
				return A2(
					$elm$core$List$any,
					$elm$core$String$contains(pattern),
					displayTexts) ? $elm$core$Maybe$Just(candidateManeuverType) : $elm$core$Maybe$Nothing;
			},
			_List_fromArray(
				[
					_Utils_Tuple2('Warp', 0),
					_Utils_Tuple2('Jump', 1),
					_Utils_Tuple2('Orbit', 2),
					_Utils_Tuple2('Approach', 3),
					_Utils_Tuple2('워프 드라이브 가동', 0),
					_Utils_Tuple2('점프 중', 1)
				])));
	return {hb: maneuverType, b: indicationUINode};
};
var $elm$core$Basics$pi = _Basics_pi;
var $author$project$EveOnline$ParseUserInterface$parseShipUIModuleButton = function (_v0) {
	var slotNode = _v0.iR;
	var moduleButtonNode = _v0.hj;
	var rotationFloatFromRampName = function (rampName) {
		return $elm$core$List$head(
			A2(
				$elm$core$List$filterMap,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					$author$project$EveOnline$ParseUserInterface$getRotationFloatFromDictEntries),
				A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						A2(
							$elm$core$Basics$composeR,
							$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
							$elm$core$Basics$eq(
								$elm$core$Maybe$Just(rampName)))),
					$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(slotNode))));
	};
	var rampRotationMilli = function () {
		var _v1 = _Utils_Tuple2(
			rotationFloatFromRampName('leftRamp'),
			rotationFloatFromRampName('rightRamp'));
		if ((!_v1.a.$) && (!_v1.b.$)) {
			var leftRampRotationFloat = _v1.a.a;
			var rightRampRotationFloat = _v1.b.a;
			return (((leftRampRotationFloat < 0) || (_Utils_cmp($elm$core$Basics$pi * 2.01, leftRampRotationFloat) < 0)) || ((rightRampRotationFloat < 0) || (_Utils_cmp($elm$core$Basics$pi * 2.01, rightRampRotationFloat) < 0))) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$elm$core$Basics$max,
					0,
					A2(
						$elm$core$Basics$min,
						1000,
						$elm$core$Basics$round(1000 - (((leftRampRotationFloat + rightRampRotationFloat) * 500) / $elm$core$Basics$pi)))));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	}();
	return {
		gQ: A2(
			$elm$core$Maybe$andThen,
			A2(
				$elm$core$Basics$composeR,
				$elm$json$Json$Decode$decodeValue($elm$json$Json$Decode$bool),
				$elm$core$Result$toMaybe),
			A2($elm$core$Dict$get, 'ramp_active', moduleButtonNode.b.fM)),
		gS: !$elm$core$List$isEmpty(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
						$elm$core$Basics$eq(
							$elm$core$Maybe$Just('hilite')))),
				A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.h0;
							},
							$elm$core$Basics$eq('Sprite'))),
					$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(slotNode)))),
		h4: rampRotationMilli,
		iS: slotNode,
		b: moduleButtonNode
	};
};
var $author$project$EveOnline$ParseUserInterface$parseSquadronAbilityIcon = function (abilityIconUINode) {
	return {
		h1: A2(
			$elm$core$Maybe$andThen,
			A2($elm$core$Basics$composeR, $elm$core$String$trim, $elm$core$String$toInt),
			$elm$core$List$head(
				A2(
					$elm$core$List$concatMap,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTexts),
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.b;
							},
							A2(
								$elm$core$Basics$composeR,
								$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Maybe$map(
										A2(
											$elm$core$Basics$composeR,
											$elm$core$String$toLower,
											$elm$core$String$contains('quantity'))),
									$elm$core$Maybe$withDefault(false)))),
						$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(abilityIconUINode))))),
		h5: A2(
			$elm$core$Maybe$andThen,
			A2(
				$elm$core$Basics$composeR,
				$elm$json$Json$Decode$decodeValue($elm$json$Json$Decode$bool),
				$elm$core$Result$toMaybe),
			A2($elm$core$Dict$get, 'ramp_active', abilityIconUINode.b.fM)),
		b: abilityIconUINode
	};
};
var $author$project$EveOnline$ParseUserInterface$parseSquadronUI = function (squadronUINode) {
	return {
		eN: A2(
			$elm$core$List$map,
			$author$project$EveOnline$ParseUserInterface$parseSquadronAbilityIcon,
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('AbilityIcon'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(squadronUINode))),
		eS: $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('SquadronActionLabel'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(squadronUINode))),
		b: squadronUINode
	};
};
var $author$project$EveOnline$ParseUserInterface$parseSquadronsUI = function (squadronsUINode) {
	return {
		iX: A2(
			$elm$core$List$map,
			$author$project$EveOnline$ParseUserInterface$parseSquadronUI,
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('SquadronUI'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(squadronsUINode))),
		b: squadronsUINode
	};
};
var $author$project$EveOnline$ParseUserInterface$parseShipUIFromUITreeRoot = function (uiTreeRoot) {
	var _v0 = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('ShipUI'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot)));
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var shipUINode = _v0.a;
		var _v1 = $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('CapacitorContainer'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(shipUINode)));
		if (_v1.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var capacitorUINode = _v1.a;
			var squadronsUI = A2(
				$elm$core$Maybe$map,
				$author$project$EveOnline$ParseUserInterface$parseSquadronsUI,
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.b;
							},
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.h0;
								},
								$elm$core$Basics$eq('SquadronsUI'))),
						$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(shipUINode))));
			var offensiveBuffButtonNames = A2(
				$elm$core$List$filterMap,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries),
				A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.h0;
							},
							$elm$core$Basics$eq('OffensiveBuffButton'))),
					$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(shipUINode)));
			var moduleButtons = A2(
				$elm$core$List$filterMap,
				function (slotNode) {
					return A2(
						$elm$core$Maybe$map,
						function (moduleButtonNode) {
							return $author$project$EveOnline$ParseUserInterface$parseShipUIModuleButton(
								{hj: moduleButtonNode, iR: slotNode});
						},
						$elm$core$List$head(
							A2(
								$elm$core$List$filter,
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.b;
									},
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.h0;
										},
										$elm$core$Basics$eq('ModuleButton'))),
								$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(slotNode))));
				},
				A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.h0;
							},
							$elm$core$Basics$eq('ShipSlot'))),
					$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(shipUINode)));
			var maybeIndicationNode = $elm$core$List$head(
				A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						A2(
							$elm$core$Basics$composeR,
							$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Maybe$map(
									A2(
										$elm$core$Basics$composeR,
										$elm$core$String$toLower,
										$elm$core$String$contains('indicationcontainer'))),
								$elm$core$Maybe$withDefault(false)))),
					$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(shipUINode)));
			var indication = A2(
				$elm$core$Maybe$withDefault,
				$elm$core$Maybe$Nothing,
				A2(
					$elm$core$Maybe$map,
					A2($elm$core$Basics$composeR, $author$project$EveOnline$ParseUserInterface$parseShipUIIndication, $elm$core$Maybe$Just),
					maybeIndicationNode));
			var heatGauges = A2(
				$elm$core$Maybe$map,
				$author$project$EveOnline$ParseUserInterface$parseShipUIHeatGaugesFromUINode,
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.b;
							},
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.h0;
								},
								$elm$core$Basics$eq('HeatGauges'))),
						$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(shipUINode))));
			var getLastValuePercentFromGaugeName = function (gaugeName) {
				return A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Basics$mul(100),
						$elm$core$Basics$round),
					A2(
						$elm$core$Maybe$andThen,
						A2(
							$elm$core$Basics$composeR,
							$elm$json$Json$Decode$decodeValue($elm$json$Json$Decode$float),
							$elm$core$Result$toMaybe),
						A2(
							$elm$core$Maybe$andThen,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.b;
								},
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.fM;
									},
									$elm$core$Dict$get('_lastValue'))),
							$elm$core$List$head(
								A2(
									$elm$core$List$filter,
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.b;
										},
										A2(
											$elm$core$Basics$composeR,
											$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
											A2(
												$elm$core$Basics$composeR,
												$elm$core$Maybe$map(
													$elm$core$Basics$eq(gaugeName)),
												$elm$core$Maybe$withDefault(false)))),
									$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(shipUINode))))));
			};
			var maybeHitpointsPercent = function () {
				var _v2 = _Utils_Tuple3(
					getLastValuePercentFromGaugeName('structureGauge'),
					getLastValuePercentFromGaugeName('armorGauge'),
					getLastValuePercentFromGaugeName('shieldGauge'));
				if (((!_v2.a.$) && (!_v2.b.$)) && (!_v2.c.$)) {
					var structure = _v2.a.a;
					var armor = _v2.b.a;
					var shield = _v2.c.a;
					return $elm$core$Maybe$Just(
						{dy: armor, et: shield, ew: structure});
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}();
			var descendantNodesFromPythonObjectTypeNameEqual = function (pythonObjectTypeName) {
				return A2(
					$elm$core$List$filter,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.b;
						},
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.h0;
							},
							$elm$core$Basics$eq(pythonObjectTypeName))),
					$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(shipUINode));
			};
			var capacitor = $author$project$EveOnline$ParseUserInterface$parseShipUICapacitorFromUINode(capacitorUINode);
			return A2(
				$elm$core$Maybe$map,
				function (hitpointsPercent) {
					return {
						fq: capacitor,
						gr: heatGauges,
						cM: hitpointsPercent,
						gH: indication,
						hf: $elm$core$List$head(
							descendantNodesFromPythonObjectTypeNameEqual('MaxSpeedButton')),
						hl: moduleButtons,
						hm: A2($author$project$EveOnline$ParseUserInterface$groupShipUIModulesIntoRows, capacitor, moduleButtons),
						hA: offensiveBuffButtonNames,
						iY: squadronsUI,
						i2: $elm$core$List$head(
							descendantNodesFromPythonObjectTypeNameEqual('StopButton')),
						b: shipUINode
					};
				},
				maybeHitpointsPercent);
		}
	}
};
var $author$project$EveOnline$ParseUserInterface$parseStandaloneBookmarkWindow = function (windowUINode) {
	var entries = A2(
		$elm$core$List$filter,
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.b;
			},
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.h0;
				},
				$elm$core$Basics$eq('PlaceEntry'))),
		$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(windowUINode));
	return {am: entries, b: windowUINode};
};
var $author$project$EveOnline$ParseUserInterface$parseStandaloneBookmarkWindowFromUITreeRoot = function (uiTreeRoot) {
	return A2(
		$elm$core$Maybe$map,
		$author$project$EveOnline$ParseUserInterface$parseStandaloneBookmarkWindow,
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('StandaloneBookmarkWnd'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot))));
};
var $author$project$EveOnline$ParseUserInterface$parseStationWindowFromUITreeRoot = function (uiTreeRoot) {
	var _v0 = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('LobbyWnd'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot)));
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var windowNode = _v0.a;
		var buttonFromDisplayText = function (textToSearch) {
			var textToSearchLowercase = $elm$core$String$toLower(textToSearch);
			var textMatches = function (text) {
				return _Utils_eq(text, textToSearchLowercase) || A2($elm$core$String$contains, '>' + (textToSearchLowercase + '<'), text);
			};
			return A2(
				$author$project$EveOnline$ParseUserInterface$findButtonInDescendantsByDisplayTextsPredicate,
				$elm$core$List$any(
					A2($elm$core$Basics$composeR, $elm$core$String$toLower, textMatches)),
				windowNode);
		};
		return $elm$core$Maybe$Just(
			{
				eO: buttonFromDisplayText('undocking'),
				b: windowNode,
				jt: buttonFromDisplayText('undock')
			});
	}
};
var $author$project$EveOnline$ParseUserInterface$parseSurveyScanWindow = function (windowUINode) {
	return {
		it: A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('SurveyScanEntry'))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(windowUINode)),
		b: windowUINode
	};
};
var $author$project$EveOnline$ParseUserInterface$parseSurveyScanWindowFromUITreeRoot = function (uiTreeRoot) {
	return A2(
		$elm$core$Maybe$map,
		$author$project$EveOnline$ParseUserInterface$parseSurveyScanWindow,
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('SurveyScanView'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot))));
};
var $author$project$EveOnline$ParseUserInterface$parseTarget = function (targetNode) {
	var textsTopToBottom = A2(
		$elm$core$List$map,
		$elm$core$Tuple$first,
		A2(
			$elm$core$List$sortBy,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Tuple$second,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.i;
					},
					function ($) {
						return $.nC;
					})),
			$author$project$EveOnline$ParseUserInterface$getAllContainedDisplayTextsWithRegion(targetNode)));
	var isActiveTarget = A2(
		$elm$core$List$any,
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.h0;
			},
			$elm$core$Basics$eq('ActiveTargetOnBracket')),
		$author$project$EveOnline$MemoryReading$listDescendantsInUITreeNode(targetNode.b));
	var barAndImageCont = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
					$elm$core$Basics$eq(
						$elm$core$Maybe$Just('barAndImageCont')))),
			$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(targetNode)));
	var assignedContainerNode = $elm$core$List$head(
		A2(
			$elm$core$List$sortBy,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.i;
				},
				function ($) {
					return $.u;
				}),
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						$author$project$EveOnline$ParseUserInterface$getNameFromDictEntries,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Maybe$map(
								A2(
									$elm$core$Basics$composeR,
									$elm$core$String$toLower,
									$elm$core$String$contains('assigned'))),
							$elm$core$Maybe$withDefault(false)))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(targetNode))));
	var assignedIcons = A2(
		$elm$core$List$filter,
		function (uiNode) {
			return A2(
				$elm$core$List$member,
				uiNode.b.h0,
				_List_fromArray(
					['Sprite', 'Icon']));
		},
		A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2($elm$core$Maybe$map, $author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion, assignedContainerNode)));
	return {e5: assignedContainerNode, e6: assignedIcons, e9: barAndImageCont, gR: isActiveTarget, je: textsTopToBottom, b: targetNode};
};
var $author$project$EveOnline$ParseUserInterface$parseTargetsFromUITreeRoot = A2(
	$elm$core$Basics$composeR,
	$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$filter(
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.b;
				},
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.h0;
					},
					$elm$core$Basics$eq('TargetInBar')))),
		$elm$core$List$map($author$project$EveOnline$ParseUserInterface$parseTarget)));
var $author$project$EveOnline$ParseUserInterface$parseWatchListPanel = function (windowUINode) {
	var entries = A2(
		$elm$core$List$filter,
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.b;
			},
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.h0;
				},
				$elm$core$Basics$eq('WatchListEntry'))),
		$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(windowUINode));
	return {am: entries, b: windowUINode};
};
var $author$project$EveOnline$ParseUserInterface$parseWatchListPanelFromUITreeRoot = function (uiTreeRoot) {
	return A2(
		$elm$core$Maybe$map,
		$author$project$EveOnline$ParseUserInterface$parseWatchListPanel,
		$elm$core$List$head(
			A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b;
					},
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.h0;
						},
						$elm$core$Basics$eq('WatchListPanel'))),
				$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeRoot))));
};
var $author$project$EveOnline$ParseUserInterface$parseUserInterfaceFromUITree = function (uiTree) {
	return {
		eW: $author$project$EveOnline$ParseUserInterface$parseAgentConversationWindowsFromUITreeRoot(uiTree),
		fg: $author$project$EveOnline$ParseUserInterface$parseBookmarkLocationWindowFromUITreeRoot(uiTree),
		fu: $author$project$EveOnline$ParseUserInterface$parseCharacterSheetWindowFromUITreeRoot(uiTree),
		fw: $author$project$EveOnline$ParseUserInterface$parseChatWindowStacksFromUITreeRoot(uiTree),
		fH: $author$project$EveOnline$ParseUserInterface$parseContextMenusFromUITreeRoot(uiTree),
		fN: $author$project$EveOnline$ParseUserInterface$parseDirectionalScannerWindowFromUITreeRoot(uiTree),
		fR: $author$project$EveOnline$ParseUserInterface$parseDronesWindowFromUITreeRoot(uiTree),
		ga: $author$project$EveOnline$ParseUserInterface$parseFittingWindowFromUITreeRoot(uiTree),
		gc: $author$project$EveOnline$ParseUserInterface$parseFleetWindowFromUITreeRoot(uiTree),
		gt: $author$project$EveOnline$ParseUserInterface$parseHeatStatusTooltipFromUITreeRoot(uiTree),
		gJ: $author$project$EveOnline$ParseUserInterface$parseInfoPanelContainerFromUIRoot(uiTree),
		gP: $author$project$EveOnline$ParseUserInterface$parseInventoryWindowsFromUITreeRoot(uiTree),
		g_: $author$project$EveOnline$ParseUserInterface$parseKeyActivationWindowFromUITreeRoot(uiTree),
		g2: $author$project$EveOnline$ParseUserInterface$parseLayerAbovemainFromUITreeRoot(uiTree),
		hc: $author$project$EveOnline$ParseUserInterface$parseMarketOrdersWindowFromUITreeRoot(uiTree),
		hi: $author$project$EveOnline$ParseUserInterface$parseMessageBoxesFromUITreeRoot(uiTree),
		hk: $author$project$EveOnline$ParseUserInterface$parseModuleButtonTooltipFromUITreeRoot(uiTree),
		hq: $author$project$EveOnline$ParseUserInterface$parseNeocomFromUITreeRoot(uiTree),
		hL: $author$project$EveOnline$ParseUserInterface$parseOverviewWindowFromUITreeRoot(uiTree),
		hV: $author$project$EveOnline$ParseUserInterface$parseProbeScannerWindowFromUITreeRoot(uiTree),
		id: $author$project$EveOnline$ParseUserInterface$parseRepairShopWindowFromUITreeRoot(uiTree),
		iI: $author$project$EveOnline$ParseUserInterface$parseSelectedItemWindowFromUITreeRoot(uiTree),
		iL: $author$project$EveOnline$ParseUserInterface$parseShipUIFromUITreeRoot(uiTree),
		iZ: $author$project$EveOnline$ParseUserInterface$parseStandaloneBookmarkWindowFromUITreeRoot(uiTree),
		i1: $author$project$EveOnline$ParseUserInterface$parseStationWindowFromUITreeRoot(uiTree),
		i6: $author$project$EveOnline$ParseUserInterface$parseSurveyScanWindowFromUITreeRoot(uiTree),
		jb: $author$project$EveOnline$ParseUserInterface$parseTargetsFromUITreeRoot(uiTree),
		jr: uiTree,
		jF: $author$project$EveOnline$ParseUserInterface$parseWatchListPanelFromUITreeRoot(uiTree)
	};
};
var $author$project$Frontend$EveOnlineAlternateUIMain$parseMemoryReadingFromJson = A2(
	$elm$core$Basics$composeR,
	$author$project$EveOnline$MemoryReading$decodeMemoryReadingFromString,
	$elm$core$Result$map(
		function (uiTree) {
			var uiTreeWithDisplayRegion = $author$project$EveOnline$ParseUserInterface$parseUITreeWithDisplayRegionFromUITree(uiTree);
			var parsedUserInterface = $author$project$EveOnline$ParseUserInterface$parseUserInterfaceFromUITree(uiTreeWithDisplayRegion);
			return {
				hL: A2($elm$core$Maybe$map, $author$project$Frontend$EveOnlineAlternateUIMain$parseOverviewWindow, parsedUserInterface.hL),
				mb: parsedUserInterface,
				eA: $elm$core$Dict$fromList(
					A2(
						$elm$core$List$map,
						function (uiNodeWithRegion) {
							return _Utils_Tuple2(uiNodeWithRegion.b.h$, uiNodeWithRegion);
						},
						A2(
							$elm$core$List$cons,
							uiTreeWithDisplayRegion,
							$author$project$EveOnline$ParseUserInterface$listDescendantsWithDisplayRegion(uiTreeWithDisplayRegion)))),
				jr: uiTree
			};
		}));
var $author$project$Frontend$EveOnlineAlternateUIMain$cssColorFromColorPercent = function (colorPercent) {
	return 'rgba(' + (A2(
		$elm$core$String$join,
		',',
		_Utils_ap(
			A2(
				$elm$core$List$map,
				function (rgbComponent) {
					return $elm$core$String$fromInt(((rgbComponent * 255) / 100) | 0);
				},
				_List_fromArray(
					[colorPercent.ml, colorPercent.k7, colorPercent.j3])),
			_List_fromArray(
				[
					$elm$core$String$fromFloat(colorPercent.eM / 100)
				]))) + ')');
};
var $elm$svg$Svg$Attributes$dominantBaseline = _VirtualDom_attribute('dominant-baseline');
var $elm$svg$Svg$Attributes$lengthAdjust = _VirtualDom_attribute('lengthAdjust');
var $elm$svg$Svg$Attributes$textAnchor = _VirtualDom_attribute('text-anchor');
var $elm$svg$Svg$Attributes$textLength = _VirtualDom_attribute('textLength');
var $elm$svg$Svg$text_ = $elm$svg$Svg$trustedNode('text');
var $author$project$Frontend$EveOnlineAlternateUIMain$svgFromUINodeRecursive = function (uiNode) {
	var transformTranslateText = A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$map,
			$elm$core$String$fromInt,
			_List_fromArray(
				[uiNode.b8.nB, uiNode.b8.nC])));
	var regionRectPlacementAttributes = _List_fromArray(
		[
			$elm$svg$Svg$Attributes$x('0'),
			$elm$svg$Svg$Attributes$y('0'),
			$elm$svg$Svg$Attributes$width(
			$elm$core$String$fromInt(uiNode.b8.u)),
			$elm$svg$Svg$Attributes$height(
			$elm$core$String$fromInt(uiNode.b8._))
		]);
	var regionSvg = A2(
		$elm$svg$Svg$rect,
		_Utils_ap(
			regionRectPlacementAttributes,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'fill', 'transparent'),
					A2($elm$html$Html$Attributes$style, 'stroke-width', '1'),
					A2($elm$html$Html$Attributes$style, 'stroke', '#7AB8FF'),
					A2($elm$html$Html$Attributes$style, 'stroke-opacity', '0.3')
				])),
		_List_Nil);
	var displayTextSvg = function () {
		var _v2 = $author$project$EveOnline$ParseUserInterface$getDisplayText(uiNode.b);
		if (_v2.$ === 1) {
			return $elm$html$Html$text('');
		} else {
			var displayText = _v2.a;
			return A2(
				$elm$svg$Svg$text_,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$textLength(
						$elm$core$String$fromInt(uiNode.b8.u)),
						$elm$svg$Svg$Attributes$lengthAdjust('spacing'),
						A2($elm$html$Html$Attributes$style, 'fill', 'grey'),
						$elm$svg$Svg$Attributes$x(
						$elm$core$String$fromInt((uiNode.b8.u / 2) | 0)),
						$elm$svg$Svg$Attributes$y(
						$elm$core$String$fromInt((uiNode.b8._ / 2) | 0)),
						$elm$svg$Svg$Attributes$dominantBaseline('middle'),
						$elm$svg$Svg$Attributes$textAnchor('middle')
					]),
				_List_fromArray(
					[
						$elm$svg$Svg$text(displayText)
					]));
		}
	}();
	var colorIndicationSvg = function () {
		var _v1 = $author$project$EveOnline$ParseUserInterface$getColorPercentFromDictEntries(uiNode.b);
		if (_v1.$ === 1) {
			return $elm$html$Html$text('');
		} else {
			var colorPercent = _v1.a;
			return A2(
				$elm$svg$Svg$rect,
				_Utils_ap(
					regionRectPlacementAttributes,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$height(
							$elm$core$String$fromInt(uiNode.b8._)),
							A2($elm$html$Html$Attributes$style, 'fill', 'transparent'),
							A2($elm$html$Html$Attributes$style, 'stroke-width', '3'),
							A2(
							$elm$html$Html$Attributes$style,
							'stroke',
							$author$project$Frontend$EveOnlineAlternateUIMain$cssColorFromColorPercent(colorPercent)),
							A2($elm$html$Html$Attributes$style, 'stroke-opacity', '0.5')
						])),
				_List_Nil);
		}
	}();
	var childrenSvg = A2(
		$elm$core$List$map,
		$author$project$Frontend$EveOnlineAlternateUIMain$svgFromUINodeRecursive,
		A2(
			$elm$core$List$filterMap,
			function (child) {
				if (!child.$) {
					var childWithRegion = child.a;
					return $elm$core$Maybe$Just(childWithRegion);
				} else {
					return $elm$core$Maybe$Nothing;
				}
			},
			A2($elm$core$Maybe$withDefault, _List_Nil, uiNode.cv)));
	return A2(
		$elm$svg$Svg$g,
		_List_fromArray(
			[
				$elm$svg$Svg$Attributes$transform('translate(' + (transformTranslateText + ')'))
			]),
		A2(
			$elm$core$List$cons,
			regionSvg,
			A2(
				$elm$core$List$cons,
				colorIndicationSvg,
				A2($elm$core$List$cons, displayTextSvg, childrenSvg))));
};
var $author$project$Frontend$EveOnlineAlternateUIMain$viewUITreeSvg = function (uiTree) {
	var viewBox = A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$map,
			$elm$core$String$fromInt,
			_List_fromArray(
				[uiTree.i.nB, uiTree.i.nC, uiTree.i.u, uiTree.i._])));
	return A2(
		$elm$svg$Svg$svg,
		_List_fromArray(
			[
				$elm$svg$Svg$Attributes$viewBox(viewBox),
				A2($elm$html$Html$Attributes$style, 'background', '#111'),
				A2($elm$html$Html$Attributes$style, 'font-size', '60%')
			]),
		_List_fromArray(
			[
				$author$project$Frontend$EveOnlineAlternateUIMain$svgFromUINodeRecursive(uiTree)
			]));
};
var $author$project$Frontend$DevTools$viewAgentEventDetailsEveOnline = function (agentEventWrapper) {
	var maybeResponseFromVolatileHost = function () {
		var _v6 = $author$project$Frontend$DevTools$mapFromGeneralAgentEventStructureToLatest(agentEventWrapper);
		if (_v6.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var agentEvent = _v6.a;
			var _v7 = agentEvent.f0;
			if (_v7.$ === 3) {
				var taskCompletedEvent = _v7.a;
				var _v8 = taskCompletedEvent.jd;
				if ((_v8.$ === 1) && (!_v8.a.$)) {
					var response = _v8.a.a;
					return $elm$core$Maybe$Just(response);
				} else {
					return $elm$core$Maybe$Nothing;
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	}();
	if (maybeResponseFromVolatileHost.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var responseFromVolatileHost = maybeResponseFromVolatileHost.a;
		var _v1 = A2(
			$elm$core$Maybe$andThen,
			$elm$core$Result$toMaybe,
			A2($elm$core$Maybe$map, $author$project$EveOnline$VolatileProcessInterface$deserializeResponseFromVolatileHost, responseFromVolatileHost.im));
		if (_v1.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var responseFromVolatileHostEveOnline = _v1.a;
			if (responseFromVolatileHostEveOnline.$ === 2) {
				var readFromWindowResult = responseFromVolatileHostEveOnline.a;
				var memoryReadingResultElement = function () {
					if (!readFromWindowResult.$) {
						return $mdgriffith$elm_ui$Element$text('Process not found');
					} else {
						var memoryReadingCompleted = readFromWindowResult.a;
						var _v4 = memoryReadingCompleted.lM;
						if (_v4.$ === 1) {
							return $mdgriffith$elm_ui$Element$text('Missing memoryReadingSerialRepresentationJson');
						} else {
							var serialRepresentationJson = _v4.a;
							var visualsElement = function () {
								var _v5 = $author$project$Frontend$EveOnlineAlternateUIMain$parseMemoryReadingFromJson(serialRepresentationJson);
								if (_v5.$ === 1) {
									var decodeError = _v5.a;
									return $mdgriffith$elm_ui$Element$text(
										'Failed to decode: ' + $elm$json$Json$Decode$errorToString(decodeError));
								} else {
									var decodedMemoryReading = _v5.a;
									return $mdgriffith$elm_ui$Element$html(
										$author$project$Frontend$EveOnlineAlternateUIMain$viewUITreeSvg(decodedMemoryReading.mb.jr));
								}
							}();
							var downloadReadingButton = A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$padding(4)
									]),
								A2(
									$author$project$Frontend$Visuals$buttonElement,
									_List_Nil,
									{
										bo: false,
										lA: $author$project$Frontend$View$exportButtonLabelFromText('Export reading as JSON file'),
										by: $elm$core$Maybe$Just(
											$author$project$Frontend$DevTools$UserInputDownloadJsonFileFromEvent(
												{a_: serialRepresentationJson, aN: 'eve-online-memory-reading.json'}))
									}));
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										downloadReadingButton,
										A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
											]),
										_List_fromArray(
											[visualsElement]))
									]));
						}
					}
				}();
				var headingElement = A2(
					$mdgriffith$elm_ui$Element$el,
					$author$project$Frontend$Visuals$headingAttributes(3),
					$mdgriffith$elm_ui$Element$text('EVE Online memory reading result'));
				return $elm$core$Maybe$Just(
					A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(8),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								headingElement,
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$author$project$Frontend$DevTools$indentAttribute($author$project$Frontend$Visuals$defaultFontSize),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								memoryReadingResultElement)
							])));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	}
};
var $author$project$Frontend$DevTools$SessionEventUrlFileContent = function (a) {
	return {$: 1, a: a};
};
var $author$project$Frontend$DevTools$UserInputDownloadPngFileFromEvent = function (a) {
	return {$: 2, a: a};
};
var $elm$html$Html$img = _VirtualDom_node('img');
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $elm_community$string_extra$String$Extra$surround = F2(
	function (wrapper, string) {
		return _Utils_ap(
			wrapper,
			_Utils_ap(string, wrapper));
	});
var $author$project$Frontend$DevTools$viewIdElementFromName = A2(
	$elm$core$Basics$composeR,
	$mdgriffith$elm_ui$Element$text,
	$mdgriffith$elm_ui$Element$el(
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Element$paddingXY, 10, 3),
				$mdgriffith$elm_ui$Element$Background$color(
				A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.1))
			])));
var $author$project$Frontend$DevTools$viewAgentEventDetailsReadFromWindow = F2(
	function (viewConfig, readFromWindowCache) {
		var screenshotCropsList = $author$project$Frontend$DevTools$listScreenshotCropsWithBinningFactor(readFromWindowCache.w.cN);
		var elementForCrop = function (cropCache) {
			var topInWindow = (cropCache.av.aA.nC * cropCache.fd) - readFromWindowCache.w.cg.$7;
			var leftInWindow = (cropCache.av.aA.nB * cropCache.fd) - readFromWindowCache.w.cg.cV;
			var dimensions = cropCache.dM;
			var descriptionText = A2(
				$elm$core$String$join,
				', ',
				A2(
					$elm$core$List$map,
					function (_v2) {
						var prop = _v2.a;
						var val = _v2.b;
						return prop + (': ' + $elm$core$String$fromInt(val));
					},
					_List_fromArray(
						[
							_Utils_Tuple2('leftInWindow', leftInWindow),
							_Utils_Tuple2('topInWindow', topInWindow),
							_Utils_Tuple2('binningX', cropCache.fd),
							_Utils_Tuple2('binningY', cropCache.fd),
							_Utils_Tuple2('width', dimensions.u),
							_Utils_Tuple2('height', dimensions._)
						])));
			var cropFileName = A2(
				$elm$core$String$join,
				'-',
				A2(
					$elm$core$List$map,
					function (_v1) {
						var prop = _v1.a;
						var val = _v1.b;
						return A2(
							$elm$core$String$join,
							'-',
							_List_fromArray(
								[
									prop,
									$elm$core$String$fromInt(val)
								]));
					},
					_List_fromArray(
						[
							_Utils_Tuple2('left', leftInWindow),
							_Utils_Tuple2('top', topInWindow),
							_Utils_Tuple2('binx', cropCache.fd),
							_Utils_Tuple2('biny', cropCache.fd)
						])));
			var downloadFileName = viewConfig.dT('reading-' + (readFromWindowCache.w.h7 + ('-screenshot-crop-' + (cropFileName + '.png'))));
			var cropImageUrl = A2(
				viewConfig.dw,
				{aN: downloadFileName},
				cropCache.dQ);
			var imageElement = ((dimensions.u < 1) || (dimensions._ < 1)) ? $mdgriffith$elm_ui$Element$none : $mdgriffith$elm_ui$Element$html(
				A2(
					$elm$html$Html$img,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$src(cropImageUrl)
						]),
					_List_Nil));
			var downloadImageButton = A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(4)
					]),
				A2(
					$author$project$Frontend$Visuals$buttonElement,
					_List_Nil,
					{
						bo: false,
						lA: $author$project$Frontend$View$exportButtonLabelFromText('Export crop as PNG'),
						by: $elm$core$Maybe$Just(
							$author$project$Frontend$DevTools$UserInputDownloadPngFileFromEvent(
								{
									a_: $author$project$Frontend$DevTools$SessionEventUrlFileContent(cropImageUrl),
									aN: downloadFileName
								}))
					}));
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						imageElement,
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(descriptionText)
							])),
						downloadImageButton
					]));
		};
		var describeWindowText = A2(
			$elm$core$String$join,
			', ',
			A2(
				$elm$core$List$map,
				function (_v0) {
					var prop = _v0.a;
					var val = _v0.b;
					return prop + (': ' + val);
				},
				_List_fromArray(
					[
						_Utils_Tuple2(
						'text',
						A2($elm_community$string_extra$String$Extra$surround, '\"', readFromWindowCache.w.jK)),
						_Utils_Tuple2(
						'clientRect.left',
						$elm$core$String$fromInt(readFromWindowCache.w.dD.nB)),
						_Utils_Tuple2(
						'clientRect.top',
						$elm$core$String$fromInt(readFromWindowCache.w.dD.nC)),
						_Utils_Tuple2(
						'clientRect.width',
						$elm$core$String$fromInt(readFromWindowCache.w.bR.c9 - readFromWindowCache.w.bR.cV)),
						_Utils_Tuple2(
						'clientRect.height',
						$elm$core$String$fromInt(readFromWindowCache.w.bR.cp - readFromWindowCache.w.bR.$7))
					])));
		var cropsElements = A2($elm$core$List$map, elementForCrop, readFromWindowCache.er);
		var aggregatePixelsCount = $elm$core$List$sum(
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.b5;
					},
					$elm$core$Array$length),
				A2($elm$core$List$concatMap, $elm$core$Tuple$second, screenshotCropsList)));
		var describeCropsText = $elm$core$String$fromInt(
			$elm$core$List$length(screenshotCropsList)) + (' crop(s) from screenshot with ' + ($elm$core$String$fromInt(aggregatePixelsCount) + ' pixels in total'));
		var headerElement = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Reading from window '),
							$author$project$Frontend$DevTools$viewIdElementFromName(readFromWindowCache.jJ)
						])),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(describeWindowText)
						])),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(describeCropsText)
						]))
				]));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					headerElement,
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					cropsElements)
				]));
	});
var $author$project$Frontend$DevTools$viewAgentSessionEventContent = F2(
	function (viewConfig, agentSessionEvent) {
		var agentEventResponseDetailsElement = A2(
			$elm$core$Maybe$withDefault,
			$mdgriffith$elm_ui$Element$text('Failed to load event response string'),
			A2(
				$elm$core$Maybe$map,
				function (agentEventResponseString) {
					var downloadButtonElement = A2(
						$mdgriffith$elm_ui$Element$el,
						_List_Nil,
						A2(
							$author$project$Frontend$Visuals$buttonElement,
							_List_Nil,
							{
								bo: false,
								lA: $author$project$Frontend$View$exportButtonLabelFromText('Export response from player agent as JSON file'),
								by: $elm$core$Maybe$Just(
									$author$project$Frontend$DevTools$UserInputDownloadJsonFileFromEvent(
										{a_: agentEventResponseString, aN: 'from-agent.json'}))
							}));
					var decodeResponseResult = A2($elm$json$Json$Decode$decodeString, $author$project$Frontend$DevTools$decodeAgentResponse, agentEventResponseString);
					var responseStructureElement = function () {
						if (decodeResponseResult.$ === 1) {
							var decodeError = decodeResponseResult.a;
							return $mdgriffith$elm_ui$Element$text(
								'Failed to decode response: ' + $elm$json$Json$Decode$errorToString(decodeError));
						} else {
							var decodedAgentResponse = decodeResponseResult.a;
							var _v6 = $author$project$Frontend$DevTools$mapFromGeneralAgentResponseStructureToLatest(decodedAgentResponse);
							if (_v6.$ === 1) {
								var mapError = _v6.a;
								return $mdgriffith$elm_ui$Element$text('Failed to map agent response to latest version: ' + mapError);
							} else {
								if (_v6.a.$ === 1) {
									var errorResponse = _v6.a.a;
									return $mdgriffith$elm_ui$Element$text('Response is error message: ' + errorResponse);
								} else {
									switch (_v6.a.a.$) {
										case 2:
											return $mdgriffith$elm_ui$Element$text('Unrelated event type: serialize state');
										case 3:
											return $mdgriffith$elm_ui$Element$text('Unrelated event type: set branches');
										case 0:
											return $mdgriffith$elm_ui$Element$text('Unrelated event type: list exposed functions');
										case 4:
											return $mdgriffith$elm_ui$Element$text('Unrelated event type: estimate serialized state size');
										case 5:
											return $mdgriffith$elm_ui$Element$text('Unrelated event type: list branches');
										case 6:
											return $mdgriffith$elm_ui$Element$text('Unrelated event type: remove branches');
										default:
											var applyFunctionResponse = _v6.a.a.a;
											if (applyFunctionResponse.$ === 1) {
												var applyFunctionErr = applyFunctionResponse.a;
												return $mdgriffith$elm_ui$Element$text('Failed to apply function: ' + applyFunctionErr);
											} else {
												var applyFunctionOk = applyFunctionResponse.a;
												var _v8 = applyFunctionOk.ik;
												if (_v8.$ === 1) {
													return $mdgriffith$elm_ui$Element$text('Missing resultLessStateJson after function application');
												} else {
													var resultLessStateJson = _v8.a;
													var _v9 = A2($elm$json$Json$Decode$decodeValue, $author$project$CompilationInterface$GenerateJsonConverters$jsonDecodeProcessEventResponseResultLessStateJson, resultLessStateJson);
													if (_v9.$ === 1) {
														var decodeErr = _v9.a;
														return $mdgriffith$elm_ui$Element$text(
															'Failed to decode resultLessStateJson: ' + $elm$json$Json$Decode$errorToString(decodeErr));
													} else {
														var responseStructure = _v9.a;
														var tasksStarted = function () {
															if (!responseStructure.$) {
																var continueSession = responseStructure.a;
																return continueSession.i$;
															} else {
																return _List_Nil;
															}
														}();
														var tasksStartedElement = _Utils_eq(tasksStarted, _List_Nil) ? $mdgriffith$elm_ui$Element$text('None') : A2(
															$mdgriffith$elm_ui$Element$wrappedRow,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$spacing(10)
																]),
															A2(
																$elm$core$List$map,
																A2(
																	$elm$core$Basics$composeR,
																	function ($) {
																		return $.di;
																	},
																	$author$project$Frontend$DevTools$viewIdElementFromName),
																tasksStarted));
														var statusDescriptionText = function () {
															if (!responseStructure.$) {
																var continueSession = responseStructure.a;
																return continueSession.dg;
															} else {
																var finishSession = responseStructure.a;
																return finishSession.dg;
															}
														}();
														return A2(
															$mdgriffith$elm_ui$Element$column,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																	$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
																]),
															A2(
																$elm$core$List$concatMap,
																function (_v10) {
																	var title = _v10.a;
																	var element = _v10.b;
																	return _List_fromArray(
																		[
																			A2(
																			$mdgriffith$elm_ui$Element$el,
																			_List_fromArray(
																				[$author$project$Frontend$Visuals$userSelectNone]),
																			$mdgriffith$elm_ui$Element$text(title)),
																			A2(
																			$mdgriffith$elm_ui$Element$el,
																			_List_fromArray(
																				[
																					$author$project$Frontend$DevTools$indentAttribute($author$project$Frontend$Visuals$defaultFontSize),
																					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
																				]),
																			element)
																		]);
																},
																_List_fromArray(
																	[
																		_Utils_Tuple2('Tasks started by bot', tasksStartedElement),
																		_Utils_Tuple2(
																		'Status text from bot',
																		A2(
																			$author$project$Frontend$Visuals$statusTextFromBotElement,
																			{kX: false},
																			statusDescriptionText))
																	])));
													}
												}
											}
									}
								}
							}
						}
					}();
					return A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[downloadButtonElement, responseStructureElement]));
				},
				agentSessionEvent.e_));
		var agentEventDetails = $author$project$Frontend$DevTools$viewAgentEventDetails(agentSessionEvent);
		var agentEventDomainSpecificElement = A2(
			$elm$core$Maybe$withDefault,
			$mdgriffith$elm_ui$Element$none,
			A2(
				$elm$core$Maybe$map,
				function (decodedAgentEvent) {
					return A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						A2(
							$elm$core$List$filterMap,
							function (_v4) {
								var domainName = _v4.a;
								var domainDeriveElement = _v4.b;
								return A2(
									$elm$core$Maybe$map,
									function (domainElement) {
										return A2(
											$mdgriffith$elm_ui$Element$column,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing(8),
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$el,
													$author$project$Frontend$Visuals$headingAttributes(3),
													$mdgriffith$elm_ui$Element$text(domainName)),
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$author$project$Frontend$DevTools$indentAttribute($author$project$Frontend$Visuals$defaultFontSize),
															$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
														]),
													domainElement)
												]));
									},
									domainDeriveElement(decodedAgentEvent));
							},
							_List_fromArray(
								[
									_Utils_Tuple2('EVE Online', $author$project$Frontend$DevTools$viewAgentEventDetailsEveOnline),
									_Utils_Tuple2(
									'Read from window',
									$elm$core$Basics$always(
										A2(
											$elm$core$Maybe$map,
											$elm$core$Basics$apL(
												$author$project$Frontend$DevTools$viewAgentEventDetailsReadFromWindow(viewConfig)),
											agentSessionEvent.cJ.w)))
								])));
				},
				agentEventDetails.dK));
		var _v0 = function () {
			var _v1 = agentSessionEvent.e$;
			if (_v1.$ === 1) {
				var err = _v1.a;
				return _Utils_Tuple2(
					$mdgriffith$elm_ui$Element$text('Failed to load agent event string: ' + err),
					$mdgriffith$elm_ui$Element$text('empty'));
			} else {
				var agentEventString = _v1.a;
				var exportButton = A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(4)
						]),
					A2(
						$author$project$Frontend$Visuals$buttonElement,
						_List_Nil,
						{
							bo: false,
							lA: $author$project$Frontend$View$exportButtonLabelFromText('Export event to player agent as JSON file'),
							by: $elm$core$Maybe$Just(
								$author$project$Frontend$DevTools$UserInputDownloadJsonFileFromEvent(
									{a_: agentEventString.c2, aN: 'to-agent.json'}))
						}));
				var eventDetailsElement = A2(
					$elm$core$Result$withDefault,
					$mdgriffith$elm_ui$Element$none,
					A2(
						$elm$core$Result$map,
						function (agentEvent) {
							var _v2 = agentEvent.f0;
							if (_v2.$ === 3) {
								var taskCompleted = _v2.a;
								var taskTypeText = function () {
									var _v3 = taskCompleted.jd;
									switch (_v3.$) {
										case 0:
											return 'create volatile process';
										case 1:
											return 'request to volatile process';
										case 2:
											return 'open window';
										case 3:
											return 'invoke method on window';
										case 4:
											return 'random bytes';
										case 5:
											return 'windows input';
										default:
											return 'without result';
									}
								}();
								return A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_Nil,
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$author$project$Frontend$Visuals$userSelectNone]),
											$mdgriffith$elm_ui$Element$text('Completed task ')),
											$author$project$Frontend$DevTools$viewIdElementFromName(taskCompleted.di),
											$mdgriffith$elm_ui$Element$text(' (' + (taskTypeText + ')'))
										]));
							} else {
								return $mdgriffith$elm_ui$Element$none;
							}
						},
						A2(
							$elm$core$Result$andThen,
							$author$project$Frontend$DevTools$mapFromGeneralAgentEventStructureToLatest,
							A2($elm$core$Result$mapError, $elm$json$Json$Decode$errorToString, agentEventString.cI))));
				return _Utils_Tuple2(
					A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
							]),
						_List_fromArray(
							[exportButton, eventDetailsElement])),
					A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$htmlAttribute(
										A2($elm$html$Html$Attributes$style, 'font-family', 'monospace, monospace'))
									]),
								$mdgriffith$elm_ui$Element$text(
									A2(
										$author$project$Frontend$Visuals$stringFromIntWithThousandSeparator,
										{ec: '-\u00A0', el: ''},
										$elm$core$String$length(agentEventString.c2)))),
								$mdgriffith$elm_ui$Element$text('chars')
							])));
			}
		}();
		var eventToAgentGenericElement = _v0.a;
		var headingTextDetailElement = _v0.b;
		var eventToAgentHeadingElement = A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
				]),
			A2(
				$elm$core$List$intersperse,
				$mdgriffith$elm_ui$Element$text('-'),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text('Event to player agent'),
						headingTextDetailElement
					])));
		return {
			aY: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						A2(
							$elm$core$List$cons,
							$author$project$Frontend$Visuals$userSelectNone,
							$author$project$Frontend$Visuals$headingAttributes(3)),
						eventToAgentHeadingElement),
						eventToAgentGenericElement,
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$author$project$Frontend$DevTools$indentAttribute(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
							]),
						agentEventDetails.aY(0)),
						A2(
						$mdgriffith$elm_ui$Element$el,
						A2(
							$elm$core$List$cons,
							$author$project$Frontend$Visuals$userSelectNone,
							$author$project$Frontend$Visuals$headingAttributes(3)),
						$mdgriffith$elm_ui$Element$text('Response from player agent')),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$author$project$Frontend$DevTools$indentAttribute(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						agentEventResponseDetailsElement),
						A2(
						$mdgriffith$elm_ui$Element$el,
						A2(
							$elm$core$List$cons,
							$author$project$Frontend$Visuals$userSelectNone,
							$author$project$Frontend$Visuals$headingAttributes(3)),
						$mdgriffith$elm_ui$Element$text('Event to player agent - Domain Specific Details')),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$author$project$Frontend$DevTools$indentAttribute(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						agentEventDomainSpecificElement)
					])),
			a1: agentEventDetails.a1(0)
		};
	});
var $author$project$Frontend$View$viewLargeButton = function (config) {
	return A2(
		$author$project$Frontend$Visuals$buttonElement,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$padding($author$project$Frontend$Visuals$defaultFontSize)
			]),
		{
			bo: false,
			lA: A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size($author$project$Frontend$Visuals$defaultFontSize * 2),
								$mdgriffith$elm_ui$Element$alignTop
							]),
						$mdgriffith$elm_ui$Element$html(
							$lattyware$elm_fontawesome$FontAwesome$view(config.aa))),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								$author$project$Frontend$Visuals$headingAttributes(2),
								$mdgriffith$elm_ui$Element$text(config.jg)),
								function () {
								var _v0 = config.kP;
								if (_v0.$ === 1) {
									return $mdgriffith$elm_ui$Element$none;
								} else {
									var detailText = _v0.a;
									return A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												$author$project$Frontend$Visuals$elementFontSizePercent(90)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(detailText)
											]));
								}
							}()
							]))
					])),
			by: config.ki
		});
};
var $author$project$Frontend$Visuals$formatDurationTextHoursMinutesSeconds = function (_v0) {
	var totalSeconds = _v0.nr;
	var hours = (((totalSeconds / 60) | 0) / 60) | 0;
	var minutes = ((totalSeconds / 60) | 0) - (hours * 60);
	var seconds = (totalSeconds - (minutes * 60)) - ((hours * 60) * 60);
	return A2(
		$elm$core$String$join,
		', ',
		A2(
			$elm$core$List$map,
			function (_v1) {
				var value = _v1.a;
				var unit = _v1.b;
				return A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							$elm$core$String$fromInt(value),
							(value === 1) ? unit : (unit + 's')
						]));
			},
			A2(
				$elm_community$list_extra$List$Extra$dropWhile,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Tuple$first,
					$elm$core$Basics$eq(0)),
				_List_fromArray(
					[
						_Utils_Tuple2(hours, 'hour'),
						_Utils_Tuple2(minutes, 'minute'),
						_Utils_Tuple2(seconds, 'second')
					]))));
};
var $author$project$Frontend$View$guideOnlineSessionUrl = 'https://to.botlab.org/guide/online-session';
var $mdgriffith$elm_ui$Element$Border$widthXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$borderWidth,
			A5(
				$mdgriffith$elm_ui$Internal$Model$BorderWidth,
				'b-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var $mdgriffith$elm_ui$Element$Border$widthEach = function (_v0) {
	var bottom = _v0.cp;
	var top = _v0.$7;
	var left = _v0.cV;
	var right = _v0.c9;
	return (_Utils_eq(top, bottom) && _Utils_eq(left, right)) ? (_Utils_eq(top, right) ? $mdgriffith$elm_ui$Element$Border$width(top) : A2($mdgriffith$elm_ui$Element$Border$widthXY, left, top)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left))))))),
			top,
			right,
			bottom,
			left));
};
var $author$project$Frontend$Visuals$elementLinkStyleAttributes = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$pointer,
		$mdgriffith$elm_ui$Element$Border$widthEach(
		{cp: 1, cV: 0, c9: 0, $7: 0}),
		$mdgriffith$elm_ui$Element$Border$color(
		A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
		$mdgriffith$elm_ui$Element$mouseOver(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$defaultLinkConfig.cY),
				$mdgriffith$elm_ui$Element$Border$color($author$project$Frontend$Visuals$defaultLinkConfig.cY)
			])),
		$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$defaultLinkConfig.af)
	]);
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $mdgriffith$elm_ui$Element$link = F2(
	function (attrs, _v0) {
		var url = _v0.eC;
		var label = _v0.lA;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cD + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.aK + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.lF)))),
								attrs))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty('target');
var $mdgriffith$elm_ui$Element$newTabLink = F2(
	function (attrs, _v0) {
		var url = _v0.eC;
		var label = _v0.lA;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Attributes$target('_blank')),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cD + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.aK + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.lF)))),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Frontend$Visuals$linkElementFromUrlAndLabel = function (_v0) {
	var url = _v0.eC;
	var labelElement = _v0.lB;
	var newTabLink = _v0.lX;
	return A2(
		newTabLink ? $mdgriffith$elm_ui$Element$newTabLink : $mdgriffith$elm_ui$Element$link,
		$author$project$Frontend$Visuals$elementLinkStyleAttributes,
		{lA: labelElement, eC: url});
};
var $author$project$Frontend$Visuals$linkElementFromUrlAndTextLabel = function (_v0) {
	var url = _v0.eC;
	var labelText = _v0.bW;
	var newTabLink = _v0.lX;
	return $author$project$Frontend$Visuals$linkElementFromUrlAndLabel(
		{
			lB: $mdgriffith$elm_ui$Element$text(labelText),
			lX: newTabLink,
			eC: url
		});
};
var $author$project$Frontend$View$onlineOfflineSessionLinkElement = function (lastStatus) {
	var onlineOfflinePart = function () {
		var _v0 = lastStatus.bz;
		if (_v0.$ === 1) {
			return {bW: 'offline session', eC: $author$project$Frontend$View$guideOnlineSessionUrl};
		} else {
			var onlineSessionId = _v0.a;
			return {bW: 'online session ' + onlineSessionId, eC: 'https://reactor.botlab.org/play-sessions/' + onlineSessionId};
		}
	}();
	return $author$project$Frontend$Visuals$linkElementFromUrlAndTextLabel(
		{bW: onlineOfflinePart.bW, lX: true, eC: onlineOfflinePart.eC});
};
var $author$project$Frontend$View$sessionSummaryTimeText = function (timePosix) {
	return {
		fn: $author$project$Frontend$Visuals$calendarDayTextFromPosixTime(timePosix),
		fo: A2(
			$elm$core$String$join,
			':',
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Basics$apR($elm$time$Time$utc),
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Basics$apR(timePosix),
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$fromInt,
							A2($elm$core$String$padLeft, 2, '0')))),
				_List_fromArray(
					[$elm$time$Time$toHour, $elm$time$Time$toMinute])))
	};
};
var $mdgriffith$elm_ui$Element$InternalColumn = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$GridPosition = function (a) {
	return {$: 9, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$GridTemplateStyle = function (a) {
	return {$: 8, a: a};
};
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $mdgriffith$elm_ui$Internal$Model$AsGrid = 3;
var $mdgriffith$elm_ui$Internal$Model$asGrid = 3;
var $mdgriffith$elm_ui$Internal$Model$getSpacing = F2(
	function (attrs, _default) {
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A3(
				$elm$core$List$foldr,
				F2(
					function (attr, acc) {
						if (!acc.$) {
							var x = acc.a;
							return $elm$core$Maybe$Just(x);
						} else {
							if ((attr.$ === 4) && (attr.b.$ === 5)) {
								var _v2 = attr.b;
								var x = _v2.b;
								var y = _v2.c;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}),
				$elm$core$Maybe$Nothing,
				attrs));
	});
var $mdgriffith$elm_ui$Internal$Flag$gridPosition = $mdgriffith$elm_ui$Internal$Flag$flag(35);
var $mdgriffith$elm_ui$Internal$Flag$gridTemplate = $mdgriffith$elm_ui$Internal$Flag$flag(34);
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $mdgriffith$elm_ui$Element$tableHelper = F2(
	function (attrs, config) {
		var onGrid = F3(
			function (rowLevel, columnLevel, elem) {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$StyleClass,
							$mdgriffith$elm_ui$Internal$Flag$gridPosition,
							$mdgriffith$elm_ui$Internal$Model$GridPosition(
								{kt: columnLevel, _: 1, mu: rowLevel, u: 1}))
						]),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[elem])));
			});
		var columnWidth = function (col) {
			if (!col.$) {
				var colConfig = col.a;
				return colConfig.u;
			} else {
				var colConfig = col.a;
				return colConfig.u;
			}
		};
		var columnHeader = function (col) {
			if (!col.$) {
				var colConfig = col.a;
				return colConfig.aw;
			} else {
				var colConfig = col.a;
				return colConfig.aw;
			}
		};
		var maybeHeaders = function (headers) {
			return A2(
				$elm$core$List$all,
				$elm$core$Basics$eq($mdgriffith$elm_ui$Internal$Model$Empty),
				headers) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (col, header) {
							return A3(onGrid, 1, col + 1, header);
						}),
					headers));
		}(
			A2($elm$core$List$map, columnHeader, config.kv));
		var add = F3(
			function (cell, columnConfig, cursor) {
				if (!columnConfig.$) {
					var col = columnConfig.a;
					return _Utils_update(
						cursor,
						{
							aJ: cursor.aJ + 1,
							at: A2(
								$elm$core$List$cons,
								A3(
									onGrid,
									cursor.mu,
									cursor.aJ,
									A2(
										col.eG,
										_Utils_eq(maybeHeaders, $elm$core$Maybe$Nothing) ? (cursor.mu - 1) : (cursor.mu - 2),
										cell)),
								cursor.at)
						});
				} else {
					var col = columnConfig.a;
					return {
						aJ: cursor.aJ + 1,
						at: A2(
							$elm$core$List$cons,
							A3(
								onGrid,
								cursor.mu,
								cursor.aJ,
								col.eG(cell)),
							cursor.at),
						mu: cursor.mu
					};
				}
			});
		var build = F3(
			function (columns, rowData, cursor) {
				var newCursor = A3(
					$elm$core$List$foldl,
					add(rowData),
					cursor,
					columns);
				return {aJ: 1, at: newCursor.at, mu: cursor.mu + 1};
			});
		var children = A3(
			$elm$core$List$foldl,
			build(config.kv),
			{
				aJ: 1,
				at: _List_Nil,
				mu: _Utils_eq(maybeHeaders, $elm$core$Maybe$Nothing) ? 1 : 2
			},
			config.kF);
		var _v0 = A2(
			$mdgriffith$elm_ui$Internal$Model$getSpacing,
			attrs,
			_Utils_Tuple2(0, 0));
		var sX = _v0.a;
		var sY = _v0.b;
		var template = A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$gridTemplate,
			$mdgriffith$elm_ui$Internal$Model$GridTemplateStyle(
				{
					kv: A2($elm$core$List$map, columnWidth, config.kv),
					mv: A2(
						$elm$core$List$repeat,
						$elm$core$List$length(config.kF),
						$mdgriffith$elm_ui$Internal$Model$Content),
					mN: _Utils_Tuple2(
						$mdgriffith$elm_ui$Element$px(sX),
						$mdgriffith$elm_ui$Element$px(sY))
				}));
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asGrid,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				A2($elm$core$List$cons, template, attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				function () {
					if (maybeHeaders.$ === 1) {
						return children.at;
					} else {
						var renderedHeaders = maybeHeaders.a;
						return _Utils_ap(
							renderedHeaders,
							$elm$core$List$reverse(children.at));
					}
				}()));
	});
var $mdgriffith$elm_ui$Element$table = F2(
	function (attrs, config) {
		return A2(
			$mdgriffith$elm_ui$Element$tableHelper,
			attrs,
			{
				kv: A2($elm$core$List$map, $mdgriffith$elm_ui$Element$InternalColumn, config.kv),
				kF: config.kF
			});
	});
var $author$project$Frontend$View$catalogLinkFromArtifactId = $elm$core$Basics$append('https://catalog.botlab.org/');
var $author$project$Frontend$View$catalogLinkShortFromArtifactId = A2(
	$elm$core$Basics$composeR,
	$elm$core$String$left(10),
	$author$project$Frontend$View$catalogLinkFromArtifactId);
var $author$project$Frontend$Visuals$linkElementFromHref = F2(
	function (_v0, href) {
		var newTabLink = _v0.lX;
		return $author$project$Frontend$Visuals$linkElementFromUrlAndTextLabel(
			{bW: href, lX: newTabLink, eC: href});
	});
var $author$project$Frontend$DevTools$viewArtifactParagraphInSessionSummary = function (_v0) {
	var artifactId = _v0.bj;
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_Nil,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(
				A2($elm$core$String$left, 10, artifactId)),
				$mdgriffith$elm_ui$Element$text(' ('),
				A2(
				$author$project$Frontend$Visuals$linkElementFromHref,
				{lX: true},
				$author$project$Frontend$View$catalogLinkShortFromArtifactId(artifactId)),
				$mdgriffith$elm_ui$Element$text(')')
			]));
};
var $author$project$Frontend$DevTools$viewBotElementForBotIdInSessionSummary = F2(
	function (viewConfig, botId) {
		var exportBotProgramArchiveButton = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
					$mdgriffith$elm_ui$Element$padding(4)
				]),
			A2(
				$mdgriffith$elm_ui$Element$downloadAs,
				_List_Nil,
				{
					f7: 'bot-program-' + (botId + '.zip'),
					lA: A2(
						$author$project$Frontend$Visuals$buttonElement,
						_List_Nil,
						{
							bo: false,
							lA: $author$project$Frontend$View$exportButtonLabelFromText('Export bot program'),
							by: $elm$core$Maybe$Nothing
						}),
					eC: viewConfig.c3(
						_List_fromArray(
							['export-bot-program-zip-archive']))
				}));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					$author$project$Frontend$DevTools$viewArtifactParagraphInSessionSummary(
					{bj: botId}),
					exportBotProgramArchiveButton
				]));
	});
var $author$project$Frontend$DevTools$viewSessionSummary = F2(
	function (viewConfig, sessionSummary) {
		var startTimeTexts = A2(
			$elm$core$Maybe$withDefault,
			{fn: '', fo: ''},
			A2(
				$elm$core$Maybe$map,
				A2($elm$core$Basics$composeR, $elm$time$Time$millisToPosix, $author$project$Frontend$View$sessionSummaryTimeText),
				sessionSummary.f8));
		var onlineSessionElement = A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_Nil,
			_List_fromArray(
				[
					$author$project$Frontend$View$onlineOfflineSessionLinkElement(sessionSummary)
				]));
		var summaryProperties = _List_fromArray(
			[
				_Utils_Tuple2(
				'Local session name',
				$mdgriffith$elm_ui$Element$text(viewConfig.bD)),
				_Utils_Tuple2('Online session', onlineSessionElement),
				_Utils_Tuple2(
				'BotLab Engine version',
				$mdgriffith$elm_ui$Element$text(sessionSummary.fW)),
				_Utils_Tuple2(
				'Bot',
				function () {
					var _v0 = sessionSummary.bl;
					if (_v0.$ === 1) {
						var errorText = _v0.a;
						return A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$errorColor),
									$mdgriffith$elm_ui$Element$padding($author$project$Frontend$Visuals$defaultFontSize)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Failed to load bot ID: ' + errorText)
								]));
					} else {
						var botId = _v0.a;
						return A2($author$project$Frontend$DevTools$viewBotElementForBotIdInSessionSummary, viewConfig, botId);
					}
				}()),
				_Utils_Tuple2(
				'Bot Framework',
				$author$project$Frontend$DevTools$viewArtifactParagraphInSessionSummary(
					{bj: sessionSummary.fh})),
				_Utils_Tuple2(
				'Start time',
				$mdgriffith$elm_ui$Element$text(startTimeTexts.fn + (' ' + startTimeTexts.fo))),
				_Utils_Tuple2(
				'Events',
				$mdgriffith$elm_ui$Element$text(
					$elm$core$String$fromInt(sessionSummary.eX))),
				_Utils_Tuple2(
				'Duration',
				$mdgriffith$elm_ui$Element$text(
					$author$project$Frontend$Visuals$formatDurationTextHoursMinutesSeconds(
						{nr: sessionSummary.fT})))
			]);
		var asTable = A2(
			$mdgriffith$elm_ui$Element$table,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
				]),
			{
				kv: _List_fromArray(
					[
						{
						aw: $mdgriffith$elm_ui$Element$none,
						eG: A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $mdgriffith$elm_ui$Element$text),
						u: $mdgriffith$elm_ui$Element$shrink
					},
						{aw: $mdgriffith$elm_ui$Element$none, eG: $elm$core$Tuple$second, u: $mdgriffith$elm_ui$Element$fill}
					]),
				kF: summaryProperties
			});
		return asTable;
	});
var $author$project$Frontend$DevTools$ExpandTimelineViewportsEvent = function (a) {
	return {$: 2, a: a};
};
var $elm$virtual_dom$VirtualDom$Custom = function (a) {
	return {$: 3, a: a};
};
var $elm$html$Html$Events$custom = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Custom(decoder));
	});
var $elm$html$Html$Events$keyCode = A2($elm$json$Json$Decode$field, 'keyCode', $elm$json$Json$Decode$int);
var $author$project$Frontend$DevTools$UserInputKeyDown = {$: 4};
var $author$project$Frontend$DevTools$UserInputKeyUp = {$: 3};
var $author$project$Frontend$DevTools$keyCodeToEvent = function (keyCode) {
	switch (keyCode) {
		case 38:
			return $elm$json$Json$Decode$succeed($author$project$Frontend$DevTools$UserInputKeyUp);
		case 40:
			return $elm$json$Json$Decode$succeed($author$project$Frontend$DevTools$UserInputKeyDown);
		default:
			return $elm$json$Json$Decode$fail('Other key');
	}
};
var $author$project$Frontend$DevTools$keyDownDecoder = A2($elm$json$Json$Decode$andThen, $author$project$Frontend$DevTools$keyCodeToEvent, $elm$html$Html$Events$keyCode);
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$squareCaretDown = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'square-caret-down',
	_Utils_Tuple2(448, 512),
	_Utils_Tuple2('M384 480c35.3 0 64-28.7 64-64l0-320c0-35.3-28.7-64-64-64L64 32C28.7 32 0 60.7 0 96L0 416c0 35.3 28.7 64 64 64l320 0zM224 352c-6.7 0-13-2.8-17.6-7.7l-104-112c-6.5-7-8.2-17.2-4.4-25.9s12.5-14.4 22-14.4l208 0c9.5 0 18.2 5.7 22 14.4s2.1 18.9-4.4 25.9l-104 112c-4.5 4.9-10.9 7.7-17.6 7.7z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$squareCaretDown = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$squareCaretDown);
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$squareCaretUp = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'square-caret-up',
	_Utils_Tuple2(448, 512),
	_Utils_Tuple2('M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM224 160c6.7 0 13 2.8 17.6 7.7l104 112c6.5 7 8.2 17.2 4.4 25.9s-12.5 14.4-22 14.4H120c-9.5 0-18.2-5.7-22-14.4s-2.1-18.9 4.4-25.9l104-112c4.5-4.9 10.9-7.7 17.6-7.7z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$squareCaretUp = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$squareCaretUp);
var $author$project$Frontend$DevTools$QuestionMark_IconInTimeline = 0;
var $author$project$Frontend$DevTools$SelectAgentEvent = function (a) {
	return {$: 1, a: a};
};
var $avh4$elm_color$Color$toCssString = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	var roundTo = function (x) {
		return $elm$core$Basics$round(x * 1000) / 1000;
	};
	var pct = function (x) {
		return $elm$core$Basics$round(x * 10000) / 100;
	};
	return $elm$core$String$concat(
		_List_fromArray(
			[
				'rgba(',
				$elm$core$String$fromFloat(
				pct(r)),
				'%,',
				$elm$core$String$fromFloat(
				pct(g)),
				'%,',
				$elm$core$String$fromFloat(
				pct(b)),
				'%,',
				$elm$core$String$fromFloat(
				roundTo(a)),
				')'
			]));
};
var $lattyware$elm_fontawesome$FontAwesome$Regular$Definitions$clock = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'far',
	'clock',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M464 256A208 208 0 1 1 48 256a208 208 0 1 1 416 0zM0 256a256 256 0 1 0 512 0A256 256 0 1 0 0 256zM232 120V256c0 8 4 15.5 10.7 20l96 64c11 7.4 25.9 4.4 33.3-6.7s4.4-25.9-6.7-33.3L280 243.2V120c0-13.3-10.7-24-24-24s-24 10.7-24 24z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Regular$clock = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Regular$Definitions$clock);
var $author$project$Frontend$DevTools$clock_IconInTimeline_html = $lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Regular$clock);
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$cube = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'cube',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M234.5 5.7c13.9-5 29.1-5 43.1 0l192 68.6C495 83.4 512 107.5 512 134.6V377.4c0 27-17 51.2-42.5 60.3l-192 68.6c-13.9 5-29.1 5-43.1 0l-192-68.6C17 428.6 0 404.5 0 377.4V134.6c0-27 17-51.2 42.5-60.3l192-68.6zM256 66L82.3 128 256 190l173.7-62L256 66zm32 368.6l160-57.1v-188L288 246.6v188z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$cube = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$cube);
var $author$project$Frontend$DevTools$cube_IconInTimeline_html = $lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Solid$cube);
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$dice = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'dice',
	_Utils_Tuple2(640, 512),
	_Utils_Tuple2('M274.9 34.3c-28.1-28.1-73.7-28.1-101.8 0L34.3 173.1c-28.1 28.1-28.1 73.7 0 101.8L173.1 413.7c28.1 28.1 73.7 28.1 101.8 0L413.7 274.9c28.1-28.1 28.1-73.7 0-101.8L274.9 34.3zM200 224a24 24 0 1 1 48 0 24 24 0 1 1 -48 0zM96 200a24 24 0 1 1 0 48 24 24 0 1 1 0-48zM224 376a24 24 0 1 1 0-48 24 24 0 1 1 0 48zM352 200a24 24 0 1 1 0 48 24 24 0 1 1 0-48zM224 120a24 24 0 1 1 0-48 24 24 0 1 1 0 48zm96 328c0 35.3 28.7 64 64 64H576c35.3 0 64-28.7 64-64V256c0-35.3-28.7-64-64-64H461.7c11.6 36 3.1 77-25.4 105.5L320 413.8V448zM480 328a24 24 0 1 1 0 48 24 24 0 1 1 0-48z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$dice = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$dice);
var $author$project$Frontend$DevTools$dice_IconInTimeline_html = $lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Solid$dice);
var $lattyware$elm_fontawesome$FontAwesome$Regular$Definitions$envelope = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'far',
	'envelope',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M64 112c-8.8 0-16 7.2-16 16v22.1L220.5 291.7c20.7 17 50.4 17 71.1 0L464 150.1V128c0-8.8-7.2-16-16-16H64zM48 212.2V384c0 8.8 7.2 16 16 16H448c8.8 0 16-7.2 16-16V212.2L322 328.8c-38.4 31.5-93.7 31.5-132 0L48 212.2zM0 128C0 92.7 28.7 64 64 64H448c35.3 0 64 28.7 64 64V384c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V128z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Regular$envelope = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Regular$Definitions$envelope);
var $author$project$Frontend$DevTools$envelope_IconInTimeline_html = $lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Regular$envelope);
var $lattyware$elm_fontawesome$FontAwesome$Regular$Definitions$circleXmark = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'far',
	'circle-xmark',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M256 48a208 208 0 1 1 0 416 208 208 0 1 1 0-416zm0 464A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c-9.4 9.4-9.4 24.6 0 33.9l47 47-47 47c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l47-47 47 47c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-47-47 47-47c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-47 47-47-47c-9.4-9.4-24.6-9.4-33.9 0z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Regular$circleXmark = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Regular$Definitions$circleXmark);
var $author$project$Frontend$DevTools$error_IconInTimeline_html = $lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Regular$circleXmark);
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$image = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'image',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M0 96C0 60.7 28.7 32 64 32H448c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96zM323.8 202.5c-4.5-6.6-11.9-10.5-19.8-10.5s-15.4 3.9-19.8 10.5l-87 127.6L170.7 297c-4.6-5.7-11.5-9-18.7-9s-14.2 3.3-18.7 9l-64 80c-5.8 7.2-6.9 17.1-2.9 25.4s12.4 13.6 21.6 13.6h96 32H424c8.9 0 17.1-4.9 21.2-12.8s3.6-17.4-1.4-24.7l-120-176zM112 192a48 48 0 1 0 0-96 48 48 0 1 0 0 96z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$image = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$image);
var $author$project$Frontend$DevTools$image_IconInTimeline_html = $lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Solid$image);
var $lattyware$elm_fontawesome$FontAwesome$Regular$Definitions$circleQuestion = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'far',
	'circle-question',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm169.8-90.7c7.9-22.3 29.1-37.3 52.8-37.3h58.3c34.9 0 63.1 28.3 63.1 63.1c0 22.6-12.1 43.5-31.7 54.8L280 264.4c-.2 13-10.9 23.6-24 23.6c-13.3 0-24-10.7-24-24V250.5c0-8.6 4.6-16.5 12.1-20.8l44.3-25.4c4.7-2.7 7.6-7.7 7.6-13.1c0-8.4-6.8-15.1-15.1-15.1H222.6c-3.4 0-6.4 2.1-7.5 5.3l-.4 1.2c-4.4 12.5-18.2 19-30.6 14.6s-19-18.2-14.6-30.6l.4-1.2zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Regular$circleQuestion = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Regular$Definitions$circleQuestion);
var $author$project$Frontend$DevTools$questionMark_IconInTimeline_html = $lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Regular$circleQuestion);
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$stopwatch = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'stopwatch',
	_Utils_Tuple2(448, 512),
	_Utils_Tuple2('M176 0c-17.7 0-32 14.3-32 32s14.3 32 32 32h16V98.4C92.3 113.8 16 200 16 304c0 114.9 93.1 208 208 208s208-93.1 208-208c0-41.8-12.3-80.7-33.5-113.2l24.1-24.1c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L355.7 143c-28.1-23-62.2-38.8-99.7-44.6V64h16c17.7 0 32-14.3 32-32s-14.3-32-32-32H224 176zm72 192V320c0 13.3-10.7 24-24 24s-24-10.7-24-24V192c0-13.3 10.7-24 24-24s24 10.7 24 24z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$stopwatch = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$stopwatch);
var $author$project$Frontend$DevTools$stopwatch_IconInTimeline_html = $lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Solid$stopwatch);
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$wrench = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'wrench',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M352 320c88.4 0 160-71.6 160-160c0-15.3-2.2-30.1-6.2-44.2c-3.1-10.8-16.4-13.2-24.3-5.3l-76.8 76.8c-3 3-7.1 4.7-11.3 4.7H336c-8.8 0-16-7.2-16-16V118.6c0-4.2 1.7-8.3 4.7-11.3l76.8-76.8c7.9-7.9 5.4-21.2-5.3-24.3C382.1 2.2 367.3 0 352 0C263.6 0 192 71.6 192 160c0 19.1 3.4 37.5 9.5 54.5L19.9 396.1C7.2 408.8 0 426.1 0 444.1C0 481.6 30.4 512 67.9 512c18 0 35.3-7.2 48-19.9L297.5 310.5c17 6.2 35.4 9.5 54.5 9.5zM80 408a24 24 0 1 1 0 48 24 24 0 1 1 0-48z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$wrench = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$wrench);
var $author$project$Frontend$DevTools$wrench_IconInTimeline_html = $lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Solid$wrench);
var $author$project$Frontend$DevTools$viewIconInTimeline = function (icon) {
	switch (icon) {
		case 5:
			return $author$project$Frontend$DevTools$clock_IconInTimeline_html;
		case 3:
			return $author$project$Frontend$DevTools$cube_IconInTimeline_html;
		case 7:
			return $author$project$Frontend$DevTools$dice_IconInTimeline_html;
		case 2:
			return $author$project$Frontend$DevTools$envelope_IconInTimeline_html;
		case 8:
			return $author$project$Frontend$DevTools$error_IconInTimeline_html;
		case 6:
			return $author$project$Frontend$DevTools$image_IconInTimeline_html;
		case 1:
			return $author$project$Frontend$DevTools$stopwatch_IconInTimeline_html;
		case 4:
			return $author$project$Frontend$DevTools$wrench_IconInTimeline_html;
		default:
			return $author$project$Frontend$DevTools$questionMark_IconInTimeline_html;
	}
};
var $author$project$Frontend$DevTools$viewAgentEventElementInTimeline = function (_v0) {
	var agentEventIndex = _v0.eY;
	var loadAgentEventResult = _v0.ax;
	var state = _v0.i0;
	var isSelected = function () {
		var _v2 = state.L;
		if (_v2.$ === 1) {
			return false;
		} else {
			var selectedAgentEventIndex = _v2.a;
			return _Utils_eq(selectedAgentEventIndex, agentEventIndex);
		}
	}();
	var timelineItemCssClass = isSelected ? 'timeline-agent-event selected' : 'timeline-agent-event';
	var detailsRecord = function () {
		if (loadAgentEventResult.$ === 1) {
			return {
				M: _List_fromArray(
					[
						{
						af: A3($avh4$elm_color$Color$rgb, 0.7, 0.7, 0.7),
						aa: 0
					}
					]),
				bf: 'Not loaded'
			};
		} else {
			if (loadAgentEventResult.a.$ === 1) {
				return {
					M: _List_fromArray(
						[$author$project$Frontend$DevTools$errorColoredIcon]),
					bf: 'Failed to load event'
				};
			} else {
				var agentEventContent = loadAgentEventResult.a.a;
				var fullRecord = $author$project$Frontend$DevTools$viewAgentEventDetails(agentEventContent);
				return {M: fullRecord.M, bf: fullRecord.bf};
			}
		}
	}();
	var clickEvent = $author$project$Frontend$DevTools$SelectAgentEvent(
		{bV: agentEventIndex});
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$id(
				$author$project$Frontend$DevTools$timelineAgentEventEntryElementId(
					{bV: agentEventIndex})),
				$elm$html$Html$Events$onClick(
				$author$project$Frontend$DevTools$UserInputClick(clickEvent)),
				$elm$html$Html$Attributes$class(timelineItemCssClass)
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('timeline-agent-event-icons')
					]),
				A2(
					$elm$core$List$map,
					function (coloredIcon) {
						return A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									A2(
									$elm$html$Html$Attributes$style,
									'color',
									$avh4$elm_color$Color$toCssString(coloredIcon.af)),
									$elm$html$Html$Attributes$class('timeline-agent-event-icon')
								]),
							_List_fromArray(
								[
									$author$project$Frontend$DevTools$viewIconInTimeline(coloredIcon.aa)
								]));
					},
					detailsRecord.M)),
				$elm$html$Html$text(detailsRecord.bf),
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('timeline-agent-event-index')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(
						$elm$core$String$fromInt(agentEventIndex))
					]))
			]));
};
var $author$project$Frontend$DevTools$viewAgentEventElementInTimelineCss = '\n.timeline-agent-event {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 5px;\n  cursor: pointer;\n  border-width: 1px;\n  border-style: solid;\n  box-sizing: border-box;\n\n    /* Default border color */\n    border-color: transparent;\n\n    /* Default background color */\n    background-color: transparent;\n}\n\n/* Hover subclass */\n.timeline-agent-event:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n    border-color: rgba(255, 255, 255, 0.2);\n}\n\n/* Selected subclass */\n.timeline-agent-event.selected {\n    background-color: rgba(0, 51, 102, 0.8);\n    border-color: rgba(0, 127, 255, 0.9);\n}\n\n/* Icons container */\n.timeline-agent-event-icons {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    width: 40px;\n}\n\n/* Icon */\n.timeline-agent-event-icon {\n    margin-inline: 2px;\n}\n\n/* Event index text container */\n.timeline-agent-event-index {\n    margin-left: auto;\n}\n\n';
var $author$project$Frontend$DevTools$viewSessionTimelineViewport = F3(
	function (state, sessionSummary, viewport) {
		var expandButtonForViewport = function (newViewportBeforeClamping) {
			var newViewport = {
				x: A2($elm$core$Basics$max, 0, newViewportBeforeClamping.x),
				G: A2($elm$core$Basics$min, sessionSummary.eX - 1, newViewportBeforeClamping.G)
			};
			var projectedState = A2($author$project$Frontend$DevTools$updateSelectedSessionToExpandTimelineViewports, newViewport, state);
			var icon = (_Utils_cmp(newViewport.x, viewport.x) < 0) ? $lattyware$elm_fontawesome$FontAwesome$Solid$squareCaretDown : $lattyware$elm_fontawesome$FontAwesome$Solid$squareCaretUp;
			return _Utils_eq(projectedState, state) ? $mdgriffith$elm_ui$Element$none : A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Events$onClick(
						$author$project$Frontend$DevTools$UserInputClick(
							$author$project$Frontend$DevTools$ExpandTimelineViewportsEvent(newViewport))),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Frontend$Visuals$primaryButtonBackgroundColor.kM),
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color($author$project$Frontend$Visuals$primaryButtonBackgroundColor.lV)
							])),
						A2($mdgriffith$elm_ui$Element$paddingXY, $author$project$Frontend$Visuals$defaultFontSize, ($author$project$Frontend$Visuals$defaultFontSize / 3) | 0),
						$mdgriffith$elm_ui$Element$pointer,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				$mdgriffith$elm_ui$Element$html(
					$lattyware$elm_fontawesome$FontAwesome$view(icon)));
		};
		var expandToEarlierButton = expandButtonForViewport(
			{x: viewport.x - (($author$project$Frontend$DevTools$initialViewportsLengths / 10) | 0), G: viewport.G});
		var expandToLaterButton = expandButtonForViewport(
			{x: viewport.x, G: viewport.G + (($author$project$Frontend$DevTools$initialViewportsLengths / 10) | 0)});
		var eventsElements = A3(
			$elm$core$List$foldl,
			F2(
				function (agentEventIndex, aggregate) {
					return A2(
						$elm$core$List$cons,
						$author$project$Frontend$DevTools$viewAgentEventElementInTimeline(
							{
								eY: agentEventIndex,
								ax: A2($elm$core$Dict$get, agentEventIndex, state.ax),
								i0: {L: state.L}
							}),
						aggregate);
				}),
			_List_Nil,
			A2($elm$core$List$range, viewport.x, viewport.G));
		var eventsColumnKeyDownDecoder = A2(
			$elm$json$Json$Decode$map,
			function (event) {
				return {lN: event, mh: true, mY: true};
			},
			$author$project$Frontend$DevTools$keyDownDecoder);
		var eventsColumn = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Events$custom, 'keydown', eventsColumnKeyDownDecoder)),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$tabindex(0)),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color(
					A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.1))
				]),
			$mdgriffith$elm_ui$Element$html(
				A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'contain', 'content'),
							A2($elm$html$Html$Attributes$style, 'display', 'flex'),
							A2($elm$html$Html$Attributes$style, 'flex-direction', 'column')
						]),
					A2(
						$elm$core$List$cons,
						A3(
							$elm$html$Html$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$html$Html$text($author$project$Frontend$DevTools$viewAgentEventElementInTimelineCss)
								])),
						eventsElements))));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[expandToLaterButton, eventsColumn, expandToEarlierButton]));
	});
var $author$project$Frontend$DevTools$viewSessionLoaded = F3(
	function (viewConfig, stateBeforeAdjustTimeline, sessionSummary) {
		var timelineElementFromText = function (text) {
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$center,
						$mdgriffith$elm_ui$Element$padding(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(text)
					]));
		};
		var timelineEndElement = timelineElementFromText('session recording ends');
		var timelineBeginElement = timelineElementFromText('session begins');
		var state = A2($author$project$Frontend$DevTools$ensureHasTimelineViewportForEnd, sessionSummary, stateBeforeAdjustTimeline);
		var timelineViewports = A2(
			$elm$core$List$map,
			$author$project$Frontend$DevTools$constrainTimelineViewportToSessionSummary(sessionSummary),
			state.cf);
		var timelineViewportsElements = A2(
			$elm$core$List$map,
			A2($author$project$Frontend$DevTools$viewSessionTimelineViewport, state, sessionSummary),
			A2(
				$elm$core$List$sortBy,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.x;
					},
					$elm$core$Basics$negate),
				timelineViewports));
		var timelineElements = $elm$core$List$concat(
			_List_fromArray(
				[
					_List_fromArray(
					[timelineEndElement]),
					timelineViewportsElements,
					_List_fromArray(
					[timelineBeginElement])
				]));
		var timelineColumn = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color(
					A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.1))
				]),
			timelineElements);
		var sessionIdElement = $mdgriffith$elm_ui$Element$text('Session ' + viewConfig.bD);
		var exportPlaySessionButton = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
					$mdgriffith$elm_ui$Element$padding(4)
				]),
			A2(
				$mdgriffith$elm_ui$Element$downloadAs,
				_List_Nil,
				{
					f7: 'session-recording-' + (viewConfig.bD + '.zip'),
					lA: $author$project$Frontend$View$viewLargeButton(
						{
							ki: $elm$core$Maybe$Nothing,
							kP: $elm$core$Maybe$Just('Export training data for bot development to a file'),
							aa: $lattyware$elm_fontawesome$FontAwesome$Solid$fileExport,
							jg: 'Export play session'
						}),
					eC: viewConfig.c3(
						_List_fromArray(
							['export-session-zip-archive']))
				}));
		var _v0 = function () {
			var _v1 = state.L;
			if (_v1.$ === 1) {
				return _Utils_Tuple2(
					A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
							]),
						_List_fromArray(
							[
								exportPlaySessionButton,
								A2(
								$mdgriffith$elm_ui$Element$el,
								$author$project$Frontend$Visuals$headingAttributes(3),
								$mdgriffith$elm_ui$Element$text('Session Summary')),
								A2($author$project$Frontend$DevTools$viewSessionSummary, viewConfig, sessionSummary)
							])),
					true);
			} else {
				var selectedEventIndex = _v1.a;
				var sessionEventViewConfig = {
					dw: F2(
						function (downloadConfig, eventExportQuery) {
							return A2(
								viewConfig.dR,
								downloadConfig,
								A2($author$project$HostInterface$SessionExportQueryEvent, selectedEventIndex, eventExportQuery));
						}),
					dT: $author$project$Frontend$DevTools$downloadFileNameFromSessionComponentName(
						{
							L: $elm$core$Maybe$Just(selectedEventIndex),
							p: state.p
						})
				};
				var eventDetails = function () {
					var _v2 = A2($elm$core$Dict$get, selectedEventIndex, state.ax);
					if (_v2.$ === 1) {
						return {
							aY: $mdgriffith$elm_ui$Element$none,
							a1: _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Event content not loaded yet. ⏳')
								])
						};
					} else {
						if (_v2.a.$ === 1) {
							var err = _v2.a.a;
							return {
								aY: $mdgriffith$elm_ui$Element$text('Failed to load event content ❌: ' + err),
								a1: _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('Failed to load event content ❌')
									])
							};
						} else {
							var eventContent = _v2.a.a;
							return A2($author$project$Frontend$DevTools$viewAgentSessionEventContent, sessionEventViewConfig, eventContent);
						}
					}
				}();
				return _Utils_Tuple2(
					A2(
						$mdgriffith$elm_ui$Element$map,
						$author$project$Frontend$DevTools$InspectSessionEvent(state.p),
						A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$wrappedRow,
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
											$author$project$Frontend$Visuals$headingAttributes(3))),
									A2(
										$elm$core$List$map,
										$mdgriffith$elm_ui$Element$el(
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$centerY])),
										A2(
											$elm$core$List$intersperse,
											$mdgriffith$elm_ui$Element$text('-'),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Element$text(
													'Event [ ' + ($elm$core$String$fromInt(selectedEventIndex) + ' ]')),
												eventDetails.a1)))),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$scrollbarY,
											$author$project$Frontend$Visuals$mitigate_2024_09_scrollbar_issue
										]),
									eventDetails.aY)
								]))),
					false);
			}
		}();
		var detailsElement = _v0.a;
		var isDisplayingSummary = _v0.b;
		var viewSummaryButton = A2(
			$author$project$Frontend$Visuals$buttonElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$transparent(isDisplayingSummary)
				]),
			{
				bo: false,
				lA: $mdgriffith$elm_ui$Element$text('View session summary'),
				by: $elm$core$Maybe$Just(
					$author$project$Frontend$DevTools$UserInputClick($author$project$Frontend$DevTools$ViewSessionSummary))
			});
		var headerElement = A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					sessionIdElement,
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$padding(4)
						]),
					viewSummaryButton)
				]));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$padding(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
						]),
					headerElement),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'font-weight', 'normal')),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'flex-shrink', '1')),
							$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									A2(
										$mdgriffith$elm_ui$Element$minimum,
										240,
										$mdgriffith$elm_ui$Element$fillPortion(1))),
									$mdgriffith$elm_ui$Element$scrollbarY,
									$mdgriffith$elm_ui$Element$htmlAttribute(
									$elm$html$Html$Attributes$id($author$project$Frontend$DevTools$timelineAgentEventsContainerElementId)),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$author$project$Frontend$Visuals$userSelectNone,
									$mdgriffith$elm_ui$Element$padding(4),
									$author$project$Frontend$Visuals$mitigate_2024_09_scrollbar_issue
								]),
							timelineColumn),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$fillPortion(4)),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$scrollbarY,
									$author$project$Frontend$Visuals$mitigate_2024_09_scrollbar_issue
								]),
							detailsElement)
						]))
				]));
	});
var $author$project$Frontend$DevTools$viewSession = F2(
	function (viewState, state) {
		var titlePrefix = A2(
			$elm$core$String$startsWith,
			'session',
			$elm$core$String$toLower(state.p)) ? '' : 'Session ';
		var detailsElement = function () {
			var _v0 = $elm_community$maybe_extra$Maybe$Extra$join(
				A2($elm$core$Dict$get, state.p, viewState.cX));
			if (_v0.$ === 1) {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding($author$project$Frontend$Visuals$defaultFontSize),
							$mdgriffith$elm_ui$Element$centerX
						]),
					$mdgriffith$elm_ui$Element$text('Loading session summary...'));
			} else {
				if (_v0.a.$ === 1) {
					var loadError = _v0.a.a;
					return A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$errorColor),
								$mdgriffith$elm_ui$Element$padding($author$project$Frontend$Visuals$defaultFontSize)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('Failed to load session summary: '),
								$mdgriffith$elm_ui$Element$text(loadError)
							]));
				} else {
					var sessionSummary = _v0.a.a;
					return A3(
						$author$project$Frontend$DevTools$viewSessionLoaded,
						{
							dR: F2(
								function (downloadConfig, exportQuery) {
									return A2(
										$elm$url$Url$Builder$absolute,
										_Utils_ap(
											$author$project$Frontend$View$pathCommonPrefix,
											_List_fromArray(
												['session', state.p, 'export'])),
										_List_fromArray(
											[
												A2(
												$elm$url$Url$Builder$string,
												'queryJson',
												A2(
													$elm$json$Json$Encode$encode,
													0,
													$author$project$CompilationInterface$GenerateJsonConverters$jsonEncodeSessionExportQuery(exportQuery))),
												A2($elm$url$Url$Builder$string, 'filename', downloadConfig.aN)
											]));
								}),
							c3: A2(
								$elm$core$Basics$composeR,
								$elm$core$Basics$append(
									_List_fromArray(
										['session', state.p])),
								$author$project$Frontend$View$urlFromPath),
							bD: state.p
						},
						state,
						sessionSummary.av);
				}
			}
		}();
		return {
			ff: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						A2(
							$mdgriffith$elm_ui$Element$paragraph,
							A2(
								$elm$core$List$cons,
								$author$project$Frontend$Visuals$userSelectNone,
								$author$project$Frontend$Visuals$headingAttributes(2)),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text(
									_Utils_ap(titlePrefix, state.p))
								]))),
						detailsElement
					])),
			jg: $elm$core$Maybe$Just('DevTools - ' + (titlePrefix + state.p))
		};
	});
var $author$project$Frontend$DevTools$view = F2(
	function (viewState, state) {
		return A2($author$project$Frontend$DevTools$viewSession, viewState, state.V);
	});
var $author$project$Frontend$RunBot$UserInputDevToolsEvent = function (a) {
	return {$: 12, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Left = 0;
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX(0);
var $elm_community$string_extra$String$Extra$ellipsisWith = F3(
	function (howLong, append, string) {
		return (_Utils_cmp(
			$elm$core$String$length(string),
			howLong) < 1) ? string : _Utils_ap(
			A2(
				$elm$core$String$left,
				howLong - $elm$core$String$length(append),
				string),
			append);
	});
var $author$project$Frontend$View$botSourcePathEllipsisForDisplay = A2($elm_community$string_extra$String$Extra$ellipsisWith, 160, ' ...');
var $author$project$Frontend$View$botSourcePathLinkElement = function (sourcePath) {
	return $author$project$Frontend$Visuals$linkElementFromUrlAndTextLabel(
		{
			bW: $author$project$Frontend$View$botSourcePathEllipsisForDisplay(sourcePath),
			lX: true,
			eC: sourcePath
		});
};
var $author$project$Frontend$RunBot$BotSettingsPopup = function (a) {
	return {$: 0, a: a};
};
var $author$project$Frontend$RunBot$PauseBotKeysPopup = function (a) {
	return {$: 1, a: a};
};
var $author$project$Frontend$RunBot$SessionLengthLimitPopup = function (a) {
	return {$: 2, a: a};
};
var $author$project$Frontend$RunBot$UserInputEnterConfigureSessionPopup = function (a) {
	return {$: 3, a: a};
};
var $author$project$Frontend$RunBot$UserInputSetPlaySessionConfig = function (a) {
	return {$: 5, a: a};
};
var $author$project$Frontend$RunBot$greySeparatorElementFromHeight = function (height) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(height)),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5))
			]),
		$mdgriffith$elm_ui$Element$none);
};
var $author$project$Frontend$View$guideInputFocusSchedulingUrl = 'https://to.botlab.org/guide/input-focus-scheduling';
var $author$project$Frontend$RunBot$guideParagraphFromElements = $mdgriffith$elm_ui$Element$paragraph(
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$alpha(0.7),
			$author$project$Frontend$Visuals$userSelectNone
		]));
var $mdgriffith$elm_ui$Element$Font$italic = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.lz);
var $author$project$Frontend$RunBot$displayNameFromVirtualKeyCode = function (virtualKeyCode) {
	return A2(
		$elm$core$Dict$get,
		virtualKeyCode,
		$elm$core$Dict$fromList($author$project$Frontend$View$displayNamesForVirtualKeyCodes));
};
var $author$project$Frontend$RunBot$keyNamesTextInputFromKeyCodes = A2(
	$elm$core$Basics$composeR,
	$elm$core$List$filterMap($author$project$Frontend$RunBot$displayNameFromVirtualKeyCode),
	$elm$core$String$join(' + '));
var $mdgriffith$elm_ui$Element$Input$Option = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$defaultRadioOption = F2(
	function (optionLabel, status) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(14)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(14)),
							$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
							$mdgriffith$elm_ui$Element$Border$rounded(7),
							function () {
							if (status === 2) {
								return $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
							} else {
								return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
							}
						}(),
							$mdgriffith$elm_ui$Element$Border$width(
							function () {
								switch (status) {
									case 0:
										return 1;
									case 1:
										return 1;
									default:
										return 5;
								}
							}()),
							$mdgriffith$elm_ui$Element$Border$color(
							function () {
								switch (status) {
									case 0:
										return A3($mdgriffith$elm_ui$Element$rgb, 208 / 255, 208 / 255, 208 / 255);
									case 1:
										return A3($mdgriffith$elm_ui$Element$rgb, 208 / 255, 208 / 255, 208 / 255);
									default:
										return A3($mdgriffith$elm_ui$Element$rgb, 59 / 255, 153 / 255, 252 / 255);
								}
							}())
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Internal$Model$htmlClass('unfocusable')
						]),
					optionLabel)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$option = F2(
	function (val, txt) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$Option,
			val,
			$mdgriffith$elm_ui$Element$Input$defaultRadioOption(txt));
	});
var $mdgriffith$elm_ui$Element$Input$Column = 1;
var $mdgriffith$elm_ui$Element$Input$AfterFound = 2;
var $mdgriffith$elm_ui$Element$Input$BeforeFound = 1;
var $mdgriffith$elm_ui$Element$Input$Idle = 0;
var $mdgriffith$elm_ui$Element$Input$NotFound = 0;
var $mdgriffith$elm_ui$Element$Input$Selected = 2;
var $mdgriffith$elm_ui$Element$Input$column = F2(
	function (attributes, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					attributes)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Input$downArrow = 'ArrowDown';
var $mdgriffith$elm_ui$Internal$Model$filter = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (x, _v0) {
				var found = _v0.a;
				var has = _v0.b;
				switch (x.$) {
					case 0:
						return _Utils_Tuple2(found, has);
					case 3:
						var key = x.a;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 1:
						var attr = x.a;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 4:
						var style = x.b;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 7:
						var width = x.a;
						return A2($elm$core$Set$member, 'width', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'width', has));
					case 8:
						var height = x.a;
						return A2($elm$core$Set$member, 'height', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'height', has));
					case 2:
						var description = x.a;
						return A2($elm$core$Set$member, 'described', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'described', has));
					case 9:
						var location = x.a;
						var elem = x.b;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 6:
						return A2($elm$core$Set$member, 'align-x', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'align-x', has));
					case 5:
						return A2($elm$core$Set$member, 'align-y', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'align-y', has));
					default:
						return A2($elm$core$Set$member, 'transform', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'transform', has));
				}
			}),
		_Utils_Tuple2(_List_Nil, $elm$core$Set$empty),
		attrs).a;
};
var $mdgriffith$elm_ui$Internal$Model$get = F2(
	function (attrs, isAttr) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, found) {
					return isAttr(x) ? A2($elm$core$List$cons, x, found) : found;
				}),
			_List_Nil,
			$mdgriffith$elm_ui$Internal$Model$filter(attrs));
	});
var $mdgriffith$elm_ui$Element$Input$leftArrow = 'ArrowLeft';
var $mdgriffith$elm_ui$Element$Input$rightArrow = 'ArrowRight';
var $mdgriffith$elm_ui$Element$Input$row = F2(
	function (attributes, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				attributes),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Input$tabindex = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$tabindex);
var $mdgriffith$elm_ui$Element$Input$upArrow = 'ArrowUp';
var $mdgriffith$elm_ui$Element$Input$radioHelper = F3(
	function (orientation, attrs, input) {
		var track = F2(
			function (opt, _v14) {
				var found = _v14.a;
				var prev = _v14.b;
				var nxt = _v14.c;
				var val = opt.a;
				switch (found) {
					case 0:
						return _Utils_eq(
							$elm$core$Maybe$Just(val),
							input.iF) ? _Utils_Tuple3(1, prev, nxt) : _Utils_Tuple3(found, val, nxt);
					case 1:
						return _Utils_Tuple3(2, prev, val);
					default:
						return _Utils_Tuple3(found, prev, nxt);
				}
			});
		var renderOption = function (_v11) {
			var val = _v11.a;
			var view = _v11.b;
			var status = _Utils_eq(
				$elm$core$Maybe$Just(val),
				input.iF) ? 2 : 0;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$pointer,
						function () {
						if (!orientation) {
							return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink);
						} else {
							return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill);
						}
					}(),
						$mdgriffith$elm_ui$Element$Events$onClick(
						input.lZ(val)),
						function () {
						if (status === 2) {
							return $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'aria-checked', 'true'));
						} else {
							return $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'aria-checked', 'false'));
						}
					}(),
						$mdgriffith$elm_ui$Internal$Model$Attr(
						A2($elm$html$Html$Attributes$attribute, 'role', 'radio'))
					]),
				view(status));
		};
		var prevNext = function () {
			var _v5 = input.hE;
			if (!_v5.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var _v6 = _v5.a;
				var val = _v6.a;
				return function (_v7) {
					var found = _v7.a;
					var b = _v7.b;
					var a = _v7.c;
					switch (found) {
						case 0:
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, val));
						case 1:
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, val));
						default:
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, a));
					}
				}(
					A3(
						$elm$core$List$foldl,
						track,
						_Utils_Tuple3(0, val, val),
						input.hE));
			}
		}();
		var optionArea = function () {
			if (!orientation) {
				return A2(
					$mdgriffith$elm_ui$Element$Input$row,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.lA),
						attrs),
					A2($elm$core$List$map, renderOption, input.hE));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$Input$column,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.lA),
						attrs),
					A2($elm$core$List$map, renderOption, input.hE));
			}
		}();
		var events = A2(
			$mdgriffith$elm_ui$Internal$Model$get,
			attrs,
			function (attr) {
				_v3$3:
				while (true) {
					switch (attr.$) {
						case 7:
							if (attr.a.$ === 2) {
								return true;
							} else {
								break _v3$3;
							}
						case 8:
							if (attr.a.$ === 2) {
								return true;
							} else {
								break _v3$3;
							}
						case 1:
							return true;
						default:
							break _v3$3;
					}
				}
				return false;
			});
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			_Utils_ap(
				A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$core$Maybe$Just($mdgriffith$elm_ui$Element$alignLeft),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Element$Input$tabindex(0)),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Internal$Model$htmlClass('focus')),
							$elm$core$Maybe$Just($mdgriffith$elm_ui$Element$Region$announce),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'role', 'radiogroup'))),
							function () {
							if (prevNext.$ === 1) {
								return $elm$core$Maybe$Nothing;
							} else {
								var _v1 = prevNext.a;
								var prev = _v1.a;
								var next = _v1.b;
								return $elm$core$Maybe$Just(
									$mdgriffith$elm_ui$Element$Input$onKeyLookup(
										function (code) {
											if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$leftArrow)) {
												return $elm$core$Maybe$Just(
													input.lZ(prev));
											} else {
												if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$upArrow)) {
													return $elm$core$Maybe$Just(
														input.lZ(prev));
												} else {
													if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$rightArrow)) {
														return $elm$core$Maybe$Just(
															input.lZ(next));
													} else {
														if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$downArrow)) {
															return $elm$core$Maybe$Just(
																input.lZ(next));
														} else {
															if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space)) {
																var _v2 = input.iF;
																if (_v2.$ === 1) {
																	return $elm$core$Maybe$Just(
																		input.lZ(prev));
																} else {
																	return $elm$core$Maybe$Nothing;
																}
															} else {
																return $elm$core$Maybe$Nothing;
															}
														}
													}
												}
											}
										}));
							}
						}()
						])),
				events),
			input.lA,
			optionArea);
	});
var $mdgriffith$elm_ui$Element$Input$radio = $mdgriffith$elm_ui$Element$Input$radioHelper(1);
var $mdgriffith$elm_ui$Element$Font$underline = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.nu);
var $author$project$Frontend$Visuals$userSelectText = $mdgriffith$elm_ui$Element$htmlAttribute(
	A2($elm$html$Html$Attributes$style, 'user-select', 'text'));
var $author$project$Frontend$RunBot$viewBotAuthorsElements = function (botPropertiesFromCode) {
	var authorElementFromForumUserName = function (forumUserName) {
		return $author$project$Frontend$Visuals$linkElementFromUrlAndTextLabel(
			{bW: forumUserName, lX: true, eC: 'https://forum.botlab.org/u/' + forumUserName});
	};
	return A2(
		$elm$core$List$map,
		authorElementFromForumUserName,
		A2($elm$core$Maybe$withDefault, _List_Nil, botPropertiesFromCode.aG));
};
var $mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var $mdgriffith$elm_ui$Internal$Flag$borderStyle = $mdgriffith$elm_ui$Internal$Flag$flag(11);
var $mdgriffith$elm_ui$Element$Border$solid = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$borderStyle, $mdgriffith$elm_ui$Internal$Style$classes.kd);
var $author$project$Markdown$Parser$problemToString = function (problem) {
	switch (problem.$) {
		case 0:
			var string = problem.a;
			return 'Expecting ' + string;
		case 1:
			return 'Expecting int';
		case 2:
			return 'Expecting hex';
		case 3:
			return 'Expecting octal';
		case 4:
			return 'Expecting binary';
		case 5:
			return 'Expecting float';
		case 6:
			return 'Expecting number';
		case 7:
			return 'Expecting variable';
		case 8:
			var string = problem.a;
			return 'Expecting symbol ' + string;
		case 9:
			var string = problem.a;
			return 'Expecting keyword ' + string;
		case 10:
			return 'Expecting keyword end';
		case 11:
			return 'Unexpected char';
		case 12:
			var problemDescription = problem.a;
			return problemDescription;
		default:
			return 'Bad repeat';
	}
};
var $author$project$Markdown$Parser$deadEndToString = function (deadEnd) {
	return 'Problem at row ' + ($elm$core$String$fromInt(deadEnd.mu) + ('\n' + $author$project$Markdown$Parser$problemToString(deadEnd.mi)));
};
var $elm$html$Html$a = _VirtualDom_node('a');
var $elm$html$Html$Attributes$align = $elm$html$Html$Attributes$stringProperty('align');
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $elm$html$Html$blockquote = _VirtualDom_node('blockquote');
var $elm$html$Html$br = _VirtualDom_node('br');
var $elm$html$Html$Attributes$checked = $elm$html$Html$Attributes$boolProperty('checked');
var $elm$html$Html$code = _VirtualDom_node('code');
var $elm$html$Html$del = _VirtualDom_node('del');
var $elm$html$Html$em = _VirtualDom_node('em');
var $elm$html$Html$h1 = _VirtualDom_node('h1');
var $elm$html$Html$h2 = _VirtualDom_node('h2');
var $elm$html$Html$h3 = _VirtualDom_node('h3');
var $elm$html$Html$h4 = _VirtualDom_node('h4');
var $elm$html$Html$h5 = _VirtualDom_node('h5');
var $elm$html$Html$h6 = _VirtualDom_node('h6');
var $elm$html$Html$hr = _VirtualDom_node('hr');
var $elm$html$Html$input = _VirtualDom_node('input');
var $elm$html$Html$li = _VirtualDom_node('li');
var $elm$html$Html$ol = _VirtualDom_node('ol');
var $author$project$Markdown$HtmlRenderer$HtmlRenderer = $elm$core$Basics$identity;
var $author$project$Markdown$Html$resultOr = F2(
	function (ra, rb) {
		if (ra.$ === 1) {
			var singleError = ra.a;
			if (!rb.$) {
				var okValue = rb.a;
				return $elm$core$Result$Ok(okValue);
			} else {
				var errorsSoFar = rb.a;
				return $elm$core$Result$Err(
					A2($elm$core$List$cons, singleError, errorsSoFar));
			}
		} else {
			var okValue = ra.a;
			return $elm$core$Result$Ok(okValue);
		}
	});
var $author$project$Markdown$Html$attributesToString = function (attributes) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$map,
			function (_v0) {
				var name = _v0.c_;
				var value = _v0.eF;
				return name + ('=\"' + (value + '\"'));
			},
			attributes));
};
var $author$project$Markdown$Html$tagToString = F2(
	function (tagName, attributes) {
		return $elm$core$List$isEmpty(attributes) ? ('<' + (tagName + '>')) : ('<' + (tagName + (' ' + ($author$project$Markdown$Html$attributesToString(attributes) + '>'))));
	});
var $author$project$Markdown$Html$oneOf = function (decoders) {
	var unwrappedDecoders = A2(
		$elm$core$List$map,
		function (_v1) {
			var rawDecoder = _v1;
			return rawDecoder;
		},
		decoders);
	return function (rawDecoder) {
		return F3(
			function (tagName, attributes, innerBlocks) {
				return A2(
					$elm$core$Result$mapError,
					function (errors) {
						if (!errors.b) {
							return 'Ran into a oneOf with no possibilities!';
						} else {
							if (!errors.b.b) {
								var singleError = errors.a;
								return 'Problem with the given value:\n\n' + (A2($author$project$Markdown$Html$tagToString, tagName, attributes) + ('\n\n' + (singleError + '\n')));
							} else {
								return 'oneOf failed parsing this value:\n    ' + (A2($author$project$Markdown$Html$tagToString, tagName, attributes) + ('\n\nParsing failed in the following 2 ways:\n\n\n' + (A2(
									$elm$core$String$join,
									'\n\n',
									A2(
										$elm$core$List$indexedMap,
										F2(
											function (index, error) {
												return '(' + ($elm$core$String$fromInt(index + 1) + (') ' + error));
											}),
										errors)) + '\n')));
							}
						}
					},
					A3(rawDecoder, tagName, attributes, innerBlocks));
			});
	}(
		A3(
			$elm$core$List$foldl,
			F2(
				function (decoder, soFar) {
					return F3(
						function (tagName, attributes, children) {
							return A2(
								$author$project$Markdown$Html$resultOr,
								A3(decoder, tagName, attributes, children),
								A3(soFar, tagName, attributes, children));
						});
				}),
			F3(
				function (tagName, attributes, children) {
					return $elm$core$Result$Err(_List_Nil);
				}),
			unwrappedDecoders));
};
var $elm$html$Html$pre = _VirtualDom_node('pre');
var $elm$html$Html$Attributes$start = function (n) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'start',
		$elm$core$String$fromInt(n));
};
var $elm$html$Html$strong = _VirtualDom_node('strong');
var $elm$html$Html$table = _VirtualDom_node('table');
var $elm$html$Html$tbody = _VirtualDom_node('tbody');
var $elm$html$Html$td = _VirtualDom_node('td');
var $elm$html$Html$th = _VirtualDom_node('th');
var $elm$html$Html$thead = _VirtualDom_node('thead');
var $elm$html$Html$tr = _VirtualDom_node('tr');
var $elm$html$Html$ul = _VirtualDom_node('ul');
var $author$project$Markdown$Renderer$defaultHtmlRenderer = {
	j8: $elm$html$Html$blockquote(_List_Nil),
	kr: function (_v0) {
		var body = _v0.ff;
		var language = _v0.g$;
		var classes = function () {
			var _v1 = A2($elm$core$Maybe$map, $elm$core$String$words, language);
			if ((!_v1.$) && _v1.a.b) {
				var _v2 = _v1.a;
				var actualLanguage = _v2.a;
				return _List_fromArray(
					[
						$elm$html$Html$Attributes$class('language-' + actualLanguage)
					]);
			} else {
				return _List_Nil;
			}
		}();
		return A2(
			$elm$html$Html$pre,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$code,
					classes,
					_List_fromArray(
						[
							$elm$html$Html$text(body)
						]))
				]));
	},
	ks: function (content) {
		return A2(
			$elm$html$Html$code,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text(content)
				]));
	},
	kW: function (children) {
		return A2($elm$html$Html$em, _List_Nil, children);
	},
	la: A2($elm$html$Html$br, _List_Nil, _List_Nil),
	lb: function (_v3) {
		var level = _v3.lD;
		var children = _v3.cv;
		switch (level) {
			case 0:
				return A2($elm$html$Html$h1, _List_Nil, children);
			case 1:
				return A2($elm$html$Html$h2, _List_Nil, children);
			case 2:
				return A2($elm$html$Html$h3, _List_Nil, children);
			case 3:
				return A2($elm$html$Html$h4, _List_Nil, children);
			case 4:
				return A2($elm$html$Html$h5, _List_Nil, children);
			default:
				return A2($elm$html$Html$h6, _List_Nil, children);
		}
	},
	lh: $author$project$Markdown$Html$oneOf(_List_Nil),
	lj: function (imageInfo) {
		var _v5 = imageInfo.jg;
		if (!_v5.$) {
			var title = _v5.a;
			return A2(
				$elm$html$Html$img,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$src(imageInfo.de),
						$elm$html$Html$Attributes$alt(imageInfo.e3),
						$elm$html$Html$Attributes$title(title)
					]),
				_List_Nil);
		} else {
			return A2(
				$elm$html$Html$img,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$src(imageInfo.de),
						$elm$html$Html$Attributes$alt(imageInfo.e3)
					]),
				_List_Nil);
		}
	},
	lF: F2(
		function (link, content) {
			var _v6 = link.jg;
			if (!_v6.$) {
				var title = _v6.a;
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(link.kO),
							$elm$html$Html$Attributes$title(title)
						]),
					content);
			} else {
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(link.kO)
						]),
					content);
			}
		}),
	l6: F2(
		function (startingIndex, items) {
			return A2(
				$elm$html$Html$ol,
				function () {
					if (startingIndex === 1) {
						return _List_fromArray(
							[
								$elm$html$Html$Attributes$start(startingIndex)
							]);
					} else {
						return _List_Nil;
					}
				}(),
				A2(
					$elm$core$List$map,
					function (itemBlocks) {
						return A2($elm$html$Html$li, _List_Nil, itemBlocks);
					},
					items));
		}),
	l8: $elm$html$Html$p(_List_Nil),
	m_: function (children) {
		return A2($elm$html$Html$del, _List_Nil, children);
	},
	m$: function (children) {
		return A2($elm$html$Html$strong, _List_Nil, children);
	},
	m2: $elm$html$Html$table(_List_Nil),
	m3: $elm$html$Html$tbody(_List_Nil),
	m4: function (maybeAlignment) {
		var attrs = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$List$singleton,
				A2(
					$elm$core$Maybe$map,
					$elm$html$Html$Attributes$align,
					A2(
						$elm$core$Maybe$map,
						function (alignment) {
							switch (alignment) {
								case 0:
									return 'left';
								case 2:
									return 'center';
								default:
									return 'right';
							}
						},
						maybeAlignment))));
		return $elm$html$Html$td(attrs);
	},
	m5: $elm$html$Html$thead(_List_Nil),
	m6: function (maybeAlignment) {
		var attrs = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$List$singleton,
				A2(
					$elm$core$Maybe$map,
					$elm$html$Html$Attributes$align,
					A2(
						$elm$core$Maybe$map,
						function (alignment) {
							switch (alignment) {
								case 0:
									return 'left';
								case 2:
									return 'center';
								default:
									return 'right';
							}
						},
						maybeAlignment))));
		return $elm$html$Html$th(attrs);
	},
	m7: $elm$html$Html$tr(_List_Nil),
	aD: $elm$html$Html$text,
	nm: A2($elm$html$Html$hr, _List_Nil, _List_Nil),
	nv: function (items) {
		return A2(
			$elm$html$Html$ul,
			_List_Nil,
			A2(
				$elm$core$List$map,
				function (item) {
					var task = item.a;
					var children = item.b;
					var checkbox = function () {
						switch (task) {
							case 0:
								return $elm$html$Html$text('');
							case 1:
								return A2(
									$elm$html$Html$input,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$disabled(true),
											$elm$html$Html$Attributes$checked(false),
											$elm$html$Html$Attributes$type_('checkbox')
										]),
									_List_Nil);
							default:
								return A2(
									$elm$html$Html$input,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$disabled(true),
											$elm$html$Html$Attributes$checked(true),
											$elm$html$Html$Attributes$type_('checkbox')
										]),
									_List_Nil);
						}
					}();
					return A2(
						$elm$html$Html$li,
						_List_Nil,
						A2($elm$core$List$cons, checkbox, children));
				},
				items));
	}
};
var $author$project$Markdown$RawBlock$BlankLine = {$: 10};
var $author$project$Markdown$Block$BlockQuote = function (a) {
	return {$: 3, a: a};
};
var $author$project$Markdown$RawBlock$BlockQuote = function (a) {
	return {$: 11, a: a};
};
var $author$project$Markdown$Block$Cdata = function (a) {
	return {$: 4, a: a};
};
var $author$project$Markdown$Block$CodeBlock = function (a) {
	return {$: 7, a: a};
};
var $author$project$Markdown$RawBlock$CodeBlock = function (a) {
	return {$: 5, a: a};
};
var $author$project$Markdown$Block$CodeSpan = function (a) {
	return {$: 6, a: a};
};
var $author$project$Markdown$Block$CompletedTask = 2;
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$Markdown$Block$Emphasis = function (a) {
	return {$: 3, a: a};
};
var $author$project$Markdown$Inline$Emphasis = F2(
	function (a, b) {
		return {$: 6, a: a, b: b};
	});
var $author$project$Markdown$Parser$EmptyBlock = {$: 0};
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 8, a: a};
};
var $author$project$Markdown$Block$HardLineBreak = {$: 8};
var $author$project$Markdown$Block$Heading = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $author$project$Markdown$RawBlock$Heading = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$Markdown$RawBlock$Html = function (a) {
	return {$: 2, a: a};
};
var $author$project$Markdown$Block$HtmlBlock = function (a) {
	return {$: 0, a: a};
};
var $author$project$Markdown$Block$HtmlComment = function (a) {
	return {$: 1, a: a};
};
var $author$project$Markdown$Block$HtmlDeclaration = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $author$project$Markdown$Block$HtmlElement = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $author$project$Markdown$Block$HtmlInline = function (a) {
	return {$: 0, a: a};
};
var $author$project$Markdown$Block$Image = F3(
	function (a, b, c) {
		return {$: 2, a: a, b: b, c: c};
	});
var $author$project$Markdown$Block$IncompleteTask = 1;
var $author$project$Markdown$RawBlock$IndentedCodeBlock = function (a) {
	return {$: 6, a: a};
};
var $author$project$Markdown$Parser$InlineProblem = function (a) {
	return {$: 2, a: a};
};
var $author$project$Markdown$Block$Link = F3(
	function (a, b, c) {
		return {$: 1, a: a, b: b, c: c};
	});
var $author$project$Markdown$Block$ListItem = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 0, a: a};
};
var $author$project$Markdown$Block$NoTask = 0;
var $author$project$Markdown$RawBlock$OpenBlockOrParagraph = function (a) {
	return {$: 1, a: a};
};
var $author$project$Markdown$Block$OrderedList = F3(
	function (a, b, c) {
		return {$: 2, a: a, b: b, c: c};
	});
var $author$project$Markdown$RawBlock$OrderedListBlock = F6(
	function (a, b, c, d, e, f) {
		return {$: 4, a: a, b: b, c: c, d: d, e: e, f: f};
	});
var $author$project$Markdown$Block$Paragraph = function (a) {
	return {$: 5, a: a};
};
var $author$project$Markdown$Parser$ParsedBlock = function (a) {
	return {$: 1, a: a};
};
var $author$project$Markdown$RawBlock$ParsedBlockQuote = function (a) {
	return {$: 12, a: a};
};
var $elm$parser$Parser$Problem = function (a) {
	return {$: 12, a: a};
};
var $author$project$Markdown$Block$ProcessingInstruction = function (a) {
	return {$: 2, a: a};
};
var $author$project$Markdown$Block$Strikethrough = function (a) {
	return {$: 5, a: a};
};
var $author$project$Markdown$Block$Strong = function (a) {
	return {$: 4, a: a};
};
var $author$project$Markdown$Block$Table = F2(
	function (a, b) {
		return {$: 6, a: a, b: b};
	});
var $author$project$Markdown$RawBlock$Table = function (a) {
	return {$: 8, a: a};
};
var $author$project$Markdown$Table$Table = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$Markdown$Table$TableDelimiterRow = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$Markdown$Block$Text = function (a) {
	return {$: 7, a: a};
};
var $author$project$Markdown$Block$ThematicBreak = {$: 8};
var $author$project$Markdown$RawBlock$ThematicBreak = {$: 7};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$Markdown$Block$UnorderedList = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$Markdown$RawBlock$UnorderedListBlock = F4(
	function (a, b, c, d) {
		return {$: 3, a: a, b: b, c: c, d: d};
	});
var $author$project$Markdown$RawBlock$UnparsedInlines = $elm$core$Basics$identity;
var $author$project$Markdown$Parser$addReference = F2(
	function (state, linkRef) {
		return {
			f: A2($elm$core$List$cons, linkRef, state.f),
			g: state.g
		};
	});
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = $elm$core$Basics$identity;
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0;
		return function (s0) {
			var _v1 = parseA(s0);
			if (_v1.$ === 1) {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p1 = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				var _v2 = callback(a);
				var parseB = _v2;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var p2 = _v3.a;
					var x = _v3.b;
					return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
				} else {
					var p2 = _v3.a;
					var b = _v3.b;
					var s2 = _v3.c;
					return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
				}
			}
		};
	});
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0;
	return function (s0) {
		var _v1 = parse(s0);
		if (_v1.$ === 1) {
			var x = _v1.b;
			return A2($elm$parser$Parser$Advanced$Bad, false, x);
		} else {
			var a = _v1.b;
			var s1 = _v1.c;
			return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
		}
	};
};
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.de);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.aA, offset) < 0,
					0,
					{kt: col, l: s0.l, n: s0.n, aA: offset, mu: row, de: s0.de});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return function (s) {
		return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.aA, s.mu, s.kt, s);
	};
};
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0;
		var parseB = _v1;
		return function (s0) {
			var _v2 = parseA(s0);
			if (_v2.$ === 1) {
				var p = _v2.a;
				var x = _v2.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p1 = _v2.a;
				var a = _v2.b;
				var s1 = _v2.c;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var p2 = _v3.a;
					var x = _v3.b;
					return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
				} else {
					var p2 = _v3.a;
					var b = _v3.b;
					var s2 = _v3.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p1 || p2,
						A2(func, a, b),
						s2);
				}
			}
		};
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $author$project$Whitespace$isSpaceOrTab = function (_char) {
	switch (_char) {
		case ' ':
			return true;
		case '\t':
			return true;
		default:
			return false;
	}
};
var $author$project$Parser$Token$carriageReturn = A2(
	$elm$parser$Parser$Advanced$Token,
	'\r',
	$elm$parser$Parser$Expecting('a carriage return'));
var $author$project$Parser$Token$newline = A2(
	$elm$parser$Parser$Advanced$Token,
	'\n',
	$elm$parser$Parser$Expecting('a newline'));
var $elm$parser$Parser$Advanced$Empty = {$: 0};
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (!_v1.$) {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return function (s) {
		return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
	};
};
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, a, s);
	};
};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {kt: col, kB: contextStack, mi: problem, mu: row};
	});
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.mu, s.kt, x, s.l));
	});
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.aA, s.mu, s.kt, s.de);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return _Utils_eq(newOffset, -1) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
			$elm$parser$Parser$Advanced$Good,
			progress,
			0,
			{kt: newCol, l: s.l, n: s.n, aA: newOffset, mu: newRow, de: s.de});
	};
};
var $author$project$Whitespace$lineEnd = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$token($author$project$Parser$Token$newline),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$token($author$project$Parser$Token$carriageReturn),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$token($author$project$Parser$Token$newline),
						$elm$parser$Parser$Advanced$succeed(0)
					])))
		]));
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (!_v1.$) {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					func(a),
					s1);
			} else {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			}
		};
	});
var $author$project$Markdown$Parser$blankLine = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		return $author$project$Markdown$RawBlock$BlankLine;
	},
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$backtrackable(
			$elm$parser$Parser$Advanced$chompWhile($author$project$Whitespace$isSpaceOrTab)),
		$author$project$Whitespace$lineEnd));
var $author$project$Parser$Token$space = A2(
	$elm$parser$Parser$Advanced$Token,
	' ',
	$elm$parser$Parser$Expecting('a space'));
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $author$project$Markdown$Parser$blockQuoteStarts = _List_fromArray(
	[
		$elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			'>',
			$elm$parser$Parser$Expecting('>'))),
		A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$backtrackable(
			$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$space)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						'>',
						$elm$parser$Parser$Expecting(' >'))),
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						' >',
						$elm$parser$Parser$Expecting('  >'))),
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						'  >',
						$elm$parser$Parser$Expecting('   >')))
				])))
	]);
var $author$project$Whitespace$isLineEnd = function (_char) {
	switch (_char) {
		case '\n':
			return true;
		case '\r':
			return true;
		default:
			return false;
	}
};
var $author$project$Helpers$chompUntilLineEndOrEnd = $elm$parser$Parser$Advanced$chompWhile(
	A2($elm$core$Basics$composeL, $elm$core$Basics$not, $author$project$Whitespace$isLineEnd));
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 1) {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					A2(
						func,
						A3($elm$core$String$slice, s0.aA, s1.aA, s0.de),
						a),
					s1);
			}
		};
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$Advanced$end = function (x) {
	return function (s) {
		return _Utils_eq(
			$elm$core$String$length(s.de),
			s.aA) ? A3($elm$parser$Parser$Advanced$Good, false, 0, s) : A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, x));
	};
};
var $author$project$Helpers$endOfFile = $elm$parser$Parser$Advanced$end(
	$elm$parser$Parser$Expecting('the end of the input'));
var $author$project$Helpers$lineEndOrEnd = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[$author$project$Whitespace$lineEnd, $author$project$Helpers$endOfFile]));
var $author$project$Markdown$Parser$blockQuote = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($author$project$Markdown$RawBlock$BlockQuote),
			$elm$parser$Parser$Advanced$oneOf($author$project$Markdown$Parser$blockQuoteStarts)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$space),
					$elm$parser$Parser$Advanced$succeed(0)
				]))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($author$project$Helpers$chompUntilLineEndOrEnd),
		$author$project$Helpers$lineEndOrEnd));
var $author$project$Markdown$Parser$deadEndsToString = function (deadEnds) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2($elm$core$List$map, $author$project$Markdown$Parser$deadEndToString, deadEnds));
};
var $author$project$HtmlParser$Cdata = function (a) {
	return {$: 3, a: a};
};
var $author$project$HtmlParser$Element = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $author$project$HtmlParser$Text = function (a) {
	return {$: 1, a: a};
};
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return function (s) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.aA, s.de);
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				0,
				{kt: 1, l: s.l, n: s.n, aA: s.aA + 1, mu: s.mu + 1, de: s.de}) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				0,
				{kt: s.kt + 1, l: s.l, n: s.n, aA: newOffset, mu: s.mu, de: s.de}));
		};
	});
var $author$project$HtmlParser$expectTagNameCharacter = $elm$parser$Parser$Expecting('at least 1 tag name character');
var $author$project$HtmlParser$tagNameCharacter = function (c) {
	switch (c) {
		case ' ':
			return false;
		case '\u000D':
			return false;
		case '\n':
			return false;
		case '\t':
			return false;
		case '/':
			return false;
		case '<':
			return false;
		case '>':
			return false;
		case '\"':
			return false;
		case '\'':
			return false;
		case '=':
			return false;
		default:
			return true;
	}
};
var $author$project$HtmlParser$tagName = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (name, _v0) {
			return $elm$core$String$toLower(name);
		}),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$chompIf, $author$project$HtmlParser$tagNameCharacter, $author$project$HtmlParser$expectTagNameCharacter),
		$elm$parser$Parser$Advanced$chompWhile($author$project$HtmlParser$tagNameCharacter)));
var $author$project$HtmlParser$attributeName = $author$project$HtmlParser$tagName;
var $author$project$HtmlParser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$token(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0;
			var _v1 = parse(s0);
			if (!_v1.$) {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (!step.$) {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return function (s) {
			return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
		};
	});
var $author$project$HtmlParser$entities = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('amp', '&'),
			_Utils_Tuple2('lt', '<'),
			_Utils_Tuple2('gt', '>'),
			_Utils_Tuple2('apos', '\''),
			_Utils_Tuple2('quot', '\"')
		]));
var $elm$core$Char$fromCode = _Char_fromCode;
var $elm$core$Basics$pow = _Basics_pow;
var $rtfeldman$elm_hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		fromStringHelp:
		while (true) {
			if (!chars.b) {
				return $elm$core$Result$Ok(accumulated);
			} else {
				var _char = chars.a;
				var rest = chars.b;
				switch (_char) {
					case '0':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated;
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '1':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + A2($elm$core$Basics$pow, 16, position);
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '2':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (2 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '3':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (3 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '4':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (4 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '5':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (5 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '6':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (6 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '7':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (7 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '8':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (8 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '9':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (9 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'a':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (10 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'b':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (11 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'c':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (12 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'd':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (13 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'e':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (14 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'f':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (15 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					default:
						var nonHex = _char;
						return $elm$core$Result$Err(
							$elm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');
				}
			}
		}
	});
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $rtfeldman$elm_hex$Hex$fromString = function (str) {
	if ($elm$core$String$isEmpty(str)) {
		return $elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var result = function () {
			if (A2($elm$core$String$startsWith, '-', str)) {
				var list = A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					$elm$core$List$tail(
						$elm$core$String$toList(str)));
				return A2(
					$elm$core$Result$map,
					$elm$core$Basics$negate,
					A3(
						$rtfeldman$elm_hex$Hex$fromStringHelp,
						$elm$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					$rtfeldman$elm_hex$Hex$fromStringHelp,
					$elm$core$String$length(str) - 1,
					$elm$core$String$toList(str),
					0);
			}
		}();
		var formatError = function (err) {
			return A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					['\"' + (str + '\"'), 'is not a valid hexadecimal string because', err]));
		};
		return A2($elm$core$Result$mapError, formatError, result);
	}
};
var $author$project$HtmlParser$decodeEscape = function (s) {
	return A2($elm$core$String$startsWith, '#x', s) ? A2(
		$elm$core$Result$mapError,
		$elm$parser$Parser$Problem,
		A2(
			$elm$core$Result$map,
			$elm$core$Char$fromCode,
			$rtfeldman$elm_hex$Hex$fromString(
				A2($elm$core$String$dropLeft, 2, s)))) : (A2($elm$core$String$startsWith, '#', s) ? A2(
		$elm$core$Result$fromMaybe,
		$elm$parser$Parser$Problem('Invalid escaped character: ' + s),
		A2(
			$elm$core$Maybe$map,
			$elm$core$Char$fromCode,
			$elm$core$String$toInt(
				A2($elm$core$String$dropLeft, 1, s)))) : A2(
		$elm$core$Result$fromMaybe,
		$elm$parser$Parser$Problem('No entity named \"&' + (s + ';\" found.')),
		A2($elm$core$Dict$get, s, $author$project$HtmlParser$entities)));
};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return function (s) {
		return A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, x));
	};
};
var $author$project$HtmlParser$escapedChar = function (end_) {
	var process = function (entityStr) {
		var _v0 = $author$project$HtmlParser$decodeEscape(entityStr);
		if (!_v0.$) {
			var c = _v0.a;
			return $elm$parser$Parser$Advanced$succeed(c);
		} else {
			var e = _v0.a;
			return $elm$parser$Parser$Advanced$problem(e);
		}
	};
	var isEntityChar = function (c) {
		return (!_Utils_eq(c, end_)) && (c !== ';');
	};
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$author$project$HtmlParser$symbol('&')),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$andThen,
				process,
				$elm$parser$Parser$Advanced$getChompedString(
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$chompIf,
							isEntityChar,
							$elm$parser$Parser$Expecting('an entity character')),
						$elm$parser$Parser$Advanced$chompWhile(isEntityChar)))),
			$author$project$HtmlParser$symbol(';')));
};
var $author$project$HtmlParser$textStringStep = F3(
	function (closingChar, predicate, accum) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (soFar) {
				return $elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$Advanced$map,
							function (escaped) {
								return $elm$parser$Parser$Advanced$Loop(
									_Utils_ap(
										accum,
										_Utils_ap(
											soFar,
											$elm$core$String$fromChar(escaped))));
							},
							$author$project$HtmlParser$escapedChar(closingChar)),
							$elm$parser$Parser$Advanced$succeed(
							$elm$parser$Parser$Advanced$Done(
								_Utils_ap(accum, soFar)))
						]));
			},
			$elm$parser$Parser$Advanced$getChompedString(
				$elm$parser$Parser$Advanced$chompWhile(predicate)));
	});
var $author$project$HtmlParser$textString = function (closingChar) {
	var predicate = function (c) {
		return (!_Utils_eq(c, closingChar)) && (c !== '&');
	};
	return A2(
		$elm$parser$Parser$Advanced$loop,
		'',
		A2($author$project$HtmlParser$textStringStep, closingChar, predicate));
};
var $author$project$HtmlParser$attributeValue = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$author$project$HtmlParser$symbol('\"')),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$author$project$HtmlParser$textString('\"'),
				$author$project$HtmlParser$symbol('\"'))),
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$author$project$HtmlParser$symbol('\'')),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$author$project$HtmlParser$textString('\''),
				$author$project$HtmlParser$symbol('\'')))
		]));
var $author$project$HtmlParser$keepOldest = F2(
	function (_new, mValue) {
		if (!mValue.$) {
			var v = mValue.a;
			return $elm$core$Maybe$Just(v);
		} else {
			return $elm$core$Maybe$Just(_new);
		}
	});
var $author$project$HtmlParser$isWhitespace = function (c) {
	switch (c) {
		case ' ':
			return true;
		case '\u000D':
			return true;
		case '\n':
			return true;
		case '\t':
			return true;
		default:
			return false;
	}
};
var $author$project$HtmlParser$whiteSpace = $elm$parser$Parser$Advanced$chompWhile($author$project$HtmlParser$isWhitespace);
var $author$project$HtmlParser$attributesStep = function (attrs) {
	var process = F2(
		function (name, value) {
			return $elm$parser$Parser$Advanced$Loop(
				A3(
					$elm$core$Dict$update,
					$elm$core$String$toLower(name),
					$author$project$HtmlParser$keepOldest(value),
					attrs));
		});
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(process),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2($elm$parser$Parser$Advanced$ignorer, $author$project$HtmlParser$attributeName, $author$project$HtmlParser$whiteSpace),
							$author$project$HtmlParser$symbol('=')),
						$author$project$HtmlParser$whiteSpace)),
				A2($elm$parser$Parser$Advanced$ignorer, $author$project$HtmlParser$attributeValue, $author$project$HtmlParser$whiteSpace)),
				$elm$parser$Parser$Advanced$succeed(
				$elm$parser$Parser$Advanced$Done(attrs))
			]));
};
var $author$project$HtmlParser$attributes = A2(
	$elm$parser$Parser$Advanced$map,
	A2(
		$elm$core$Dict$foldl,
		F3(
			function (key, value, accum) {
				return A2(
					$elm$core$List$cons,
					{c_: key, eF: value},
					accum);
			}),
		_List_Nil),
	A2($elm$parser$Parser$Advanced$loop, $elm$core$Dict$empty, $author$project$HtmlParser$attributesStep));
var $elm$parser$Parser$Advanced$chompUntilEndOr = function (str) {
	return function (s) {
		var _v0 = A5(_Parser_findSubString, str, s.aA, s.mu, s.kt, s.de);
		var newOffset = _v0.a;
		var newRow = _v0.b;
		var newCol = _v0.c;
		var adjustedOffset = (newOffset < 0) ? $elm$core$String$length(s.de) : newOffset;
		return A3(
			$elm$parser$Parser$Advanced$Good,
			_Utils_cmp(s.aA, adjustedOffset) < 0,
			0,
			{kt: newCol, l: s.l, n: s.n, aA: adjustedOffset, mu: newRow, de: s.de});
	};
};
var $author$project$HtmlParser$cdata = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$author$project$HtmlParser$symbol('<![CDATA[')),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr(']]>')),
		$author$project$HtmlParser$symbol(']]>')));
var $author$project$HtmlParser$childrenStep = F2(
	function (options, accum) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (f) {
				return f(accum);
			},
			$elm$parser$Parser$Advanced$oneOf(options));
	});
var $author$project$HtmlParser$fail = function (str) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(str));
};
var $author$project$HtmlParser$closingTag = function (startTagName) {
	var closingTagName = A2(
		$elm$parser$Parser$Advanced$andThen,
		function (endTagName) {
			return _Utils_eq(startTagName, endTagName) ? $elm$parser$Parser$Advanced$succeed(0) : $author$project$HtmlParser$fail('tag name mismatch: ' + (startTagName + (' and ' + endTagName)));
		},
		$author$project$HtmlParser$tagName);
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$author$project$HtmlParser$symbol('</'),
					$author$project$HtmlParser$whiteSpace),
				closingTagName),
			$author$project$HtmlParser$whiteSpace),
		$author$project$HtmlParser$symbol('>'));
};
var $author$project$HtmlParser$Comment = function (a) {
	return {$: 2, a: a};
};
var $author$project$HtmlParser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $author$project$HtmlParser$comment = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($author$project$HtmlParser$Comment),
		$elm$parser$Parser$Advanced$token(
			$author$project$HtmlParser$toToken('<!--'))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('-->')),
		$elm$parser$Parser$Advanced$token(
			$author$project$HtmlParser$toToken('-->'))));
var $author$project$HtmlParser$Declaration = F2(
	function (a, b) {
		return {$: 5, a: a, b: b};
	});
var $author$project$HtmlParser$expectUppercaseCharacter = $elm$parser$Parser$Expecting('at least 1 uppercase character');
var $author$project$HtmlParser$allUppercase = $elm$parser$Parser$Advanced$getChompedString(
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$chompIf, $elm$core$Char$isUpper, $author$project$HtmlParser$expectUppercaseCharacter),
		$elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isUpper)));
var $author$project$HtmlParser$oneOrMoreWhiteSpace = A2(
	$elm$parser$Parser$Advanced$ignorer,
	A2(
		$elm$parser$Parser$Advanced$chompIf,
		$author$project$HtmlParser$isWhitespace,
		$elm$parser$Parser$Expecting('at least one whitespace')),
	$elm$parser$Parser$Advanced$chompWhile($author$project$HtmlParser$isWhitespace));
var $author$project$HtmlParser$docType = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($author$project$HtmlParser$Declaration),
			$author$project$HtmlParser$symbol('<!')),
		A2($elm$parser$Parser$Advanced$ignorer, $author$project$HtmlParser$allUppercase, $author$project$HtmlParser$oneOrMoreWhiteSpace)),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('>')),
		$author$project$HtmlParser$symbol('>')));
var $author$project$HtmlParser$ProcessingInstruction = function (a) {
	return {$: 4, a: a};
};
var $author$project$HtmlParser$processingInstruction = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($author$project$HtmlParser$ProcessingInstruction),
		$author$project$HtmlParser$symbol('<?')),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('?>')),
		$author$project$HtmlParser$symbol('?>')));
var $author$project$HtmlParser$isNotTextNodeIgnoreChar = function (c) {
	switch (c) {
		case '<':
			return false;
		case '&':
			return false;
		default:
			return true;
	}
};
var $author$project$HtmlParser$textNodeStringStepOptions = _List_fromArray(
	[
		A2(
		$elm$parser$Parser$Advanced$map,
		function (_v0) {
			return $elm$parser$Parser$Advanced$Loop(0);
		},
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$chompIf,
				$author$project$HtmlParser$isNotTextNodeIgnoreChar,
				$elm$parser$Parser$Expecting('is not & or <')),
			$elm$parser$Parser$Advanced$chompWhile($author$project$HtmlParser$isNotTextNodeIgnoreChar))),
		A2(
		$elm$parser$Parser$Advanced$map,
		function (_v1) {
			return $elm$parser$Parser$Advanced$Loop(0);
		},
		$author$project$HtmlParser$escapedChar('<')),
		$elm$parser$Parser$Advanced$succeed(
		$elm$parser$Parser$Advanced$Done(0))
	]);
var $author$project$HtmlParser$textNodeStringStep = function (_v0) {
	return $elm$parser$Parser$Advanced$oneOf($author$project$HtmlParser$textNodeStringStepOptions);
};
var $author$project$HtmlParser$textNodeString = $elm$parser$Parser$Advanced$getChompedString(
	A2($elm$parser$Parser$Advanced$loop, 0, $author$project$HtmlParser$textNodeStringStep));
var $author$project$HtmlParser$children = function (startTagName) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_List_Nil,
		$author$project$HtmlParser$childrenStep(
			$author$project$HtmlParser$childrenStepOptions(startTagName)));
};
var $author$project$HtmlParser$childrenStepOptions = function (startTagName) {
	return _List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$map,
			F2(
				function (_v1, accum) {
					return $elm$parser$Parser$Advanced$Done(
						$elm$core$List$reverse(accum));
				}),
			$author$project$HtmlParser$closingTag(startTagName)),
			A2(
			$elm$parser$Parser$Advanced$andThen,
			function (text) {
				return $elm$core$String$isEmpty(text) ? A2(
					$elm$parser$Parser$Advanced$map,
					F2(
						function (_v2, accum) {
							return $elm$parser$Parser$Advanced$Done(
								$elm$core$List$reverse(accum));
						}),
					$author$project$HtmlParser$closingTag(startTagName)) : $elm$parser$Parser$Advanced$succeed(
					function (accum) {
						return $elm$parser$Parser$Advanced$Loop(
							A2(
								$elm$core$List$cons,
								$author$project$HtmlParser$Text(text),
								accum));
					});
			},
			$author$project$HtmlParser$textNodeString),
			A2(
			$elm$parser$Parser$Advanced$map,
			F2(
				function (_new, accum) {
					return $elm$parser$Parser$Advanced$Loop(
						A2($elm$core$List$cons, _new, accum));
				}),
			$author$project$HtmlParser$cyclic$html())
		]);
};
var $author$project$HtmlParser$elementContinuation = function (startTagName) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$author$project$HtmlParser$Element(startTagName)),
				$author$project$HtmlParser$whiteSpace),
			A2($elm$parser$Parser$Advanced$ignorer, $author$project$HtmlParser$attributes, $author$project$HtmlParser$whiteSpace)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return _List_Nil;
					},
					$author$project$HtmlParser$symbol('/>')),
					A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$author$project$HtmlParser$symbol('>')),
					$author$project$HtmlParser$children(startTagName))
				])));
};
function $author$project$HtmlParser$cyclic$html() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2($elm$parser$Parser$Advanced$map, $author$project$HtmlParser$Cdata, $author$project$HtmlParser$cdata),
				$author$project$HtmlParser$processingInstruction,
				$author$project$HtmlParser$comment,
				$author$project$HtmlParser$docType,
				$author$project$HtmlParser$cyclic$element()
			]));
}
function $author$project$HtmlParser$cyclic$element() {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$author$project$HtmlParser$symbol('<')),
		A2($elm$parser$Parser$Advanced$andThen, $author$project$HtmlParser$elementContinuation, $author$project$HtmlParser$tagName));
}
var $author$project$HtmlParser$html = $author$project$HtmlParser$cyclic$html();
$author$project$HtmlParser$cyclic$html = function () {
	return $author$project$HtmlParser$html;
};
var $author$project$HtmlParser$element = $author$project$HtmlParser$cyclic$element();
$author$project$HtmlParser$cyclic$element = function () {
	return $author$project$HtmlParser$element;
};
var $author$project$Parser$Token$tab = A2(
	$elm$parser$Parser$Advanced$Token,
	'\t',
	$elm$parser$Parser$Expecting('a tab'));
var $author$project$Markdown$Parser$exactlyFourSpaces = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$tab),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$backtrackable(
				$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$space)),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'   ',
							$elm$parser$Parser$ExpectingSymbol('Indentation'))),
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							' \t',
							$elm$parser$Parser$ExpectingSymbol('Indentation'))),
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'  \t',
							$elm$parser$Parser$ExpectingSymbol('Indentation')))
					])))
		]));
var $author$project$Markdown$Parser$indentedCodeBlock = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($author$project$Markdown$RawBlock$IndentedCodeBlock),
		$author$project$Markdown$Parser$exactlyFourSpaces),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($author$project$Helpers$chompUntilLineEndOrEnd),
		$author$project$Helpers$lineEndOrEnd));
var $author$project$Markdown$Helpers$isEven = function (_int) {
	return !A2($elm$core$Basics$modBy, 2, _int);
};
var $author$project$Markdown$Block$Loose = 0;
var $author$project$Markdown$Block$Tight = 1;
var $author$project$Markdown$Parser$isTightBoolToListDisplay = function (isTight) {
	return isTight ? 1 : 0;
};
var $author$project$Markdown$Parser$joinRawStringsWith = F3(
	function (joinWith, string1, string2) {
		var _v0 = _Utils_Tuple2(string1, string2);
		if (_v0.a === '') {
			return string2;
		} else {
			if (_v0.b === '') {
				return string1;
			} else {
				return _Utils_ap(
					string1,
					_Utils_ap(joinWith, string2));
			}
		}
	});
var $author$project$Markdown$Parser$joinStringsPreserveAll = F2(
	function (string1, string2) {
		return string1 + ('\n' + string2);
	});
var $author$project$Markdown$Parser$innerParagraphParser = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (rawLine, _v0) {
			return $author$project$Markdown$RawBlock$OpenBlockOrParagraph(rawLine);
		}),
	$author$project$Helpers$chompUntilLineEndOrEnd);
var $author$project$Markdown$Parser$openBlockOrParagraphParser = A2($elm$parser$Parser$Advanced$ignorer, $author$project$Markdown$Parser$innerParagraphParser, $author$project$Helpers$lineEndOrEnd);
var $author$project$Markdown$OrderedList$ListItem = F4(
	function (order, intended, marker, body) {
		return {ff: body, lv: intended, lL: marker, l5: order};
	});
var $elm$parser$Parser$Advanced$getCol = function (s) {
	return A3($elm$parser$Parser$Advanced$Good, false, s.kt, s);
};
var $author$project$Markdown$OrderedList$orderedListEmptyItemParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$succeed(
		function (bodyStartPos) {
			return _Utils_Tuple2(bodyStartPos, '');
		}),
	A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getCol, $author$project$Helpers$lineEndOrEnd));
var $author$project$Parser$Extra$chompOneOrMore = function (condition) {
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$chompIf,
			condition,
			$elm$parser$Parser$Problem('Expected one or more character')),
		$elm$parser$Parser$Advanced$chompWhile(condition));
};
var $author$project$Markdown$OrderedList$orderedListItemBodyParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (bodyStartPos, item) {
						return _Utils_Tuple2(bodyStartPos, item);
					})),
			$author$project$Parser$Extra$chompOneOrMore($author$project$Whitespace$isSpaceOrTab)),
		$elm$parser$Parser$Advanced$getCol),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($author$project$Helpers$chompUntilLineEndOrEnd),
		$author$project$Helpers$lineEndOrEnd));
var $author$project$Markdown$OrderedList$Dot = 0;
var $author$project$Markdown$OrderedList$Paren = 1;
var $author$project$Parser$Token$closingParen = A2(
	$elm$parser$Parser$Advanced$Token,
	')',
	$elm$parser$Parser$Expecting('a `)`'));
var $author$project$Parser$Token$dot = A2(
	$elm$parser$Parser$Advanced$Token,
	'.',
	$elm$parser$Parser$Expecting('a `.`'));
var $author$project$Markdown$OrderedList$orderedListMarkerParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(0),
			$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$dot)),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(1),
			$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$closingParen))
		]));
var $author$project$Parser$Extra$positiveInteger = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (str, _v0) {
			return A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str));
		}),
	$author$project$Parser$Extra$chompOneOrMore($elm$core$Char$isDigit));
var $author$project$Markdown$OrderedList$positiveIntegerMaxOf9Digits = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (parsed) {
		return (parsed <= 999999999) ? $elm$parser$Parser$Advanced$succeed(parsed) : $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Starting numbers must be nine digits or less.'));
	},
	$author$project$Parser$Extra$positiveInteger);
var $author$project$Whitespace$space = $elm$parser$Parser$Advanced$token($author$project$Parser$Token$space);
var $author$project$Parser$Extra$upTo = F2(
	function (n, parser) {
		var _v0 = A2($elm$core$List$repeat, n, parser);
		if (!_v0.b) {
			return $elm$parser$Parser$Advanced$succeed(0);
		} else {
			var firstParser = _v0.a;
			var remainingParsers = _v0.b;
			return A3(
				$elm$core$List$foldl,
				F2(
					function (p, parsers) {
						return $elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									A2($elm$parser$Parser$Advanced$ignorer, p, parsers),
									$elm$parser$Parser$Advanced$succeed(0)
								]));
					}),
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							firstParser,
							$elm$parser$Parser$Advanced$succeed(0)
						])),
				remainingParsers);
		}
	});
var $author$project$Markdown$OrderedList$validateStartsWith1 = function (parsed) {
	if (parsed === 1) {
		return $elm$parser$Parser$Advanced$succeed(parsed);
	} else {
		return $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Lists inside a paragraph or after a paragraph without a blank line must start with 1'));
	}
};
var $author$project$Markdown$OrderedList$orderedListOrderParser = function (previousWasBody) {
	return previousWasBody ? A2(
		$elm$parser$Parser$Advanced$andThen,
		$author$project$Markdown$OrderedList$validateStartsWith1,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				A2($author$project$Parser$Extra$upTo, 3, $author$project$Whitespace$space)),
			$author$project$Markdown$OrderedList$positiveIntegerMaxOf9Digits)) : A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			A2($author$project$Parser$Extra$upTo, 3, $author$project$Whitespace$space)),
		$author$project$Markdown$OrderedList$positiveIntegerMaxOf9Digits);
};
var $author$project$Markdown$OrderedList$parser = function (previousWasBody) {
	var parseSubsequentItem = F5(
		function (start, order, marker, mid, _v0) {
			var end = _v0.a;
			var body = _v0.b;
			return ((end - mid) <= 4) ? A4($author$project$Markdown$OrderedList$ListItem, order, end - start, marker, body) : A4(
				$author$project$Markdown$OrderedList$ListItem,
				order,
				(mid - start) + 1,
				marker,
				_Utils_ap(
					A2($elm$core$String$repeat, (end - mid) - 1, ' '),
					body));
		});
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						$elm$parser$Parser$Advanced$succeed(parseSubsequentItem),
						$elm$parser$Parser$Advanced$getCol),
					$elm$parser$Parser$Advanced$backtrackable(
						$author$project$Markdown$OrderedList$orderedListOrderParser(previousWasBody))),
				$elm$parser$Parser$Advanced$backtrackable($author$project$Markdown$OrderedList$orderedListMarkerParser)),
			$elm$parser$Parser$Advanced$getCol),
		previousWasBody ? $author$project$Markdown$OrderedList$orderedListItemBodyParser : $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[$author$project$Markdown$OrderedList$orderedListEmptyItemParser, $author$project$Markdown$OrderedList$orderedListItemBodyParser])));
};
var $author$project$Markdown$Parser$orderedListBlock = function (previousWasBody) {
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (item) {
			return A6($author$project$Markdown$RawBlock$OrderedListBlock, true, item.lv, item.lL, item.l5, _List_Nil, item.ff);
		},
		$author$project$Markdown$OrderedList$parser(previousWasBody));
};
var $author$project$Markdown$Inline$CodeInline = function (a) {
	return {$: 2, a: a};
};
var $author$project$Markdown$Inline$HardLineBreak = {$: 1};
var $author$project$Markdown$Inline$HtmlInline = function (a) {
	return {$: 5, a: a};
};
var $author$project$Markdown$Inline$Image = F3(
	function (a, b, c) {
		return {$: 4, a: a, b: b, c: c};
	});
var $author$project$Markdown$Inline$Link = F3(
	function (a, b, c) {
		return {$: 3, a: a, b: b, c: c};
	});
var $author$project$Markdown$Inline$Strikethrough = function (a) {
	return {$: 7, a: a};
};
var $author$project$Markdown$Inline$Text = function (a) {
	return {$: 0, a: a};
};
var $author$project$Markdown$InlineParser$matchToInline = function (_v0) {
	var match = _v0;
	var _v1 = match.t;
	switch (_v1.$) {
		case 0:
			return $author$project$Markdown$Inline$Text(match.aD);
		case 1:
			return $author$project$Markdown$Inline$HardLineBreak;
		case 2:
			return $author$project$Markdown$Inline$CodeInline(match.aD);
		case 3:
			var _v2 = _v1.a;
			var text = _v2.a;
			var url = _v2.b;
			return A3(
				$author$project$Markdown$Inline$Link,
				url,
				$elm$core$Maybe$Nothing,
				_List_fromArray(
					[
						$author$project$Markdown$Inline$Text(text)
					]));
		case 4:
			var _v3 = _v1.a;
			var url = _v3.a;
			var maybeTitle = _v3.b;
			return A3(
				$author$project$Markdown$Inline$Link,
				url,
				maybeTitle,
				$author$project$Markdown$InlineParser$matchesToInlines(match.C));
		case 5:
			var _v4 = _v1.a;
			var url = _v4.a;
			var maybeTitle = _v4.b;
			return A3(
				$author$project$Markdown$Inline$Image,
				url,
				maybeTitle,
				$author$project$Markdown$InlineParser$matchesToInlines(match.C));
		case 6:
			var model = _v1.a;
			return $author$project$Markdown$Inline$HtmlInline(model);
		case 7:
			var length = _v1.a;
			return A2(
				$author$project$Markdown$Inline$Emphasis,
				length,
				$author$project$Markdown$InlineParser$matchesToInlines(match.C));
		default:
			return $author$project$Markdown$Inline$Strikethrough(
				$author$project$Markdown$InlineParser$matchesToInlines(match.C));
	}
};
var $author$project$Markdown$InlineParser$matchesToInlines = function (matches) {
	return A2($elm$core$List$map, $author$project$Markdown$InlineParser$matchToInline, matches);
};
var $author$project$Markdown$InlineParser$Match = $elm$core$Basics$identity;
var $author$project$Markdown$InlineParser$prepareChildMatch = F2(
	function (parentMatch, childMatch) {
		return {m: childMatch.m - parentMatch.E, C: childMatch.C, o: childMatch.o - parentMatch.E, aD: childMatch.aD, W: childMatch.W - parentMatch.E, E: childMatch.E - parentMatch.E, t: childMatch.t};
	});
var $author$project$Markdown$InlineParser$addChild = F2(
	function (parentMatch, childMatch) {
		return {
			m: parentMatch.m,
			C: A2(
				$elm$core$List$cons,
				A2($author$project$Markdown$InlineParser$prepareChildMatch, parentMatch, childMatch),
				parentMatch.C),
			o: parentMatch.o,
			aD: parentMatch.aD,
			W: parentMatch.W,
			E: parentMatch.E,
			t: parentMatch.t
		};
	});
var $author$project$Markdown$InlineParser$organizeChildren = function (_v4) {
	var match = _v4;
	return {
		m: match.m,
		C: $author$project$Markdown$InlineParser$organizeMatches(match.C),
		o: match.o,
		aD: match.aD,
		W: match.W,
		E: match.E,
		t: match.t
	};
};
var $author$project$Markdown$InlineParser$organizeMatches = function (matches) {
	var _v2 = A2(
		$elm$core$List$sortBy,
		function (_v3) {
			var match = _v3;
			return match.o;
		},
		matches);
	if (!_v2.b) {
		return _List_Nil;
	} else {
		var first = _v2.a;
		var rest = _v2.b;
		return A3($author$project$Markdown$InlineParser$organizeMatchesHelp, rest, first, _List_Nil);
	}
};
var $author$project$Markdown$InlineParser$organizeMatchesHelp = F3(
	function (remaining, _v0, matchesTail) {
		organizeMatchesHelp:
		while (true) {
			var prevMatch = _v0;
			if (!remaining.b) {
				return A2(
					$elm$core$List$cons,
					$author$project$Markdown$InlineParser$organizeChildren(prevMatch),
					matchesTail);
			} else {
				var match = remaining.a;
				var rest = remaining.b;
				if (_Utils_cmp(prevMatch.m, match.o) < 1) {
					var $temp$remaining = rest,
						$temp$_v0 = match,
						$temp$matchesTail = A2(
						$elm$core$List$cons,
						$author$project$Markdown$InlineParser$organizeChildren(prevMatch),
						matchesTail);
					remaining = $temp$remaining;
					_v0 = $temp$_v0;
					matchesTail = $temp$matchesTail;
					continue organizeMatchesHelp;
				} else {
					if ((_Utils_cmp(prevMatch.o, match.o) < 0) && (_Utils_cmp(prevMatch.m, match.m) > 0)) {
						var $temp$remaining = rest,
							$temp$_v0 = A2($author$project$Markdown$InlineParser$addChild, prevMatch, match),
							$temp$matchesTail = matchesTail;
						remaining = $temp$remaining;
						_v0 = $temp$_v0;
						matchesTail = $temp$matchesTail;
						continue organizeMatchesHelp;
					} else {
						var $temp$remaining = rest,
							$temp$_v0 = prevMatch,
							$temp$matchesTail = matchesTail;
						remaining = $temp$remaining;
						_v0 = $temp$_v0;
						matchesTail = $temp$matchesTail;
						continue organizeMatchesHelp;
					}
				}
			}
		}
	});
var $author$project$Markdown$InlineParser$NormalType = {$: 0};
var $author$project$Markdown$Helpers$containsAmpersand = function (string) {
	return A2($elm$core$String$contains, '&', string);
};
var $elm$regex$Regex$never = _Regex_never;
var $author$project$Markdown$Entity$decimalRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&#([0-9]{1,8});'));
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $author$project$Markdown$Entity$isBadEndUnicode = function (_int) {
	var remain_ = A2($elm$core$Basics$modBy, 16, _int);
	var remain = A2($elm$core$Basics$modBy, 131070, _int);
	return (_int >= 131070) && ((((0 <= remain) && (remain <= 15)) || ((65536 <= remain) && (remain <= 65551))) && ((remain_ === 14) || (remain_ === 15)));
};
var $author$project$Markdown$Entity$isValidUnicode = function (_int) {
	return (_int === 9) || ((_int === 10) || ((_int === 13) || ((_int === 133) || (((32 <= _int) && (_int <= 126)) || (((160 <= _int) && (_int <= 55295)) || (((57344 <= _int) && (_int <= 64975)) || (((65008 <= _int) && (_int <= 65533)) || ((65536 <= _int) && (_int <= 1114109)))))))));
};
var $author$project$Markdown$Entity$validUnicode = function (_int) {
	return ($author$project$Markdown$Entity$isValidUnicode(_int) && (!$author$project$Markdown$Entity$isBadEndUnicode(_int))) ? $elm$core$String$fromChar(
		$elm$core$Char$fromCode(_int)) : $elm$core$String$fromChar(
		$elm$core$Char$fromCode(65533));
};
var $author$project$Markdown$Entity$replaceDecimal = function (match) {
	var _v0 = match.m1;
	if (_v0.b && (!_v0.a.$)) {
		var first = _v0.a.a;
		var _v1 = $elm$core$String$toInt(first);
		if (!_v1.$) {
			var v = _v1.a;
			return $author$project$Markdown$Entity$validUnicode(v);
		} else {
			return match.b$;
		}
	} else {
		return match.b$;
	}
};
var $author$project$Markdown$Entity$replaceDecimals = A2($elm$regex$Regex$replace, $author$project$Markdown$Entity$decimalRegex, $author$project$Markdown$Entity$replaceDecimal);
var $author$project$Markdown$Entity$entitiesRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&([0-9a-zA-Z]+);'));
var $author$project$Markdown$Entity$entities = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('quot', 34),
			_Utils_Tuple2('amp', 38),
			_Utils_Tuple2('apos', 39),
			_Utils_Tuple2('lt', 60),
			_Utils_Tuple2('gt', 62),
			_Utils_Tuple2('nbsp', 160),
			_Utils_Tuple2('iexcl', 161),
			_Utils_Tuple2('cent', 162),
			_Utils_Tuple2('pound', 163),
			_Utils_Tuple2('curren', 164),
			_Utils_Tuple2('yen', 165),
			_Utils_Tuple2('brvbar', 166),
			_Utils_Tuple2('sect', 167),
			_Utils_Tuple2('uml', 168),
			_Utils_Tuple2('copy', 169),
			_Utils_Tuple2('ordf', 170),
			_Utils_Tuple2('laquo', 171),
			_Utils_Tuple2('not', 172),
			_Utils_Tuple2('shy', 173),
			_Utils_Tuple2('reg', 174),
			_Utils_Tuple2('macr', 175),
			_Utils_Tuple2('deg', 176),
			_Utils_Tuple2('plusmn', 177),
			_Utils_Tuple2('sup2', 178),
			_Utils_Tuple2('sup3', 179),
			_Utils_Tuple2('acute', 180),
			_Utils_Tuple2('micro', 181),
			_Utils_Tuple2('para', 182),
			_Utils_Tuple2('middot', 183),
			_Utils_Tuple2('cedil', 184),
			_Utils_Tuple2('sup1', 185),
			_Utils_Tuple2('ordm', 186),
			_Utils_Tuple2('raquo', 187),
			_Utils_Tuple2('frac14', 188),
			_Utils_Tuple2('frac12', 189),
			_Utils_Tuple2('frac34', 190),
			_Utils_Tuple2('iquest', 191),
			_Utils_Tuple2('Agrave', 192),
			_Utils_Tuple2('Aacute', 193),
			_Utils_Tuple2('Acirc', 194),
			_Utils_Tuple2('Atilde', 195),
			_Utils_Tuple2('Auml', 196),
			_Utils_Tuple2('Aring', 197),
			_Utils_Tuple2('AElig', 198),
			_Utils_Tuple2('Ccedil', 199),
			_Utils_Tuple2('Egrave', 200),
			_Utils_Tuple2('Eacute', 201),
			_Utils_Tuple2('Ecirc', 202),
			_Utils_Tuple2('Euml', 203),
			_Utils_Tuple2('Igrave', 204),
			_Utils_Tuple2('Iacute', 205),
			_Utils_Tuple2('Icirc', 206),
			_Utils_Tuple2('Iuml', 207),
			_Utils_Tuple2('ETH', 208),
			_Utils_Tuple2('Ntilde', 209),
			_Utils_Tuple2('Ograve', 210),
			_Utils_Tuple2('Oacute', 211),
			_Utils_Tuple2('Ocirc', 212),
			_Utils_Tuple2('Otilde', 213),
			_Utils_Tuple2('Ouml', 214),
			_Utils_Tuple2('times', 215),
			_Utils_Tuple2('Oslash', 216),
			_Utils_Tuple2('Ugrave', 217),
			_Utils_Tuple2('Uacute', 218),
			_Utils_Tuple2('Ucirc', 219),
			_Utils_Tuple2('Uuml', 220),
			_Utils_Tuple2('Yacute', 221),
			_Utils_Tuple2('THORN', 222),
			_Utils_Tuple2('szlig', 223),
			_Utils_Tuple2('agrave', 224),
			_Utils_Tuple2('aacute', 225),
			_Utils_Tuple2('acirc', 226),
			_Utils_Tuple2('atilde', 227),
			_Utils_Tuple2('auml', 228),
			_Utils_Tuple2('aring', 229),
			_Utils_Tuple2('aelig', 230),
			_Utils_Tuple2('ccedil', 231),
			_Utils_Tuple2('egrave', 232),
			_Utils_Tuple2('eacute', 233),
			_Utils_Tuple2('ecirc', 234),
			_Utils_Tuple2('euml', 235),
			_Utils_Tuple2('igrave', 236),
			_Utils_Tuple2('iacute', 237),
			_Utils_Tuple2('icirc', 238),
			_Utils_Tuple2('iuml', 239),
			_Utils_Tuple2('eth', 240),
			_Utils_Tuple2('ntilde', 241),
			_Utils_Tuple2('ograve', 242),
			_Utils_Tuple2('oacute', 243),
			_Utils_Tuple2('ocirc', 244),
			_Utils_Tuple2('otilde', 245),
			_Utils_Tuple2('ouml', 246),
			_Utils_Tuple2('divide', 247),
			_Utils_Tuple2('oslash', 248),
			_Utils_Tuple2('ugrave', 249),
			_Utils_Tuple2('uacute', 250),
			_Utils_Tuple2('ucirc', 251),
			_Utils_Tuple2('uuml', 252),
			_Utils_Tuple2('yacute', 253),
			_Utils_Tuple2('thorn', 254),
			_Utils_Tuple2('yuml', 255),
			_Utils_Tuple2('OElig', 338),
			_Utils_Tuple2('oelig', 339),
			_Utils_Tuple2('Scaron', 352),
			_Utils_Tuple2('scaron', 353),
			_Utils_Tuple2('Yuml', 376),
			_Utils_Tuple2('fnof', 402),
			_Utils_Tuple2('circ', 710),
			_Utils_Tuple2('tilde', 732),
			_Utils_Tuple2('Alpha', 913),
			_Utils_Tuple2('Beta', 914),
			_Utils_Tuple2('Gamma', 915),
			_Utils_Tuple2('Delta', 916),
			_Utils_Tuple2('Epsilon', 917),
			_Utils_Tuple2('Zeta', 918),
			_Utils_Tuple2('Eta', 919),
			_Utils_Tuple2('Theta', 920),
			_Utils_Tuple2('Iota', 921),
			_Utils_Tuple2('Kappa', 922),
			_Utils_Tuple2('Lambda', 923),
			_Utils_Tuple2('Mu', 924),
			_Utils_Tuple2('Nu', 925),
			_Utils_Tuple2('Xi', 926),
			_Utils_Tuple2('Omicron', 927),
			_Utils_Tuple2('Pi', 928),
			_Utils_Tuple2('Rho', 929),
			_Utils_Tuple2('Sigma', 931),
			_Utils_Tuple2('Tau', 932),
			_Utils_Tuple2('Upsilon', 933),
			_Utils_Tuple2('Phi', 934),
			_Utils_Tuple2('Chi', 935),
			_Utils_Tuple2('Psi', 936),
			_Utils_Tuple2('Omega', 937),
			_Utils_Tuple2('alpha', 945),
			_Utils_Tuple2('beta', 946),
			_Utils_Tuple2('gamma', 947),
			_Utils_Tuple2('delta', 948),
			_Utils_Tuple2('epsilon', 949),
			_Utils_Tuple2('zeta', 950),
			_Utils_Tuple2('eta', 951),
			_Utils_Tuple2('theta', 952),
			_Utils_Tuple2('iota', 953),
			_Utils_Tuple2('kappa', 954),
			_Utils_Tuple2('lambda', 955),
			_Utils_Tuple2('mu', 956),
			_Utils_Tuple2('nu', 957),
			_Utils_Tuple2('xi', 958),
			_Utils_Tuple2('omicron', 959),
			_Utils_Tuple2('pi', 960),
			_Utils_Tuple2('rho', 961),
			_Utils_Tuple2('sigmaf', 962),
			_Utils_Tuple2('sigma', 963),
			_Utils_Tuple2('tau', 964),
			_Utils_Tuple2('upsilon', 965),
			_Utils_Tuple2('phi', 966),
			_Utils_Tuple2('chi', 967),
			_Utils_Tuple2('psi', 968),
			_Utils_Tuple2('omega', 969),
			_Utils_Tuple2('thetasym', 977),
			_Utils_Tuple2('upsih', 978),
			_Utils_Tuple2('piv', 982),
			_Utils_Tuple2('ensp', 8194),
			_Utils_Tuple2('emsp', 8195),
			_Utils_Tuple2('thinsp', 8201),
			_Utils_Tuple2('zwnj', 8204),
			_Utils_Tuple2('zwj', 8205),
			_Utils_Tuple2('lrm', 8206),
			_Utils_Tuple2('rlm', 8207),
			_Utils_Tuple2('ndash', 8211),
			_Utils_Tuple2('mdash', 8212),
			_Utils_Tuple2('lsquo', 8216),
			_Utils_Tuple2('rsquo', 8217),
			_Utils_Tuple2('sbquo', 8218),
			_Utils_Tuple2('ldquo', 8220),
			_Utils_Tuple2('rdquo', 8221),
			_Utils_Tuple2('bdquo', 8222),
			_Utils_Tuple2('dagger', 8224),
			_Utils_Tuple2('Dagger', 8225),
			_Utils_Tuple2('bull', 8226),
			_Utils_Tuple2('hellip', 8230),
			_Utils_Tuple2('permil', 8240),
			_Utils_Tuple2('prime', 8242),
			_Utils_Tuple2('Prime', 8243),
			_Utils_Tuple2('lsaquo', 8249),
			_Utils_Tuple2('rsaquo', 8250),
			_Utils_Tuple2('oline', 8254),
			_Utils_Tuple2('frasl', 8260),
			_Utils_Tuple2('euro', 8364),
			_Utils_Tuple2('image', 8465),
			_Utils_Tuple2('weierp', 8472),
			_Utils_Tuple2('real', 8476),
			_Utils_Tuple2('trade', 8482),
			_Utils_Tuple2('alefsym', 8501),
			_Utils_Tuple2('larr', 8592),
			_Utils_Tuple2('uarr', 8593),
			_Utils_Tuple2('rarr', 8594),
			_Utils_Tuple2('darr', 8595),
			_Utils_Tuple2('harr', 8596),
			_Utils_Tuple2('crarr', 8629),
			_Utils_Tuple2('lArr', 8656),
			_Utils_Tuple2('uArr', 8657),
			_Utils_Tuple2('rArr', 8658),
			_Utils_Tuple2('dArr', 8659),
			_Utils_Tuple2('hArr', 8660),
			_Utils_Tuple2('forall', 8704),
			_Utils_Tuple2('part', 8706),
			_Utils_Tuple2('exist', 8707),
			_Utils_Tuple2('empty', 8709),
			_Utils_Tuple2('nabla', 8711),
			_Utils_Tuple2('isin', 8712),
			_Utils_Tuple2('notin', 8713),
			_Utils_Tuple2('ni', 8715),
			_Utils_Tuple2('prod', 8719),
			_Utils_Tuple2('sum', 8721),
			_Utils_Tuple2('minus', 8722),
			_Utils_Tuple2('lowast', 8727),
			_Utils_Tuple2('radic', 8730),
			_Utils_Tuple2('prop', 8733),
			_Utils_Tuple2('infin', 8734),
			_Utils_Tuple2('ang', 8736),
			_Utils_Tuple2('and', 8743),
			_Utils_Tuple2('or', 8744),
			_Utils_Tuple2('cap', 8745),
			_Utils_Tuple2('cup', 8746),
			_Utils_Tuple2('int', 8747),
			_Utils_Tuple2('there4', 8756),
			_Utils_Tuple2('sim', 8764),
			_Utils_Tuple2('cong', 8773),
			_Utils_Tuple2('asymp', 8776),
			_Utils_Tuple2('ne', 8800),
			_Utils_Tuple2('equiv', 8801),
			_Utils_Tuple2('le', 8804),
			_Utils_Tuple2('ge', 8805),
			_Utils_Tuple2('sub', 8834),
			_Utils_Tuple2('sup', 8835),
			_Utils_Tuple2('nsub', 8836),
			_Utils_Tuple2('sube', 8838),
			_Utils_Tuple2('supe', 8839),
			_Utils_Tuple2('oplus', 8853),
			_Utils_Tuple2('otimes', 8855),
			_Utils_Tuple2('perp', 8869),
			_Utils_Tuple2('sdot', 8901),
			_Utils_Tuple2('lceil', 8968),
			_Utils_Tuple2('rceil', 8969),
			_Utils_Tuple2('lfloor', 8970),
			_Utils_Tuple2('rfloor', 8971),
			_Utils_Tuple2('lang', 9001),
			_Utils_Tuple2('rang', 9002),
			_Utils_Tuple2('loz', 9674),
			_Utils_Tuple2('spades', 9824),
			_Utils_Tuple2('clubs', 9827),
			_Utils_Tuple2('hearts', 9829),
			_Utils_Tuple2('diams', 9830)
		]));
var $author$project$Markdown$Entity$replaceEntity = function (match) {
	var _v0 = match.m1;
	if (_v0.b && (!_v0.a.$)) {
		var first = _v0.a.a;
		var _v1 = A2($elm$core$Dict$get, first, $author$project$Markdown$Entity$entities);
		if (!_v1.$) {
			var code = _v1.a;
			return $elm$core$String$fromChar(
				$elm$core$Char$fromCode(code));
		} else {
			return match.b$;
		}
	} else {
		return match.b$;
	}
};
var $author$project$Markdown$Entity$replaceEntities = A2($elm$regex$Regex$replace, $author$project$Markdown$Entity$entitiesRegex, $author$project$Markdown$Entity$replaceEntity);
var $author$project$Markdown$Helpers$escapableRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\+)([!\"#$%&\\\'()*+,./:;<=>?@[\\\\\\]^_`{|}~-])'));
var $author$project$Markdown$Helpers$replaceEscapable = A2(
	$elm$regex$Regex$replace,
	$author$project$Markdown$Helpers$escapableRegex,
	function (regexMatch) {
		var _v0 = regexMatch.m1;
		if (((_v0.b && (!_v0.a.$)) && _v0.b.b) && (!_v0.b.a.$)) {
			var backslashes = _v0.a.a;
			var _v1 = _v0.b;
			var escapedStr = _v1.a.a;
			return _Utils_ap(
				A2(
					$elm$core$String$repeat,
					($elm$core$String$length(backslashes) / 2) | 0,
					'\\'),
				escapedStr);
		} else {
			return regexMatch.b$;
		}
	});
var $author$project$Markdown$Entity$hexadecimalRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&#[Xx]([0-9a-fA-F]{1,8});'));
var $elm$core$String$foldl = _String_foldl;
var $author$project$Markdown$Entity$hexToInt = function (string) {
	var folder = F2(
		function (hexDigit, _int) {
			return ((_int * 16) + A2(
				$elm$core$Basics$modBy,
				39,
				$elm$core$Char$toCode(hexDigit))) - 9;
		});
	return A3(
		$elm$core$String$foldl,
		folder,
		0,
		$elm$core$String$toLower(string));
};
var $author$project$Markdown$Entity$replaceHexadecimal = function (match) {
	var _v0 = match.m1;
	if (_v0.b && (!_v0.a.$)) {
		var first = _v0.a.a;
		return $author$project$Markdown$Entity$validUnicode(
			$author$project$Markdown$Entity$hexToInt(first));
	} else {
		return match.b$;
	}
};
var $author$project$Markdown$Entity$replaceHexadecimals = A2($elm$regex$Regex$replace, $author$project$Markdown$Entity$hexadecimalRegex, $author$project$Markdown$Entity$replaceHexadecimal);
var $author$project$Markdown$Helpers$formatStr = function (str) {
	var withEscapes = $author$project$Markdown$Helpers$replaceEscapable(str);
	return $author$project$Markdown$Helpers$containsAmpersand(withEscapes) ? $author$project$Markdown$Entity$replaceHexadecimals(
		$author$project$Markdown$Entity$replaceDecimals(
			$author$project$Markdown$Entity$replaceEntities(withEscapes))) : withEscapes;
};
var $author$project$Markdown$InlineParser$normalMatch = function (text) {
	return {
		m: 0,
		C: _List_Nil,
		o: 0,
		aD: $author$project$Markdown$Helpers$formatStr(text),
		W: 0,
		E: 0,
		t: $author$project$Markdown$InlineParser$NormalType
	};
};
var $author$project$Markdown$InlineParser$parseTextMatch = F3(
	function (rawText, _v2, parsedMatches) {
		var matchModel = _v2;
		var updtMatch = {
			m: matchModel.m,
			C: A3($author$project$Markdown$InlineParser$parseTextMatches, matchModel.aD, _List_Nil, matchModel.C),
			o: matchModel.o,
			aD: matchModel.aD,
			W: matchModel.W,
			E: matchModel.E,
			t: matchModel.t
		};
		if (!parsedMatches.b) {
			var finalStr = A2($elm$core$String$dropLeft, matchModel.m, rawText);
			return $elm$core$String$isEmpty(finalStr) ? _List_fromArray(
				[updtMatch]) : _List_fromArray(
				[
					updtMatch,
					$author$project$Markdown$InlineParser$normalMatch(finalStr)
				]);
		} else {
			var matchHead = parsedMatches.a;
			var matchesTail = parsedMatches.b;
			var _v4 = matchHead.t;
			if (!_v4.$) {
				return A2($elm$core$List$cons, updtMatch, parsedMatches);
			} else {
				return _Utils_eq(matchModel.m, matchHead.o) ? A2($elm$core$List$cons, updtMatch, parsedMatches) : ((_Utils_cmp(matchModel.m, matchHead.o) < 0) ? A2(
					$elm$core$List$cons,
					updtMatch,
					A2(
						$elm$core$List$cons,
						$author$project$Markdown$InlineParser$normalMatch(
							A3($elm$core$String$slice, matchModel.m, matchHead.o, rawText)),
						parsedMatches)) : parsedMatches);
			}
		}
	});
var $author$project$Markdown$InlineParser$parseTextMatches = F3(
	function (rawText, parsedMatches, matches) {
		parseTextMatches:
		while (true) {
			if (!matches.b) {
				if (!parsedMatches.b) {
					return $elm$core$String$isEmpty(rawText) ? _List_Nil : _List_fromArray(
						[
							$author$project$Markdown$InlineParser$normalMatch(rawText)
						]);
				} else {
					var matchModel = parsedMatches.a;
					return (matchModel.o > 0) ? A2(
						$elm$core$List$cons,
						$author$project$Markdown$InlineParser$normalMatch(
							A2($elm$core$String$left, matchModel.o, rawText)),
						parsedMatches) : parsedMatches;
				}
			} else {
				var match = matches.a;
				var matchesTail = matches.b;
				var $temp$rawText = rawText,
					$temp$parsedMatches = A3($author$project$Markdown$InlineParser$parseTextMatch, rawText, match, parsedMatches),
					$temp$matches = matchesTail;
				rawText = $temp$rawText;
				parsedMatches = $temp$parsedMatches;
				matches = $temp$matches;
				continue parseTextMatches;
			}
		}
	});
var $author$project$Markdown$InlineParser$angleBracketLTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\<)'));
var $author$project$Markdown$InlineParser$AngleBracketOpen = {$: 4};
var $author$project$Markdown$InlineParser$regMatchToAngleBracketLToken = function (regMatch) {
	var _v0 = regMatch.m1;
	if ((_v0.b && _v0.b.b) && (!_v0.b.a.$)) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var delimiter = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $author$project$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
			{h: regMatch.h + backslashesLength, d6: 1, j: $author$project$Markdown$InlineParser$AngleBracketOpen}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Markdown$InlineParser$findAngleBracketLTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$author$project$Markdown$InlineParser$regMatchToAngleBracketLToken,
		A2($elm$regex$Regex$find, $author$project$Markdown$InlineParser$angleBracketLTokenRegex, str));
};
var $author$project$Markdown$InlineParser$angleBracketRTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\>)'));
var $author$project$Markdown$InlineParser$AngleBracketClose = function (a) {
	return {$: 5, a: a};
};
var $author$project$Markdown$InlineParser$Escaped = 0;
var $author$project$Markdown$InlineParser$NotEscaped = 1;
var $author$project$Markdown$InlineParser$regMatchToAngleBracketRToken = function (regMatch) {
	var _v0 = regMatch.m1;
	if ((_v0.b && _v0.b.b) && (!_v0.b.a.$)) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $elm$core$Maybe$Just(
			{
				h: regMatch.h + backslashesLength,
				d6: 1,
				j: $author$project$Markdown$Helpers$isEven(backslashesLength) ? $author$project$Markdown$InlineParser$AngleBracketClose(1) : $author$project$Markdown$InlineParser$AngleBracketClose(0)
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Markdown$InlineParser$findAngleBracketRTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$author$project$Markdown$InlineParser$regMatchToAngleBracketRToken,
		A2($elm$regex$Regex$find, $author$project$Markdown$InlineParser$angleBracketRTokenRegex, str));
};
var $author$project$Markdown$InlineParser$asteriskEmphasisTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)([^*])?(\\*+)([^*])?'));
var $author$project$Markdown$InlineParser$EmphasisToken = F2(
	function (a, b) {
		return {$: 7, a: a, b: b};
	});
var $author$project$Markdown$InlineParser$isPunctuation = function (c) {
	switch (c) {
		case '!':
			return true;
		case '\"':
			return true;
		case '#':
			return true;
		case '%':
			return true;
		case '&':
			return true;
		case '\'':
			return true;
		case '(':
			return true;
		case ')':
			return true;
		case '*':
			return true;
		case ',':
			return true;
		case '-':
			return true;
		case '.':
			return true;
		case '/':
			return true;
		case ':':
			return true;
		case ';':
			return true;
		case '?':
			return true;
		case '@':
			return true;
		case '[':
			return true;
		case ']':
			return true;
		case '_':
			return true;
		case '{':
			return true;
		case '}':
			return true;
		case '~':
			return true;
		default:
			return false;
	}
};
var $author$project$Markdown$InlineParser$containPunctuation = A2(
	$elm$core$String$foldl,
	F2(
		function (c, accum) {
			return accum || $author$project$Markdown$InlineParser$isPunctuation(c);
		}),
	false);
var $author$project$Markdown$InlineParser$isWhitespace = function (c) {
	switch (c) {
		case ' ':
			return true;
		case '\u000C':
			return true;
		case '\n':
			return true;
		case '\r':
			return true;
		case '\t':
			return true;
		case '\u000B':
			return true;
		case '\u00A0':
			return true;
		case '\u2028':
			return true;
		case '\u2029':
			return true;
		default:
			return false;
	}
};
var $author$project$Markdown$InlineParser$containSpace = A2(
	$elm$core$String$foldl,
	F2(
		function (c, accum) {
			return accum || $author$project$Markdown$InlineParser$isWhitespace(c);
		}),
	false);
var $author$project$Markdown$InlineParser$getFringeRank = function (mstring) {
	if (!mstring.$) {
		var string = mstring.a;
		return ($elm$core$String$isEmpty(string) || $author$project$Markdown$InlineParser$containSpace(string)) ? 0 : ($author$project$Markdown$InlineParser$containPunctuation(string) ? 1 : 2);
	} else {
		return 0;
	}
};
var $author$project$Markdown$InlineParser$regMatchToEmphasisToken = F3(
	function (_char, rawText, regMatch) {
		var _v0 = regMatch.m1;
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.a.$)) && _v0.b.b.b.b) {
			var maybeBackslashes = _v0.a;
			var _v1 = _v0.b;
			var maybeLeftFringe = _v1.a;
			var _v2 = _v1.b;
			var delimiter = _v2.a.a;
			var _v3 = _v2.b;
			var maybeRightFringe = _v3.a;
			var rFringeRank = $author$project$Markdown$InlineParser$getFringeRank(maybeRightFringe);
			var leftFringeLength = function () {
				if (!maybeLeftFringe.$) {
					var left = maybeLeftFringe.a;
					return $elm$core$String$length(left);
				} else {
					return 0;
				}
			}();
			var mLeftFringe = ((!(!regMatch.h)) && (!leftFringeLength)) ? $elm$core$Maybe$Just(
				A3($elm$core$String$slice, regMatch.h - 1, regMatch.h, rawText)) : maybeLeftFringe;
			var backslashesLength = function () {
				if (!maybeBackslashes.$) {
					var backslashes = maybeBackslashes.a;
					return $elm$core$String$length(backslashes);
				} else {
					return 0;
				}
			}();
			var isEscaped = ((!$author$project$Markdown$Helpers$isEven(backslashesLength)) && (!leftFringeLength)) || function () {
				if ((!mLeftFringe.$) && (mLeftFringe.a === '\\')) {
					return true;
				} else {
					return false;
				}
			}();
			var delimiterLength = isEscaped ? ($elm$core$String$length(delimiter) - 1) : $elm$core$String$length(delimiter);
			var lFringeRank = isEscaped ? 1 : $author$project$Markdown$InlineParser$getFringeRank(mLeftFringe);
			if ((delimiterLength <= 0) || ((_char === '_') && ((lFringeRank === 2) && (rFringeRank === 2)))) {
				return $elm$core$Maybe$Nothing;
			} else {
				var index = ((regMatch.h + backslashesLength) + leftFringeLength) + (isEscaped ? 1 : 0);
				return $elm$core$Maybe$Just(
					{
						h: index,
						d6: delimiterLength,
						j: A2(
							$author$project$Markdown$InlineParser$EmphasisToken,
							_char,
							{cW: lFringeRank, da: rFringeRank})
					});
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Markdown$InlineParser$findAsteriskEmphasisTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		A2($author$project$Markdown$InlineParser$regMatchToEmphasisToken, '*', str),
		A2($elm$regex$Regex$find, $author$project$Markdown$InlineParser$asteriskEmphasisTokenRegex, str));
};
var $author$project$Markdown$InlineParser$codeTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\`+)'));
var $author$project$Markdown$InlineParser$CodeToken = function (a) {
	return {$: 0, a: a};
};
var $author$project$Markdown$InlineParser$regMatchToCodeToken = function (regMatch) {
	var _v0 = regMatch.m1;
	if ((_v0.b && _v0.b.b) && (!_v0.b.a.$)) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backtick = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $elm$core$Maybe$Just(
			{
				h: regMatch.h + backslashesLength,
				d6: $elm$core$String$length(backtick),
				j: $author$project$Markdown$Helpers$isEven(backslashesLength) ? $author$project$Markdown$InlineParser$CodeToken(1) : $author$project$Markdown$InlineParser$CodeToken(0)
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Markdown$InlineParser$findCodeTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$author$project$Markdown$InlineParser$regMatchToCodeToken,
		A2($elm$regex$Regex$find, $author$project$Markdown$InlineParser$codeTokenRegex, str));
};
var $author$project$Markdown$InlineParser$hardBreakTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(?:(\\\\+)|( {2,}))\\n'));
var $author$project$Markdown$InlineParser$HardLineBreakToken = {$: 9};
var $author$project$Markdown$InlineParser$regMatchToHardBreakToken = function (regMatch) {
	var _v0 = regMatch.m1;
	_v0$2:
	while (true) {
		if (_v0.b) {
			if (!_v0.a.$) {
				var backslashes = _v0.a.a;
				var backslashesLength = $elm$core$String$length(backslashes);
				return (!$author$project$Markdown$Helpers$isEven(backslashesLength)) ? $elm$core$Maybe$Just(
					{h: (regMatch.h + backslashesLength) - 1, d6: 2, j: $author$project$Markdown$InlineParser$HardLineBreakToken}) : $elm$core$Maybe$Nothing;
			} else {
				if (_v0.b.b && (!_v0.b.a.$)) {
					var _v1 = _v0.b;
					return $elm$core$Maybe$Just(
						{
							h: regMatch.h,
							d6: $elm$core$String$length(regMatch.b$),
							j: $author$project$Markdown$InlineParser$HardLineBreakToken
						});
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $author$project$Markdown$InlineParser$regMatchToSoftHardBreakToken = function (regMatch) {
	var _v0 = regMatch.m1;
	_v0$2:
	while (true) {
		if (_v0.b) {
			if (!_v0.a.$) {
				var backslashes = _v0.a.a;
				var backslashesLength = $elm$core$String$length(backslashes);
				return $author$project$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
					{h: regMatch.h + backslashesLength, d6: 1, j: $author$project$Markdown$InlineParser$HardLineBreakToken}) : $elm$core$Maybe$Just(
					{h: (regMatch.h + backslashesLength) - 1, d6: 2, j: $author$project$Markdown$InlineParser$HardLineBreakToken});
			} else {
				if (_v0.b.b) {
					var _v1 = _v0.b;
					var maybeSpaces = _v1.a;
					return $elm$core$Maybe$Just(
						{
							h: regMatch.h,
							d6: $elm$core$String$length(regMatch.b$),
							j: $author$project$Markdown$InlineParser$HardLineBreakToken
						});
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $author$project$Markdown$InlineParser$softAsHardLineBreak = false;
var $author$project$Markdown$InlineParser$softAsHardLineBreakTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(?:(\\\\+)|( *))\\n'));
var $author$project$Markdown$InlineParser$findHardBreakTokens = function (str) {
	return $author$project$Markdown$InlineParser$softAsHardLineBreak ? A2(
		$elm$core$List$filterMap,
		$author$project$Markdown$InlineParser$regMatchToSoftHardBreakToken,
		A2($elm$regex$Regex$find, $author$project$Markdown$InlineParser$softAsHardLineBreakTokenRegex, str)) : A2(
		$elm$core$List$filterMap,
		$author$project$Markdown$InlineParser$regMatchToHardBreakToken,
		A2($elm$regex$Regex$find, $author$project$Markdown$InlineParser$hardBreakTokenRegex, str));
};
var $author$project$Markdown$InlineParser$linkImageCloseTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\])'));
var $author$project$Markdown$InlineParser$SquareBracketClose = {$: 3};
var $author$project$Markdown$InlineParser$regMatchToLinkImageCloseToken = function (regMatch) {
	var _v0 = regMatch.m1;
	if ((_v0.b && _v0.b.b) && (!_v0.b.a.$)) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $author$project$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
			{h: regMatch.h + backslashesLength, d6: 1, j: $author$project$Markdown$InlineParser$SquareBracketClose}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Markdown$InlineParser$findLinkImageCloseTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$author$project$Markdown$InlineParser$regMatchToLinkImageCloseToken,
		A2($elm$regex$Regex$find, $author$project$Markdown$InlineParser$linkImageCloseTokenRegex, str));
};
var $author$project$Markdown$InlineParser$linkImageOpenTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\!)?(\\[)'));
var $author$project$Markdown$InlineParser$Active = 0;
var $author$project$Markdown$InlineParser$ImageOpenToken = {$: 2};
var $author$project$Markdown$InlineParser$LinkOpenToken = function (a) {
	return {$: 1, a: a};
};
var $author$project$Markdown$InlineParser$regMatchToLinkImageOpenToken = function (regMatch) {
	var _v0 = regMatch.m1;
	if (((_v0.b && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.a.$)) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var maybeImageOpen = _v1.a;
		var _v2 = _v1.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		var isEscaped = !$author$project$Markdown$Helpers$isEven(backslashesLength);
		var index = isEscaped ? ((regMatch.h + backslashesLength) + 1) : (regMatch.h + backslashesLength);
		if (isEscaped) {
			if (!maybeImageOpen.$) {
				return $elm$core$Maybe$Just(
					{
						h: index,
						d6: 1,
						j: $author$project$Markdown$InlineParser$LinkOpenToken(0)
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			if (!maybeImageOpen.$) {
				return $elm$core$Maybe$Just(
					{h: index, d6: 2, j: $author$project$Markdown$InlineParser$ImageOpenToken});
			} else {
				return $elm$core$Maybe$Just(
					{
						h: index,
						d6: 1,
						j: $author$project$Markdown$InlineParser$LinkOpenToken(0)
					});
			}
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Markdown$InlineParser$findLinkImageOpenTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$author$project$Markdown$InlineParser$regMatchToLinkImageOpenToken,
		A2($elm$regex$Regex$find, $author$project$Markdown$InlineParser$linkImageOpenTokenRegex, str));
};
var $author$project$Markdown$InlineParser$StrikethroughToken = function (a) {
	return {$: 10, a: a};
};
var $author$project$Markdown$InlineParser$regMatchToStrikethroughToken = function (regMatch) {
	var _v0 = regMatch.m1;
	if ((_v0.b && _v0.b.b) && (!_v0.b.a.$)) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var tilde = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		var _v2 = $author$project$Markdown$Helpers$isEven(backslashesLength) ? _Utils_Tuple2(
			$elm$core$String$length(tilde),
			$author$project$Markdown$InlineParser$StrikethroughToken(1)) : _Utils_Tuple2(
			$elm$core$String$length(tilde),
			$author$project$Markdown$InlineParser$StrikethroughToken(0));
		var length = _v2.a;
		var meaning = _v2.b;
		return $elm$core$Maybe$Just(
			{h: regMatch.h + backslashesLength, d6: length, j: meaning});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Markdown$InlineParser$strikethroughTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(~{2,})([^~])?'));
var $author$project$Markdown$InlineParser$findStrikethroughTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$author$project$Markdown$InlineParser$regMatchToStrikethroughToken,
		A2($elm$regex$Regex$find, $author$project$Markdown$InlineParser$strikethroughTokenRegex, str));
};
var $author$project$Markdown$InlineParser$underlineEmphasisTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)([^_])?(\\_+)([^_])?'));
var $author$project$Markdown$InlineParser$findUnderlineEmphasisTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		A2($author$project$Markdown$InlineParser$regMatchToEmphasisToken, '_', str),
		A2($elm$regex$Regex$find, $author$project$Markdown$InlineParser$underlineEmphasisTokenRegex, str));
};
var $author$project$Markdown$InlineParser$mergeByIndex = F2(
	function (left, right) {
		if (left.b) {
			var lfirst = left.a;
			var lrest = left.b;
			if (right.b) {
				var rfirst = right.a;
				var rrest = right.b;
				return (_Utils_cmp(lfirst.h, rfirst.h) < 0) ? A2(
					$elm$core$List$cons,
					lfirst,
					A2($author$project$Markdown$InlineParser$mergeByIndex, lrest, right)) : A2(
					$elm$core$List$cons,
					rfirst,
					A2($author$project$Markdown$InlineParser$mergeByIndex, left, rrest));
			} else {
				return left;
			}
		} else {
			return right;
		}
	});
var $author$project$Markdown$InlineParser$tokenize = function (rawText) {
	return A2(
		$author$project$Markdown$InlineParser$mergeByIndex,
		$author$project$Markdown$InlineParser$findAngleBracketRTokens(rawText),
		A2(
			$author$project$Markdown$InlineParser$mergeByIndex,
			$author$project$Markdown$InlineParser$findAngleBracketLTokens(rawText),
			A2(
				$author$project$Markdown$InlineParser$mergeByIndex,
				$author$project$Markdown$InlineParser$findHardBreakTokens(rawText),
				A2(
					$author$project$Markdown$InlineParser$mergeByIndex,
					$author$project$Markdown$InlineParser$findLinkImageCloseTokens(rawText),
					A2(
						$author$project$Markdown$InlineParser$mergeByIndex,
						$author$project$Markdown$InlineParser$findLinkImageOpenTokens(rawText),
						A2(
							$author$project$Markdown$InlineParser$mergeByIndex,
							$author$project$Markdown$InlineParser$findStrikethroughTokens(rawText),
							A2(
								$author$project$Markdown$InlineParser$mergeByIndex,
								$author$project$Markdown$InlineParser$findUnderlineEmphasisTokens(rawText),
								A2(
									$author$project$Markdown$InlineParser$mergeByIndex,
									$author$project$Markdown$InlineParser$findAsteriskEmphasisTokens(rawText),
									$author$project$Markdown$InlineParser$findCodeTokens(rawText)))))))));
};
var $author$project$Markdown$InlineParser$CodeType = {$: 2};
var $author$project$Markdown$InlineParser$EmphasisType = function (a) {
	return {$: 7, a: a};
};
var $author$project$Markdown$InlineParser$HtmlType = function (a) {
	return {$: 6, a: a};
};
var $author$project$Markdown$InlineParser$ImageType = function (a) {
	return {$: 5, a: a};
};
var $author$project$Markdown$InlineParser$Inactive = 1;
var $author$project$Markdown$InlineParser$LinkType = function (a) {
	return {$: 4, a: a};
};
var $author$project$Markdown$InlineParser$StrikethroughType = {$: 8};
var $author$project$Markdown$InlineParser$AutolinkType = function (a) {
	return {$: 3, a: a};
};
var $elm$regex$Regex$contains = _Regex_contains;
var $author$project$Markdown$InlineParser$decodeUrlRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('%(?:3B|2C|2F|3F|3A|40|26|3D|2B|24|23|25)'));
var $elm$url$Url$percentDecode = _Url_percentDecode;
var $author$project$Markdown$InlineParser$encodeUrl = A2(
	$elm$core$Basics$composeR,
	$elm$url$Url$percentEncode,
	A2(
		$elm$regex$Regex$replace,
		$author$project$Markdown$InlineParser$decodeUrlRegex,
		function (match) {
			return A2(
				$elm$core$Maybe$withDefault,
				match.b$,
				$elm$url$Url$percentDecode(match.b$));
		}));
var $author$project$Markdown$InlineParser$urlRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^([A-Za-z][A-Za-z0-9.+\\-]{1,31}:[^<>\\x00-\\x20]*)$'));
var $author$project$Markdown$InlineParser$autolinkToMatch = function (_v0) {
	var match = _v0;
	return A2($elm$regex$Regex$contains, $author$project$Markdown$InlineParser$urlRegex, match.aD) ? $elm$core$Result$Ok(
		_Utils_update(
			match,
			{
				t: $author$project$Markdown$InlineParser$AutolinkType(
					_Utils_Tuple2(
						match.aD,
						$author$project$Markdown$InlineParser$encodeUrl(match.aD)))
			})) : $elm$core$Result$Err(match);
};
var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
var $author$project$Markdown$Helpers$insideSquareBracketRegex = '[^\\[\\]\\\\]*(?:\\\\.[^\\[\\]\\\\]*)*';
var $author$project$Markdown$InlineParser$refLabelRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^\\[\\s*(' + ($author$project$Markdown$Helpers$insideSquareBracketRegex + ')\\s*\\]')));
var $author$project$Markdown$Helpers$cleanWhitespaces = function (original) {
	return original;
};
var $author$project$Markdown$Helpers$prepareRefLabel = A2($elm$core$Basics$composeR, $author$project$Markdown$Helpers$cleanWhitespaces, $elm$core$String$toLower);
var $author$project$Markdown$InlineParser$prepareUrlAndTitle = F2(
	function (rawUrl, maybeTitle) {
		return _Utils_Tuple2(
			$author$project$Markdown$InlineParser$encodeUrl(
				$author$project$Markdown$Helpers$formatStr(rawUrl)),
			A2($elm$core$Maybe$map, $author$project$Markdown$Helpers$formatStr, maybeTitle));
	});
var $author$project$Markdown$InlineParser$refRegexToMatch = F3(
	function (matchModel, references, maybeRegexMatch) {
		var refLabel = function (str) {
			return $elm$core$String$isEmpty(str) ? matchModel.aD : str;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				matchModel.aD,
				A2(
					$elm$core$Maybe$withDefault,
					$elm$core$Maybe$Nothing,
					A2(
						$elm$core$Maybe$andThen,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.m1;
							},
							$elm$core$List$head),
						maybeRegexMatch))));
		var _v0 = A2(
			$elm$core$Dict$get,
			$author$project$Markdown$Helpers$prepareRefLabel(refLabel),
			references);
		if (_v0.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v1 = _v0.a;
			var rawUrl = _v1.a;
			var maybeTitle = _v1.b;
			var type_ = function () {
				var _v3 = matchModel.t;
				if (_v3.$ === 5) {
					return $author$project$Markdown$InlineParser$ImageType(
						A2($author$project$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle));
				} else {
					return $author$project$Markdown$InlineParser$LinkType(
						A2($author$project$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle));
				}
			}();
			var regexMatchLength = function () {
				if (!maybeRegexMatch.$) {
					var match = maybeRegexMatch.a.b$;
					return $elm$core$String$length(match);
				} else {
					return 0;
				}
			}();
			return $elm$core$Maybe$Just(
				_Utils_update(
					matchModel,
					{m: matchModel.m + regexMatchLength, t: type_}));
		}
	});
var $author$project$Markdown$InlineParser$checkForInlineReferences = F3(
	function (remainText, _v0, references) {
		var tempMatch = _v0;
		var matches = A3($elm$regex$Regex$findAtMost, 1, $author$project$Markdown$InlineParser$refLabelRegex, remainText);
		return A3(
			$author$project$Markdown$InlineParser$refRegexToMatch,
			tempMatch,
			references,
			$elm$core$List$head(matches));
	});
var $author$project$Markdown$Helpers$lineEndChars = '\\f\\v\\r\\n';
var $author$project$Markdown$Helpers$whiteSpaceChars = ' \\t\\f\\v\\r\\n';
var $author$project$Markdown$InlineParser$hrefRegex = '(?:<([^<>' + ($author$project$Markdown$Helpers$lineEndChars + (']*)>|([^' + ($author$project$Markdown$Helpers$whiteSpaceChars + ('\\(\\)\\\\]*(?:\\\\.[^' + ($author$project$Markdown$Helpers$whiteSpaceChars + '\\(\\)\\\\]*)*))')))));
var $author$project$Markdown$Helpers$titleRegex = '(?:[' + ($author$project$Markdown$Helpers$whiteSpaceChars + (']+' + ('(?:\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\'|' + ('\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|' + '\\(([^\\)\\\\]*(?:\\\\.[^\\)\\\\]*)*)\\)))?'))));
var $author$project$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^\\(\\s*' + ($author$project$Markdown$InlineParser$hrefRegex + ($author$project$Markdown$Helpers$titleRegex + '\\s*\\)'))));
var $author$project$Markdown$Helpers$returnFirstJust = function (maybes) {
	var process = F2(
		function (a, maybeFound) {
			if (!maybeFound.$) {
				var found = maybeFound.a;
				return $elm$core$Maybe$Just(found);
			} else {
				return a;
			}
		});
	return A3($elm$core$List$foldl, process, $elm$core$Maybe$Nothing, maybes);
};
var $author$project$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch = F2(
	function (matchModel, regexMatch) {
		var _v0 = regexMatch.m1;
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && _v0.b.b.b.b.b) {
			var maybeRawUrlAngleBrackets = _v0.a;
			var _v1 = _v0.b;
			var maybeRawUrlWithoutBrackets = _v1.a;
			var _v2 = _v1.b;
			var maybeTitleSingleQuotes = _v2.a;
			var _v3 = _v2.b;
			var maybeTitleDoubleQuotes = _v3.a;
			var _v4 = _v3.b;
			var maybeTitleParenthesis = _v4.a;
			var maybeTitle = $author$project$Markdown$Helpers$returnFirstJust(
				_List_fromArray(
					[maybeTitleSingleQuotes, maybeTitleDoubleQuotes, maybeTitleParenthesis]));
			var toMatch = function (rawUrl) {
				return _Utils_update(
					matchModel,
					{
						m: matchModel.m + $elm$core$String$length(regexMatch.b$),
						t: function () {
							var _v5 = matchModel.t;
							if (_v5.$ === 5) {
								return $author$project$Markdown$InlineParser$ImageType;
							} else {
								return $author$project$Markdown$InlineParser$LinkType;
							}
						}()(
							A2($author$project$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle))
					});
			};
			var maybeRawUrl = $author$project$Markdown$Helpers$returnFirstJust(
				_List_fromArray(
					[maybeRawUrlAngleBrackets, maybeRawUrlWithoutBrackets]));
			return $elm$core$Maybe$Just(
				toMatch(
					A2($elm$core$Maybe$withDefault, '', maybeRawUrl)));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Markdown$InlineParser$checkForInlineLinkTypeOrImageType = F3(
	function (remainText, _v0, refs) {
		var tempMatch = _v0;
		var _v1 = A3($elm$regex$Regex$findAtMost, 1, $author$project$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex, remainText);
		if (_v1.b) {
			var first = _v1.a;
			var _v2 = A2($author$project$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch, tempMatch, first);
			if (!_v2.$) {
				var match = _v2.a;
				return $elm$core$Maybe$Just(match);
			} else {
				return A3($author$project$Markdown$InlineParser$checkForInlineReferences, remainText, tempMatch, refs);
			}
		} else {
			return A3($author$project$Markdown$InlineParser$checkForInlineReferences, remainText, tempMatch, refs);
		}
	});
var $author$project$Markdown$InlineParser$checkParsedAheadOverlapping = F2(
	function (_v0, remainMatches) {
		var match = _v0;
		var overlappingMatches = $elm$core$List$filter(
			function (_v1) {
				var testMatch = _v1;
				return (_Utils_cmp(match.m, testMatch.o) > 0) && (_Utils_cmp(match.m, testMatch.m) < 0);
			});
		return ($elm$core$List$isEmpty(remainMatches) || $elm$core$List$isEmpty(
			overlappingMatches(remainMatches))) ? $elm$core$Maybe$Just(
			A2($elm$core$List$cons, match, remainMatches)) : $elm$core$Maybe$Nothing;
	});
var $author$project$Markdown$InlineParser$emailRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^([a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?)*)$'));
var $author$project$Markdown$InlineParser$emailAutolinkTypeToMatch = function (_v0) {
	var match = _v0;
	return A2($elm$regex$Regex$contains, $author$project$Markdown$InlineParser$emailRegex, match.aD) ? $elm$core$Result$Ok(
		_Utils_update(
			match,
			{
				t: $author$project$Markdown$InlineParser$AutolinkType(
					_Utils_Tuple2(
						match.aD,
						'mailto:' + $author$project$Markdown$InlineParser$encodeUrl(match.aD)))
			})) : $elm$core$Result$Err(match);
};
var $author$project$Markdown$InlineParser$findTokenHelp = F3(
	function (innerTokens, isToken, tokens) {
		findTokenHelp:
		while (true) {
			if (!tokens.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var nextToken = tokens.a;
				var remainingTokens = tokens.b;
				if (isToken(nextToken)) {
					return $elm$core$Maybe$Just(
						_Utils_Tuple3(
							nextToken,
							$elm$core$List$reverse(innerTokens),
							remainingTokens));
				} else {
					var $temp$innerTokens = A2($elm$core$List$cons, nextToken, innerTokens),
						$temp$isToken = isToken,
						$temp$tokens = remainingTokens;
					innerTokens = $temp$innerTokens;
					isToken = $temp$isToken;
					tokens = $temp$tokens;
					continue findTokenHelp;
				}
			}
		}
	});
var $author$project$Markdown$InlineParser$findToken = F2(
	function (isToken, tokens) {
		return A3($author$project$Markdown$InlineParser$findTokenHelp, _List_Nil, isToken, tokens);
	});
var $author$project$Markdown$InlineParser$HtmlToken = F2(
	function (a, b) {
		return {$: 6, a: a, b: b};
	});
var $author$project$Markdown$InlineParser$NotOpening = 1;
var $elm$parser$Parser$Advanced$getOffset = function (s) {
	return A3($elm$parser$Parser$Advanced$Good, false, s.aA, s);
};
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 0:
					return list;
				case 1:
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0;
		var _v1 = parse(
			{kt: 1, l: _List_Nil, n: 1, aA: 0, mu: 1, de: src});
		if (!_v1.$) {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $author$project$Markdown$InlineParser$htmlToToken = F2(
	function (rawText, _v0) {
		var match = _v0;
		var consumedCharacters = A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (startOffset, htmlTag, endOffset) {
								return {gx: htmlTag, d6: endOffset - startOffset};
							})),
					$elm$parser$Parser$Advanced$getOffset),
				$author$project$HtmlParser$html),
			$elm$parser$Parser$Advanced$getOffset);
		var parsed = A2(
			$elm$parser$Parser$Advanced$run,
			consumedCharacters,
			A2($elm$core$String$dropLeft, match.o, rawText));
		if (!parsed.$) {
			var htmlTag = parsed.a.gx;
			var length = parsed.a.d6;
			var htmlToken = A2($author$project$Markdown$InlineParser$HtmlToken, 1, htmlTag);
			return $elm$core$Maybe$Just(
				{h: match.o, d6: length, j: htmlToken});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Markdown$Helpers$ifError = F2(
	function (_function, result) {
		if (!result.$) {
			return result;
		} else {
			var err = result.a;
			return _function(err);
		}
	});
var $author$project$Markdown$InlineParser$isCloseToken = F2(
	function (htmlModel, token) {
		return false;
	});
var $author$project$Markdown$InlineParser$isCodeTokenPair = F2(
	function (closeToken, openToken) {
		var _v0 = openToken.j;
		if (!_v0.$) {
			if (!_v0.a) {
				var _v1 = _v0.a;
				return _Utils_eq(openToken.d6 - 1, closeToken.d6);
			} else {
				var _v2 = _v0.a;
				return _Utils_eq(openToken.d6, closeToken.d6);
			}
		} else {
			return false;
		}
	});
var $author$project$Markdown$InlineParser$isLinkTypeOrImageOpenToken = function (token) {
	var _v0 = token.j;
	switch (_v0.$) {
		case 1:
			return true;
		case 2:
			return true;
		default:
			return false;
	}
};
var $author$project$Markdown$InlineParser$isOpenEmphasisToken = F2(
	function (closeToken, openToken) {
		var _v0 = openToken.j;
		if (_v0.$ === 7) {
			var openChar = _v0.a;
			var open = _v0.b;
			var _v1 = closeToken.j;
			if (_v1.$ === 7) {
				var closeChar = _v1.a;
				var close = _v1.b;
				return _Utils_eq(openChar, closeChar) ? ((_Utils_eq(open.cW, open.da) || _Utils_eq(close.cW, close.da)) ? ((!(!A2($elm$core$Basics$modBy, 3, closeToken.d6 + openToken.d6))) || ((!A2($elm$core$Basics$modBy, 3, closeToken.d6)) && (!A2($elm$core$Basics$modBy, 3, openToken.d6)))) : true) : false;
			} else {
				return false;
			}
		} else {
			return false;
		}
	});
var $author$project$Markdown$InlineParser$isStrikethroughTokenPair = F2(
	function (closeToken, openToken) {
		var _v0 = function () {
			var _v1 = openToken.j;
			if (_v1.$ === 10) {
				if (!_v1.a) {
					var _v2 = _v1.a;
					return _Utils_Tuple2(true, openToken.d6 - 1);
				} else {
					var _v3 = _v1.a;
					return _Utils_Tuple2(true, openToken.d6);
				}
			} else {
				return _Utils_Tuple2(false, 0);
			}
		}();
		var openTokenIsStrikethrough = _v0.a;
		var openTokenLength = _v0.b;
		var _v4 = function () {
			var _v5 = closeToken.j;
			if (_v5.$ === 10) {
				if (!_v5.a) {
					var _v6 = _v5.a;
					return _Utils_Tuple2(true, closeToken.d6 - 1);
				} else {
					var _v7 = _v5.a;
					return _Utils_Tuple2(true, closeToken.d6);
				}
			} else {
				return _Utils_Tuple2(false, 0);
			}
		}();
		var closeTokenIsStrikethrough = _v4.a;
		var closeTokenLength = _v4.b;
		return closeTokenIsStrikethrough && (openTokenIsStrikethrough && _Utils_eq(closeTokenLength, openTokenLength));
	});
var $author$project$Markdown$InlineParser$HardLineBreakType = {$: 1};
var $author$project$Markdown$InlineParser$tokenToMatch = F2(
	function (token, type_) {
		return {m: token.h + token.d6, C: _List_Nil, o: token.h, aD: '', W: 0, E: 0, t: type_};
	});
var $author$project$Markdown$InlineParser$lineBreakTTM = F5(
	function (remaining, tokens, matches, refs, rawText) {
		lineBreakTTM:
		while (true) {
			if (!remaining.b) {
				return matches;
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v1 = token.j;
				if (_v1.$ === 9) {
					var $temp$remaining = tokensTail,
						$temp$tokens = tokens,
						$temp$matches = A2(
						$elm$core$List$cons,
						A2($author$project$Markdown$InlineParser$tokenToMatch, token, $author$project$Markdown$InlineParser$HardLineBreakType),
						matches),
						$temp$refs = refs,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					refs = $temp$refs;
					rawText = $temp$rawText;
					continue lineBreakTTM;
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$refs = refs,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					refs = $temp$refs;
					rawText = $temp$rawText;
					continue lineBreakTTM;
				}
			}
		}
	});
var $author$project$Markdown$InlineParser$removeParsedAheadTokens = F2(
	function (_v0, tokensTail) {
		var match = _v0;
		return A2(
			$elm$core$List$filter,
			function (token) {
				return _Utils_cmp(token.h, match.m) > -1;
			},
			tokensTail);
	});
var $author$project$Markdown$InlineParser$angleBracketsToMatch = F6(
	function (closeToken, escaped, matches, references, rawText, _v46) {
		var openToken = _v46.a;
		var remainTokens = _v46.c;
		var result = A2(
			$author$project$Markdown$Helpers$ifError,
			$author$project$Markdown$InlineParser$emailAutolinkTypeToMatch,
			$author$project$Markdown$InlineParser$autolinkToMatch(
				A7(
					$author$project$Markdown$InlineParser$tokenPairToMatch,
					references,
					rawText,
					function (s) {
						return s;
					},
					$author$project$Markdown$InlineParser$CodeType,
					openToken,
					closeToken,
					_List_Nil)));
		if (result.$ === 1) {
			var tempMatch = result.a;
			if (escaped === 1) {
				var _v49 = A2($author$project$Markdown$InlineParser$htmlToToken, rawText, tempMatch);
				if (!_v49.$) {
					var newToken = _v49.a;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A2($elm$core$List$cons, newToken, remainTokens),
							matches));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			var newMatch = result.a;
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(
					remainTokens,
					A2($elm$core$List$cons, newMatch, matches)));
		}
	});
var $author$project$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		codeAutolinkTypeHtmlTagTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$author$project$Markdown$InlineParser$htmlElementTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v38 = token.j;
				switch (_v38.$) {
					case 0:
						var isEscaped = _v38.a;
						var _v39 = A2(
							$author$project$Markdown$InlineParser$findToken,
							$author$project$Markdown$InlineParser$isCodeTokenPair(token),
							tokens);
						if (!_v39.$) {
							var code = _v39.a;
							var _v40 = A5($author$project$Markdown$InlineParser$codeToMatch, token, matches, references, rawText, code);
							var newTokens = _v40.a;
							var newMatches = _v40.b;
							var $temp$remaining = tokensTail,
								$temp$tokens = newTokens,
								$temp$matches = newMatches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2($elm$core$List$cons, token, tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						}
					case 5:
						var isEscaped = _v38.a;
						var isAngleBracketOpen = function (_v45) {
							var meaning = _v45.j;
							if (meaning.$ === 4) {
								return true;
							} else {
								return false;
							}
						};
						var _v41 = A2($author$project$Markdown$InlineParser$findToken, isAngleBracketOpen, tokens);
						if (!_v41.$) {
							var found = _v41.a;
							var _v42 = A6($author$project$Markdown$InlineParser$angleBracketsToMatch, token, isEscaped, matches, references, rawText, found);
							if (!_v42.$) {
								var _v43 = _v42.a;
								var newTokens = _v43.a;
								var newMatches = _v43.b;
								var $temp$remaining = tokensTail,
									$temp$tokens = A2(
									$elm$core$List$filter,
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
									newTokens),
									$temp$matches = newMatches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue codeAutolinkTypeHtmlTagTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = A2(
									$elm$core$List$filter,
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
									tokens),
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue codeAutolinkTypeHtmlTagTTM;
							}
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2(
								$elm$core$List$filter,
								A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
								tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						}
					default:
						var $temp$remaining = tokensTail,
							$temp$tokens = A2($elm$core$List$cons, token, tokens),
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue codeAutolinkTypeHtmlTagTTM;
				}
			}
		}
	});
var $author$project$Markdown$InlineParser$codeToMatch = F5(
	function (closeToken, matches, references, rawText, _v34) {
		var openToken = _v34.a;
		var remainTokens = _v34.c;
		var updatedOpenToken = function () {
			var _v35 = openToken.j;
			if ((!_v35.$) && (!_v35.a)) {
				var _v36 = _v35.a;
				return _Utils_update(
					openToken,
					{h: openToken.h + 1, d6: openToken.d6 - 1});
			} else {
				return openToken;
			}
		}();
		var match = A7($author$project$Markdown$InlineParser$tokenPairToMatch, references, rawText, $author$project$Markdown$Helpers$cleanWhitespaces, $author$project$Markdown$InlineParser$CodeType, updatedOpenToken, closeToken, _List_Nil);
		return _Utils_Tuple2(
			remainTokens,
			A2($elm$core$List$cons, match, matches));
	});
var $author$project$Markdown$InlineParser$emphasisTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		emphasisTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$author$project$Markdown$InlineParser$strikethroughTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v29 = token.j;
				if (_v29.$ === 7) {
					var _char = _v29.a;
					var leftFringeRank = _v29.b.cW;
					var rightFringeRank = _v29.b.da;
					if (_Utils_eq(leftFringeRank, rightFringeRank)) {
						if ((!(!rightFringeRank)) && ((_char !== '_') || (rightFringeRank === 1))) {
							var _v30 = A2(
								$author$project$Markdown$InlineParser$findToken,
								$author$project$Markdown$InlineParser$isOpenEmphasisToken(token),
								tokens);
							if (!_v30.$) {
								var found = _v30.a;
								var _v31 = A5($author$project$Markdown$InlineParser$emphasisToMatch, references, rawText, token, tokensTail, found);
								var newRemaining = _v31.a;
								var match = _v31.b;
								var newTokens = _v31.c;
								var $temp$remaining = newRemaining,
									$temp$tokens = newTokens,
									$temp$matches = A2($elm$core$List$cons, match, matches),
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = A2($elm$core$List$cons, token, tokens),
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							}
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = tokens,
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue emphasisTTM;
						}
					} else {
						if (_Utils_cmp(leftFringeRank, rightFringeRank) < 0) {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2($elm$core$List$cons, token, tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue emphasisTTM;
						} else {
							var _v32 = A2(
								$author$project$Markdown$InlineParser$findToken,
								$author$project$Markdown$InlineParser$isOpenEmphasisToken(token),
								tokens);
							if (!_v32.$) {
								var found = _v32.a;
								var _v33 = A5($author$project$Markdown$InlineParser$emphasisToMatch, references, rawText, token, tokensTail, found);
								var newRemaining = _v33.a;
								var match = _v33.b;
								var newTokens = _v33.c;
								var $temp$remaining = newRemaining,
									$temp$tokens = newTokens,
									$temp$matches = A2($elm$core$List$cons, match, matches),
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = tokens,
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							}
						}
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue emphasisTTM;
				}
			}
		}
	});
var $author$project$Markdown$InlineParser$emphasisToMatch = F5(
	function (references, rawText, closeToken, tokensTail, _v27) {
		var openToken = _v27.a;
		var innerTokens = _v27.b;
		var remainTokens = _v27.c;
		var remainLength = openToken.d6 - closeToken.d6;
		var updt = (!remainLength) ? {cw: closeToken, b3: openToken, c7: remainTokens, dn: tokensTail} : ((remainLength > 0) ? {
			cw: closeToken,
			b3: _Utils_update(
				openToken,
				{h: openToken.h + remainLength, d6: closeToken.d6}),
			c7: A2(
				$elm$core$List$cons,
				_Utils_update(
					openToken,
					{d6: remainLength}),
				remainTokens),
			dn: tokensTail
		} : {
			cw: _Utils_update(
				closeToken,
				{d6: openToken.d6}),
			b3: openToken,
			c7: remainTokens,
			dn: A2(
				$elm$core$List$cons,
				_Utils_update(
					closeToken,
					{h: closeToken.h + openToken.d6, d6: -remainLength}),
				tokensTail)
		});
		var match = A7(
			$author$project$Markdown$InlineParser$tokenPairToMatch,
			references,
			rawText,
			function (s) {
				return s;
			},
			$author$project$Markdown$InlineParser$EmphasisType(updt.b3.d6),
			updt.b3,
			updt.cw,
			$elm$core$List$reverse(innerTokens));
		return _Utils_Tuple3(updt.dn, match, updt.c7);
	});
var $author$project$Markdown$InlineParser$htmlElementTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		htmlElementTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$author$project$Markdown$InlineParser$linkImageTypeTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v23 = token.j;
				if (_v23.$ === 6) {
					var isOpen = _v23.a;
					var htmlModel = _v23.b;
					if (isOpen === 1) {
						var $temp$remaining = tokensTail,
							$temp$tokens = tokens,
							$temp$matches = A2(
							$elm$core$List$cons,
							A2(
								$author$project$Markdown$InlineParser$tokenToMatch,
								token,
								$author$project$Markdown$InlineParser$HtmlType(htmlModel)),
							matches),
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue htmlElementTTM;
					} else {
						var _v25 = A2(
							$author$project$Markdown$InlineParser$findToken,
							$author$project$Markdown$InlineParser$isCloseToken(htmlModel),
							tokensTail);
						if (_v25.$ === 1) {
							var $temp$remaining = tokensTail,
								$temp$tokens = tokens,
								$temp$matches = A2(
								$elm$core$List$cons,
								A2(
									$author$project$Markdown$InlineParser$tokenToMatch,
									token,
									$author$project$Markdown$InlineParser$HtmlType(htmlModel)),
								matches),
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue htmlElementTTM;
						} else {
							var _v26 = _v25.a;
							var closeToken = _v26.a;
							var innerTokens = _v26.b;
							var newTail = _v26.c;
							var newMatch = A7(
								$author$project$Markdown$InlineParser$tokenPairToMatch,
								references,
								rawText,
								function (s) {
									return s;
								},
								$author$project$Markdown$InlineParser$HtmlType(htmlModel),
								token,
								closeToken,
								innerTokens);
							var $temp$remaining = newTail,
								$temp$tokens = tokens,
								$temp$matches = A2($elm$core$List$cons, newMatch, matches),
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue htmlElementTTM;
						}
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue htmlElementTTM;
				}
			}
		}
	});
var $author$project$Markdown$InlineParser$linkImageTypeTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		linkImageTypeTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$author$project$Markdown$InlineParser$emphasisTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v18 = token.j;
				if (_v18.$ === 3) {
					var _v19 = A2($author$project$Markdown$InlineParser$findToken, $author$project$Markdown$InlineParser$isLinkTypeOrImageOpenToken, tokens);
					if (!_v19.$) {
						var found = _v19.a;
						var _v20 = A6($author$project$Markdown$InlineParser$linkOrImageTypeToMatch, token, tokensTail, matches, references, rawText, found);
						if (!_v20.$) {
							var _v21 = _v20.a;
							var x = _v21.a;
							var newMatches = _v21.b;
							var newTokens = _v21.c;
							var $temp$remaining = x,
								$temp$tokens = newTokens,
								$temp$matches = newMatches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue linkImageTypeTTM;
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = tokens,
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue linkImageTypeTTM;
						}
					} else {
						var $temp$remaining = tokensTail,
							$temp$tokens = tokens,
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue linkImageTypeTTM;
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue linkImageTypeTTM;
				}
			}
		}
	});
var $author$project$Markdown$InlineParser$linkOrImageTypeToMatch = F6(
	function (closeToken, tokensTail, oldMatches, references, rawText, _v8) {
		var openToken = _v8.a;
		var innerTokens = _v8.b;
		var remainTokens = _v8.c;
		var removeOpenToken = _Utils_Tuple3(
			tokensTail,
			oldMatches,
			_Utils_ap(innerTokens, remainTokens));
		var remainText = A2($elm$core$String$dropLeft, closeToken.h + 1, rawText);
		var inactivateLinkOpenToken = function (token) {
			var _v16 = token.j;
			if (_v16.$ === 1) {
				return _Utils_update(
					token,
					{
						j: $author$project$Markdown$InlineParser$LinkOpenToken(1)
					});
			} else {
				return token;
			}
		};
		var findTempMatch = function (isLinkType) {
			return A7(
				$author$project$Markdown$InlineParser$tokenPairToMatch,
				references,
				rawText,
				function (s) {
					return s;
				},
				isLinkType ? $author$project$Markdown$InlineParser$LinkType(
					_Utils_Tuple2('', $elm$core$Maybe$Nothing)) : $author$project$Markdown$InlineParser$ImageType(
					_Utils_Tuple2('', $elm$core$Maybe$Nothing)),
				openToken,
				closeToken,
				$elm$core$List$reverse(innerTokens));
		};
		var _v9 = openToken.j;
		switch (_v9.$) {
			case 2:
				var tempMatch = findTempMatch(false);
				var _v10 = A3($author$project$Markdown$InlineParser$checkForInlineLinkTypeOrImageType, remainText, tempMatch, references);
				if (_v10.$ === 1) {
					return $elm$core$Maybe$Just(removeOpenToken);
				} else {
					var match = _v10.a;
					var _v11 = A2($author$project$Markdown$InlineParser$checkParsedAheadOverlapping, match, oldMatches);
					if (!_v11.$) {
						var matches = _v11.a;
						return $elm$core$Maybe$Just(
							_Utils_Tuple3(
								A2($author$project$Markdown$InlineParser$removeParsedAheadTokens, match, tokensTail),
								matches,
								remainTokens));
					} else {
						return $elm$core$Maybe$Just(removeOpenToken);
					}
				}
			case 1:
				if (!_v9.a) {
					var _v12 = _v9.a;
					var tempMatch = findTempMatch(true);
					var _v13 = A3($author$project$Markdown$InlineParser$checkForInlineLinkTypeOrImageType, remainText, tempMatch, references);
					if (_v13.$ === 1) {
						return $elm$core$Maybe$Just(removeOpenToken);
					} else {
						var match = _v13.a;
						var _v14 = A2($author$project$Markdown$InlineParser$checkParsedAheadOverlapping, match, oldMatches);
						if (!_v14.$) {
							var matches = _v14.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple3(
									A2($author$project$Markdown$InlineParser$removeParsedAheadTokens, match, tokensTail),
									matches,
									A2($elm$core$List$map, inactivateLinkOpenToken, remainTokens)));
						} else {
							return $elm$core$Maybe$Just(removeOpenToken);
						}
					}
				} else {
					var _v15 = _v9.a;
					return $elm$core$Maybe$Just(removeOpenToken);
				}
			default:
				return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Markdown$InlineParser$strikethroughTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		strikethroughTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$author$project$Markdown$InlineParser$lineBreakTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v5 = token.j;
				if (_v5.$ === 10) {
					var isEscaped = _v5.a;
					var _v6 = A2(
						$author$project$Markdown$InlineParser$findToken,
						$author$project$Markdown$InlineParser$isStrikethroughTokenPair(token),
						tokens);
					if (!_v6.$) {
						var content = _v6.a;
						var _v7 = A5($author$project$Markdown$InlineParser$strikethroughToMatch, token, matches, references, rawText, content);
						var newTokens = _v7.a;
						var newMatches = _v7.b;
						var $temp$remaining = tokensTail,
							$temp$tokens = newTokens,
							$temp$matches = newMatches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue strikethroughTTM;
					} else {
						var $temp$remaining = tokensTail,
							$temp$tokens = A2($elm$core$List$cons, token, tokens),
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue strikethroughTTM;
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue strikethroughTTM;
				}
			}
		}
	});
var $author$project$Markdown$InlineParser$strikethroughToMatch = F5(
	function (closeToken, matches, references, rawText, _v1) {
		var openToken = _v1.a;
		var remainTokens = _v1.c;
		var updatedOpenToken = function () {
			var _v2 = openToken.j;
			if ((_v2.$ === 10) && (!_v2.a)) {
				var _v3 = _v2.a;
				return _Utils_update(
					openToken,
					{h: openToken.h + 1, d6: openToken.d6 - 1});
			} else {
				return openToken;
			}
		}();
		var match = A7($author$project$Markdown$InlineParser$tokenPairToMatch, references, rawText, $author$project$Markdown$Helpers$cleanWhitespaces, $author$project$Markdown$InlineParser$StrikethroughType, updatedOpenToken, closeToken, _List_Nil);
		return _Utils_Tuple2(
			remainTokens,
			A2($elm$core$List$cons, match, matches));
	});
var $author$project$Markdown$InlineParser$tokenPairToMatch = F7(
	function (references, rawText, processText, type_, openToken, closeToken, innerTokens) {
		var textStart = openToken.h + openToken.d6;
		var textEnd = closeToken.h;
		var text = processText(
			A3($elm$core$String$slice, textStart, textEnd, rawText));
		var start = openToken.h;
		var end = closeToken.h + closeToken.d6;
		var match = {m: end, C: _List_Nil, o: start, aD: text, W: textEnd, E: textStart, t: type_};
		var matches = A2(
			$elm$core$List$map,
			function (_v0) {
				var matchModel = _v0;
				return A2($author$project$Markdown$InlineParser$prepareChildMatch, match, matchModel);
			},
			A4($author$project$Markdown$InlineParser$tokensToMatches, innerTokens, _List_Nil, references, rawText));
		return {m: end, C: matches, o: start, aD: text, W: textEnd, E: textStart, t: type_};
	});
var $author$project$Markdown$InlineParser$tokensToMatches = F4(
	function (tokens, matches, references, rawText) {
		return A5($author$project$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM, tokens, _List_Nil, matches, references, rawText);
	});
var $author$project$Markdown$InlineParser$parse = F2(
	function (refs, rawText_) {
		var rawText = $elm$core$String$trim(rawText_);
		var tokens = $author$project$Markdown$InlineParser$tokenize(rawText);
		return $author$project$Markdown$InlineParser$matchesToInlines(
			A3(
				$author$project$Markdown$InlineParser$parseTextMatches,
				rawText,
				_List_Nil,
				$author$project$Markdown$InlineParser$organizeMatches(
					A4($author$project$Markdown$InlineParser$tokensToMatches, tokens, _List_Nil, refs, rawText))));
	});
var $author$project$Markdown$Parser$thisIsDefinitelyNotAnHtmlTag = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$token(
			A2(
				$elm$parser$Parser$Advanced$Token,
				' ',
				$elm$parser$Parser$Expecting(' '))),
			$elm$parser$Parser$Advanced$token(
			A2(
				$elm$parser$Parser$Advanced$Token,
				'>',
				$elm$parser$Parser$Expecting('>'))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$chompIf,
					$elm$core$Char$isAlpha,
					$elm$parser$Parser$Expecting('Alpha')),
				$elm$parser$Parser$Advanced$chompWhile(
					function (c) {
						return $elm$core$Char$isAlphaNum(c) || (c === '-');
					})),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							':',
							$elm$parser$Parser$Expecting(':'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'@',
							$elm$parser$Parser$Expecting('@'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'\\',
							$elm$parser$Parser$Expecting('\\'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'+',
							$elm$parser$Parser$Expecting('+'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'.',
							$elm$parser$Parser$Expecting('.')))
					])))
		]));
var $author$project$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock = $elm$parser$Parser$Advanced$backtrackable(
	A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (rawLine, _v0) {
				return $author$project$Markdown$RawBlock$OpenBlockOrParagraph(rawLine);
			}),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'<',
							$elm$parser$Parser$Expecting('<'))),
					$author$project$Markdown$Parser$thisIsDefinitelyNotAnHtmlTag),
				$author$project$Helpers$chompUntilLineEndOrEnd),
			$author$project$Helpers$lineEndOrEnd)));
var $author$project$Markdown$Table$TableHeader = $elm$core$Basics$identity;
var $author$project$Parser$Token$parseString = function (str) {
	return $elm$parser$Parser$Advanced$token(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$Expecting(str)));
};
var $author$project$Markdown$TableParser$parseCellHelper = function (_v0) {
	var curr = _v0.a;
	var acc = _v0.b;
	var _return = A2(
		$elm$core$Maybe$withDefault,
		$elm$parser$Parser$Advanced$Done(acc),
		A2(
			$elm$core$Maybe$map,
			function (cell) {
				return $elm$parser$Parser$Advanced$Done(
					A2($elm$core$List$cons, cell, acc));
			},
			curr));
	var finishCell = A2(
		$elm$core$Maybe$withDefault,
		$elm$parser$Parser$Advanced$Loop(
			_Utils_Tuple2($elm$core$Maybe$Nothing, acc)),
		A2(
			$elm$core$Maybe$map,
			function (cell) {
				return $elm$parser$Parser$Advanced$Loop(
					_Utils_Tuple2(
						$elm$core$Maybe$Nothing,
						A2($elm$core$List$cons, cell, acc)));
			},
			curr));
	var addToCurrent = function (c) {
		return _Utils_ap(
			A2($elm$core$Maybe$withDefault, '', curr),
			c);
	};
	var continueCell = function (c) {
		return $elm$parser$Parser$Advanced$Loop(
			_Utils_Tuple2(
				$elm$core$Maybe$Just(
					addToCurrent(c)),
				acc));
	};
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v1) {
					return _return;
				},
				$author$project$Parser$Token$parseString('|\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return _return;
				},
				$author$project$Parser$Token$parseString('\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v3) {
					return _return;
				},
				$elm$parser$Parser$Advanced$end(
					$elm$parser$Parser$Expecting('end'))),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('|'))),
				$author$project$Parser$Token$parseString('\\\\|')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('\\'))),
				$author$project$Parser$Token$parseString('\\\\')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('|'))),
				$author$project$Parser$Token$parseString('\\|')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(finishCell)),
				$author$project$Parser$Token$parseString('|')),
				A2(
				$elm$parser$Parser$Advanced$mapChompedString,
				F2(
					function (_char, _v4) {
						return continueCell(_char);
					}),
				A2(
					$elm$parser$Parser$Advanced$chompIf,
					$elm$core$Basics$always(true),
					$elm$parser$Parser$Problem('No character found')))
			]));
};
var $author$project$Markdown$TableParser$parseCells = A2(
	$elm$parser$Parser$Advanced$map,
	A2(
		$elm$core$List$foldl,
		F2(
			function (cell, acc) {
				return A2(
					$elm$core$List$cons,
					$elm$core$String$trim(cell),
					acc);
			}),
		_List_Nil),
	A2(
		$elm$parser$Parser$Advanced$loop,
		_Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil),
		$author$project$Markdown$TableParser$parseCellHelper));
var $author$project$Markdown$TableParser$rowParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$author$project$Parser$Token$parseString('|'),
					$elm$parser$Parser$Advanced$succeed(0)
				]))),
	$author$project$Markdown$TableParser$parseCells);
var $author$project$Markdown$TableParser$parseHeader = F2(
	function (_v0, headersRow) {
		var columnAlignments = _v0.b;
		var headersWithAlignment = function (headers) {
			return A3(
				$elm$core$List$map2,
				F2(
					function (headerCell, alignment) {
						return {ck: alignment, lA: headerCell};
					}),
				headers,
				columnAlignments);
		};
		var combineHeaderAndDelimiter = function (headers) {
			return _Utils_eq(
				$elm$core$List$length(headers),
				$elm$core$List$length(columnAlignments)) ? $elm$core$Result$Ok(
				headersWithAlignment(headers)) : $elm$core$Result$Err(
				'Tables must have the same number of header columns (' + ($elm$core$String$fromInt(
					$elm$core$List$length(headers)) + (') as delimiter columns (' + ($elm$core$String$fromInt(
					$elm$core$List$length(columnAlignments)) + ')'))));
		};
		var _v1 = A2($elm$parser$Parser$Advanced$run, $author$project$Markdown$TableParser$rowParser, headersRow);
		if (!_v1.$) {
			var headers = _v1.a;
			return combineHeaderAndDelimiter(headers);
		} else {
			return $elm$core$Result$Err('Unable to parse previous line as a table header');
		}
	});
var $author$project$Markdown$CodeBlock$CodeBlock = F2(
	function (language, body) {
		return {ff: body, g$: language};
	});
var $author$project$Markdown$CodeBlock$infoString = function (fenceCharacter) {
	var toInfoString = F2(
		function (str, _v2) {
			var _v1 = $elm$core$String$trim(str);
			if (_v1 === '') {
				return $elm$core$Maybe$Nothing;
			} else {
				var trimmed = _v1;
				return $elm$core$Maybe$Just(trimmed);
			}
		});
	var _v0 = fenceCharacter.cS;
	if (!_v0) {
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			toInfoString,
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return (c !== '`') && (!$author$project$Whitespace$isLineEnd(c));
				}));
	} else {
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			toInfoString,
			$elm$parser$Parser$Advanced$chompWhile(
				A2($elm$core$Basics$composeL, $elm$core$Basics$not, $author$project$Whitespace$isLineEnd)));
	}
};
var $author$project$Markdown$CodeBlock$Backtick = 0;
var $author$project$Parser$Token$backtick = A2(
	$elm$parser$Parser$Advanced$Token,
	'`',
	$elm$parser$Parser$Expecting('a \'`\''));
var $author$project$Markdown$CodeBlock$backtick = {ct: '`', cS: 0, dm: $author$project$Parser$Token$backtick};
var $author$project$Markdown$CodeBlock$colToIndentation = function (_int) {
	switch (_int) {
		case 1:
			return $elm$parser$Parser$Advanced$succeed(0);
		case 2:
			return $elm$parser$Parser$Advanced$succeed(1);
		case 3:
			return $elm$parser$Parser$Advanced$succeed(2);
		case 4:
			return $elm$parser$Parser$Advanced$succeed(3);
		default:
			return $elm$parser$Parser$Advanced$problem(
				$elm$parser$Parser$Expecting('Fenced code blocks should be indented no more than 3 spaces'));
	}
};
var $author$project$Markdown$CodeBlock$fenceOfAtLeast = F2(
	function (minLength, fenceCharacter) {
		var builtTokens = A3(
			$elm$core$List$foldl,
			F2(
				function (t, p) {
					return A2($elm$parser$Parser$Advanced$ignorer, p, t);
				}),
			$elm$parser$Parser$Advanced$succeed(0),
			A2(
				$elm$core$List$repeat,
				minLength,
				$elm$parser$Parser$Advanced$token(fenceCharacter.dm)));
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			F2(
				function (str, _v0) {
					return _Utils_Tuple2(
						fenceCharacter,
						$elm$core$String$length(str));
				}),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				builtTokens,
				$elm$parser$Parser$Advanced$chompWhile(
					$elm$core$Basics$eq(fenceCharacter.ct))));
	});
var $author$project$Markdown$CodeBlock$Tilde = 1;
var $author$project$Parser$Token$tilde = A2(
	$elm$parser$Parser$Advanced$Token,
	'~',
	$elm$parser$Parser$Expecting('a `~`'));
var $author$project$Markdown$CodeBlock$tilde = {ct: '~', cS: 1, dm: $author$project$Parser$Token$tilde};
var $author$project$Whitespace$upToThreeSpaces = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$author$project$Whitespace$space,
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$author$project$Whitespace$space,
							$elm$parser$Parser$Advanced$succeed(0)
						]))),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$author$project$Whitespace$space,
						$elm$parser$Parser$Advanced$succeed(0)
					]))),
			$elm$parser$Parser$Advanced$succeed(0)
		]));
var $author$project$Markdown$CodeBlock$openingFence = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (indent, _v0) {
						var character = _v0.a;
						var length = _v0.b;
						return {cu: character, d2: indent, d6: length};
					})),
			$author$project$Whitespace$upToThreeSpaces),
		A2($elm$parser$Parser$Advanced$andThen, $author$project$Markdown$CodeBlock$colToIndentation, $elm$parser$Parser$Advanced$getCol)),
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2($author$project$Markdown$CodeBlock$fenceOfAtLeast, 3, $author$project$Markdown$CodeBlock$backtick),
				A2($author$project$Markdown$CodeBlock$fenceOfAtLeast, 3, $author$project$Markdown$CodeBlock$tilde)
			])));
var $elm$parser$Parser$ExpectingEnd = {$: 10};
var $author$project$Whitespace$isSpace = $elm$core$Basics$eq(' ');
var $author$project$Markdown$CodeBlock$closingFence = F2(
	function (minLength, fenceCharacter) {
		return A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(0),
						$author$project$Whitespace$upToThreeSpaces),
					A2($author$project$Markdown$CodeBlock$fenceOfAtLeast, minLength, fenceCharacter)),
				$elm$parser$Parser$Advanced$chompWhile($author$project$Whitespace$isSpace)),
			$author$project$Helpers$lineEndOrEnd);
	});
var $author$project$Markdown$CodeBlock$codeBlockLine = function (indented) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			A2($author$project$Parser$Extra$upTo, indented, $author$project$Whitespace$space)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getOffset, $author$project$Helpers$chompUntilLineEndOrEnd),
			$author$project$Helpers$lineEndOrEnd));
};
var $elm$parser$Parser$Advanced$getSource = function (s) {
	return A3($elm$parser$Parser$Advanced$Good, false, s.de, s);
};
var $author$project$Markdown$CodeBlock$remainingBlockHelp = function (_v0) {
	var fence = _v0.a;
	var body = _v0.b;
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$elm$parser$Parser$Advanced$Done(body)),
				$elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd)),
				A2(
				$elm$parser$Parser$Advanced$mapChompedString,
				F2(
					function (lineEnd, _v1) {
						return $elm$parser$Parser$Advanced$Loop(
							_Utils_Tuple2(
								fence,
								_Utils_ap(body, lineEnd)));
					}),
				$author$project$Whitespace$lineEnd),
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						$elm$parser$Parser$Advanced$Done(body)),
					A2($author$project$Markdown$CodeBlock$closingFence, fence.d6, fence.cu))),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						$elm$parser$Parser$Advanced$succeed(
							F3(
								function (start, end, source) {
									return $elm$parser$Parser$Advanced$Loop(
										_Utils_Tuple2(
											fence,
											_Utils_ap(
												body,
												A3($elm$core$String$slice, start, end, source))));
								})),
						$author$project$Markdown$CodeBlock$codeBlockLine(fence.d2)),
					$elm$parser$Parser$Advanced$getOffset),
				$elm$parser$Parser$Advanced$getSource)
			]));
};
var $author$project$Markdown$CodeBlock$remainingBlock = function (fence) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_Utils_Tuple2(fence, ''),
		$author$project$Markdown$CodeBlock$remainingBlockHelp);
};
var $author$project$Markdown$CodeBlock$parser = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (fence) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($author$project$Markdown$CodeBlock$CodeBlock),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$author$project$Markdown$CodeBlock$infoString(fence.cu),
					$author$project$Helpers$lineEndOrEnd)),
			$author$project$Markdown$CodeBlock$remainingBlock(fence));
	},
	$author$project$Markdown$CodeBlock$openingFence);
var $author$project$Markdown$Heading$dropTrailingHashes = function (headingString) {
	dropTrailingHashes:
	while (true) {
		if (A2($elm$core$String$endsWith, '#', headingString)) {
			var $temp$headingString = A2($elm$core$String$dropRight, 1, headingString);
			headingString = $temp$headingString;
			continue dropTrailingHashes;
		} else {
			return headingString;
		}
	}
};
var $elm$core$String$trimRight = _String_trimRight;
var $author$project$Markdown$Heading$dropClosingSequence = function (headingString) {
	var droppedTrailingHashesString = $author$project$Markdown$Heading$dropTrailingHashes(headingString);
	return (A2($elm$core$String$endsWith, ' ', droppedTrailingHashesString) || $elm$core$String$isEmpty(droppedTrailingHashesString)) ? $elm$core$String$trimRight(droppedTrailingHashesString) : headingString;
};
var $author$project$Parser$Token$hash = A2(
	$elm$parser$Parser$Advanced$Token,
	'#',
	$elm$parser$Parser$Expecting('a `#`'));
var $author$project$Markdown$Heading$isHash = function (c) {
	if ('#' === c) {
		return true;
	} else {
		return false;
	}
};
var $elm$parser$Parser$Advanced$spaces = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return (c === ' ') || ((c === '\n') || (c === '\r'));
	});
var $author$project$Markdown$Heading$parser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($author$project$Markdown$RawBlock$Heading),
				A2(
					$elm$parser$Parser$Advanced$andThen,
					function (startingSpaces) {
						var startSpace = $elm$core$String$length(startingSpaces);
						return (startSpace >= 4) ? $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Expecting('heading with < 4 spaces in front')) : $elm$parser$Parser$Advanced$succeed(startSpace);
					},
					$elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$spaces))),
			$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$hash)),
		A2(
			$elm$parser$Parser$Advanced$andThen,
			function (additionalHashes) {
				var level = $elm$core$String$length(additionalHashes) + 1;
				return (level >= 7) ? $elm$parser$Parser$Advanced$problem(
					$elm$parser$Parser$Expecting('heading with < 7 #\'s')) : $elm$parser$Parser$Advanced$succeed(level);
			},
			$elm$parser$Parser$Advanced$getChompedString(
				$elm$parser$Parser$Advanced$chompWhile($author$project$Markdown$Heading$isHash)))),
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(''),
				$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$newline)),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$space),
								$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$tab)
							]))),
				A2(
					$elm$parser$Parser$Advanced$mapChompedString,
					F2(
						function (headingText, _v0) {
							return $author$project$Markdown$Heading$dropClosingSequence(
								$elm$core$String$trim(headingText));
						}),
					$author$project$Helpers$chompUntilLineEndOrEnd))
			])));
var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var $elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.aA, s.mu, s.kt, s.de);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return _Utils_eq(newOffset, -1) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.l)) : A3(
			$elm$parser$Parser$Advanced$Good,
			_Utils_cmp(s.aA, newOffset) < 0,
			0,
			{kt: newCol, l: s.l, n: s.n, aA: newOffset, mu: newRow, de: s.de});
	};
};
var $author$project$Parser$Token$greaterThan = A2(
	$elm$parser$Parser$Advanced$Token,
	'>',
	$elm$parser$Parser$Expecting('a `>`'));
var $elm$parser$Parser$Advanced$Located = F3(
	function (row, col, context) {
		return {kt: col, l: context, mu: row};
	});
var $elm$parser$Parser$Advanced$changeContext = F2(
	function (newContext, s) {
		return {kt: s.kt, l: newContext, n: s.n, aA: s.aA, mu: s.mu, de: s.de};
	});
var $elm$parser$Parser$Advanced$inContext = F2(
	function (context, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(
				A2(
					$elm$parser$Parser$Advanced$changeContext,
					A2(
						$elm$core$List$cons,
						A3($elm$parser$Parser$Advanced$Located, s0.mu, s0.kt, context),
						s0.l),
					s0));
			if (!_v1.$) {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					a,
					A2($elm$parser$Parser$Advanced$changeContext, s0.l, s1));
			} else {
				var step = _v1;
				return step;
			}
		};
	});
var $author$project$Whitespace$isWhitespace = function (_char) {
	switch (_char) {
		case ' ':
			return true;
		case '\n':
			return true;
		case '\t':
			return true;
		case '\u000B':
			return true;
		case '\u000C':
			return true;
		case '\r':
			return true;
		default:
			return false;
	}
};
var $author$project$Parser$Token$lessThan = A2(
	$elm$parser$Parser$Advanced$Token,
	'<',
	$elm$parser$Parser$Expecting('a `<`'));
var $author$project$Markdown$LinkReferenceDefinition$destinationParser = A2(
	$elm$parser$Parser$Advanced$inContext,
	'link destination',
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$url$Url$percentEncode),
					$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$lessThan)),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($author$project$Parser$Token$greaterThan)),
					$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$greaterThan))),
				$elm$parser$Parser$Advanced$getChompedString(
				$author$project$Parser$Extra$chompOneOrMore(
					A2($elm$core$Basics$composeL, $elm$core$Basics$not, $author$project$Whitespace$isWhitespace)))
			])));
var $author$project$Parser$Token$closingSquareBracket = A2(
	$elm$parser$Parser$Advanced$Token,
	']',
	$elm$parser$Parser$Expecting('a `]`'));
var $author$project$Parser$Token$openingSquareBracket = A2(
	$elm$parser$Parser$Advanced$Token,
	'[',
	$elm$parser$Parser$Expecting('a `[`'));
var $author$project$Markdown$LinkReferenceDefinition$labelParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($author$project$Markdown$Helpers$prepareRefLabel),
		$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$openingSquareBracket)),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntil($author$project$Parser$Token$closingSquareBracket)),
		$elm$parser$Parser$Advanced$symbol(
			A2(
				$elm$parser$Parser$Advanced$Token,
				']:',
				$elm$parser$Parser$Expecting(']:')))));
var $author$project$Parser$Token$doubleQuote = A2(
	$elm$parser$Parser$Advanced$Token,
	'\"',
	$elm$parser$Parser$Expecting('a double quote'));
var $author$project$Markdown$LinkReferenceDefinition$hasNoBlankLine = function (str) {
	return A2($elm$core$String$contains, '\n\n', str) ? $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Expecting('no blank line')) : $elm$parser$Parser$Advanced$succeed(str);
};
var $author$project$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$chompWhile(
		function (c) {
			return (!$author$project$Whitespace$isLineEnd(c)) && $author$project$Whitespace$isWhitespace(c);
		}),
	$author$project$Helpers$lineEndOrEnd);
var $author$project$Whitespace$requiredWhitespace = A2(
	$elm$parser$Parser$Advanced$ignorer,
	A2(
		$elm$parser$Parser$Advanced$chompIf,
		$author$project$Whitespace$isWhitespace,
		$elm$parser$Parser$Expecting('Required whitespace')),
	$elm$parser$Parser$Advanced$chompWhile($author$project$Whitespace$isWhitespace));
var $author$project$Parser$Token$singleQuote = A2(
	$elm$parser$Parser$Advanced$Token,
	'\'',
	$elm$parser$Parser$Expecting('a single quote'));
var $author$project$Markdown$LinkReferenceDefinition$titleParser = function () {
	var inSingleQuotes = A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Just),
			$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$singleQuote)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$author$project$Markdown$LinkReferenceDefinition$hasNoBlankLine,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($author$project$Parser$Token$singleQuote))),
				$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$singleQuote)),
			$author$project$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline));
	var inDoubleQuotes = A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Just),
			$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$doubleQuote)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$author$project$Markdown$LinkReferenceDefinition$hasNoBlankLine,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($author$project$Parser$Token$doubleQuote))),
				$elm$parser$Parser$Advanced$symbol($author$project$Parser$Token$doubleQuote)),
			$author$project$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline));
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		'title',
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$backtrackable(
					A2(
						$elm$parser$Parser$Advanced$keeper,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
							$author$project$Whitespace$requiredWhitespace),
						$elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									inDoubleQuotes,
									inSingleQuotes,
									$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing)
								])))),
					A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing),
					$author$project$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline)
				])));
}();
var $author$project$Markdown$LinkReferenceDefinition$parser = A2(
	$elm$parser$Parser$Advanced$inContext,
	'link reference definition',
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (label, destination, title) {
								return _Utils_Tuple2(
									label,
									{kO: destination, jg: title});
							})),
					$author$project$Whitespace$upToThreeSpaces),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$author$project$Markdown$LinkReferenceDefinition$labelParser,
							$elm$parser$Parser$Advanced$chompWhile($author$project$Whitespace$isSpaceOrTab)),
						$elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									$author$project$Whitespace$lineEnd,
									$elm$parser$Parser$Advanced$succeed(0)
								]))),
					$elm$parser$Parser$Advanced$chompWhile($author$project$Whitespace$isSpaceOrTab))),
			$author$project$Markdown$LinkReferenceDefinition$destinationParser),
		$author$project$Markdown$LinkReferenceDefinition$titleParser));
var $author$project$ThematicBreak$ThematicBreak = 0;
var $author$project$ThematicBreak$whitespace = $elm$parser$Parser$Advanced$chompWhile($author$project$Whitespace$isSpaceOrTab);
var $author$project$ThematicBreak$withChar = function (tchar) {
	var token = $author$project$Parser$Token$parseString(
		$elm$core$String$fromChar(tchar));
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$succeed(0),
								token),
							$author$project$ThematicBreak$whitespace),
						token),
					$author$project$ThematicBreak$whitespace),
				token),
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return _Utils_eq(c, tchar) || $author$project$Whitespace$isSpaceOrTab(c);
				})),
		$author$project$Helpers$lineEndOrEnd);
};
var $author$project$ThematicBreak$parseThematicBreak = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$author$project$ThematicBreak$withChar('-'),
			$author$project$ThematicBreak$withChar('*'),
			$author$project$ThematicBreak$withChar('_')
		]));
var $author$project$ThematicBreak$parser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$author$project$Whitespace$space),
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								$author$project$Whitespace$space,
								$elm$parser$Parser$Advanced$succeed(0)
							]))),
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$author$project$Whitespace$space,
							$elm$parser$Parser$Advanced$succeed(0)
						]))),
			$author$project$ThematicBreak$parseThematicBreak),
			$author$project$ThematicBreak$parseThematicBreak
		]));
var $author$project$Markdown$RawBlock$LevelOne = 0;
var $author$project$Markdown$RawBlock$LevelTwo = 1;
var $author$project$Markdown$RawBlock$SetextLine = F2(
	function (a, b) {
		return {$: 13, a: a, b: b};
	});
var $author$project$Parser$Token$equals = A2(
	$elm$parser$Parser$Advanced$Token,
	'=',
	$elm$parser$Parser$Expecting('a `=`'));
var $author$project$Parser$Token$minus = A2(
	$elm$parser$Parser$Advanced$Token,
	'-',
	$elm$parser$Parser$Expecting('a `-`'));
var $author$project$Markdown$Parser$setextLineParser = function () {
	var setextLevel = F3(
		function (level, levelToken, levelChar) {
			return A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(level),
					$elm$parser$Parser$Advanced$token(levelToken)),
				$elm$parser$Parser$Advanced$chompWhile(
					$elm$core$Basics$eq(levelChar)));
		});
	return A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (raw, level) {
				return A2($author$project$Markdown$RawBlock$SetextLine, level, raw);
			}),
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$author$project$Whitespace$upToThreeSpaces),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								A3(setextLevel, 0, $author$project$Parser$Token$equals, '='),
								A3(setextLevel, 1, $author$project$Parser$Token$minus, '-')
							])),
					$elm$parser$Parser$Advanced$chompWhile($author$project$Whitespace$isSpaceOrTab)),
				$author$project$Helpers$lineEndOrEnd)));
}();
var $author$project$Markdown$RawBlock$TableDelimiter = function (a) {
	return {$: 9, a: a};
};
var $author$project$Markdown$TableParser$chompSinglelineWhitespace = $elm$parser$Parser$Advanced$chompWhile($author$project$Whitespace$isSpaceOrTab);
var $author$project$Parser$Extra$maybeChomp = function (condition) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$chompIf,
				condition,
				$elm$parser$Parser$Problem('Character not found')),
				$elm$parser$Parser$Advanced$succeed(0)
			]));
};
var $author$project$Markdown$TableParser$requirePipeIfNotFirst = function (columns) {
	return $elm$core$List$isEmpty(columns) ? $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$author$project$Parser$Token$parseString('|'),
				$elm$parser$Parser$Advanced$succeed(0)
			])) : $author$project$Parser$Token$parseString('|');
};
var $author$project$Markdown$TableParser$delimiterRowHelp = function (revDelimiterColumns) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
					},
					$author$project$Parser$Token$parseString('|\n'))),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v1) {
					return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
				},
				$author$project$Parser$Token$parseString('\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
				},
				$elm$parser$Parser$Advanced$end(
					$elm$parser$Parser$Expecting('end'))),
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							$elm$parser$Parser$Advanced$Done(revDelimiterColumns)),
						$author$project$Parser$Token$parseString('|')),
					$elm$parser$Parser$Advanced$end(
						$elm$parser$Parser$Expecting('end')))),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							function (column) {
								return $elm$parser$Parser$Advanced$Loop(
									A2($elm$core$List$cons, column, revDelimiterColumns));
							}),
						$author$project$Markdown$TableParser$requirePipeIfNotFirst(revDelimiterColumns)),
					$author$project$Markdown$TableParser$chompSinglelineWhitespace),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getChompedString(
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								A2(
									$elm$parser$Parser$Advanced$ignorer,
									$elm$parser$Parser$Advanced$succeed(0),
									$author$project$Parser$Extra$maybeChomp(
										function (c) {
											return c === ':';
										})),
								$author$project$Parser$Extra$chompOneOrMore(
									function (c) {
										return c === '-';
									})),
							$author$project$Parser$Extra$maybeChomp(
								function (c) {
									return c === ':';
								}))),
					$author$project$Markdown$TableParser$chompSinglelineWhitespace))
			]));
};
var $author$project$Markdown$Block$AlignCenter = 2;
var $author$project$Markdown$Block$AlignLeft = 0;
var $author$project$Markdown$Block$AlignRight = 1;
var $author$project$Markdown$TableParser$delimiterToAlignment = function (cell) {
	var _v0 = _Utils_Tuple2(
		A2($elm$core$String$startsWith, ':', cell),
		A2($elm$core$String$endsWith, ':', cell));
	if (_v0.a) {
		if (_v0.b) {
			return $elm$core$Maybe$Just(2);
		} else {
			return $elm$core$Maybe$Just(0);
		}
	} else {
		if (_v0.b) {
			return $elm$core$Maybe$Just(1);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	}
};
var $author$project$Markdown$TableParser$delimiterRowParser = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (delimiterRow) {
		var trimmed = delimiterRow.a.jo;
		var headers = delimiterRow.b;
		return $elm$core$List$isEmpty(headers) ? $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Expecting('Must have at least one column in delimiter row.')) : ((($elm$core$List$length(headers) === 1) && (!(A2($elm$core$String$startsWith, '|', trimmed) && A2($elm$core$String$endsWith, '|', trimmed)))) ? $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Tables with a single column must have pipes at the start and end of the delimiter row to avoid ambiguity.')) : $elm$parser$Parser$Advanced$succeed(delimiterRow));
	},
	A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (delimiterText, revDelimiterColumns) {
				return A2(
					$author$project$Markdown$Table$TableDelimiterRow,
					{
						h6: delimiterText,
						jo: $elm$core$String$trim(delimiterText)
					},
					A2(
						$elm$core$List$map,
						$author$project$Markdown$TableParser$delimiterToAlignment,
						$elm$core$List$reverse(revDelimiterColumns)));
			}),
		A2($elm$parser$Parser$Advanced$loop, _List_Nil, $author$project$Markdown$TableParser$delimiterRowHelp)));
var $author$project$Markdown$Parser$tableDelimiterInOpenParagraph = A2($elm$parser$Parser$Advanced$map, $author$project$Markdown$RawBlock$TableDelimiter, $author$project$Markdown$TableParser$delimiterRowParser);
var $author$project$Markdown$TableParser$standardizeRowLength = F2(
	function (expectedLength, row) {
		var rowLength = $elm$core$List$length(row);
		var _v0 = A2($elm$core$Basics$compare, expectedLength, rowLength);
		switch (_v0) {
			case 0:
				return A2($elm$core$List$take, expectedLength, row);
			case 1:
				return row;
			default:
				return _Utils_ap(
					row,
					A2($elm$core$List$repeat, expectedLength - rowLength, ''));
		}
	});
var $author$project$Markdown$TableParser$bodyRowParser = function (expectedRowLength) {
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		function (row) {
			return ($elm$core$List$isEmpty(row) || A2($elm$core$List$all, $elm$core$String$isEmpty, row)) ? $elm$parser$Parser$Advanced$problem(
				$elm$parser$Parser$Problem('A line must have at least one column')) : $elm$parser$Parser$Advanced$succeed(
				A2($author$project$Markdown$TableParser$standardizeRowLength, expectedRowLength, row));
		},
		$author$project$Markdown$TableParser$rowParser);
};
var $author$project$Markdown$Parser$tableRowIfTableStarted = function (_v0) {
	var headers = _v0.a;
	var body = _v0.b;
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (row) {
			return $author$project$Markdown$RawBlock$Table(
				A2(
					$author$project$Markdown$Table$Table,
					headers,
					_Utils_ap(
						body,
						_List_fromArray(
							[row]))));
		},
		$author$project$Markdown$TableParser$bodyRowParser(
			$elm$core$List$length(headers)));
};
var $author$project$Markdown$Block$H1 = 0;
var $author$project$Markdown$Block$H2 = 1;
var $author$project$Markdown$Block$H3 = 2;
var $author$project$Markdown$Block$H4 = 3;
var $author$project$Markdown$Block$H5 = 4;
var $author$project$Markdown$Block$H6 = 5;
var $author$project$Markdown$Parser$toHeading = function (level) {
	switch (level) {
		case 1:
			return $elm$core$Result$Ok(0);
		case 2:
			return $elm$core$Result$Ok(1);
		case 3:
			return $elm$core$Result$Ok(2);
		case 4:
			return $elm$core$Result$Ok(3);
		case 5:
			return $elm$core$Result$Ok(4);
		case 6:
			return $elm$core$Result$Ok(5);
		default:
			return $elm$core$Result$Err(
				$elm$parser$Parser$Expecting(
					'A heading with 1 to 6 #\'s, but found ' + $elm$core$String$fromInt(level)));
	}
};
var $author$project$Markdown$ListItem$EmptyItem = {$: 2};
var $author$project$Markdown$ListItem$PlainItem = function (a) {
	return {$: 1, a: a};
};
var $author$project$Markdown$ListItem$TaskItem = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$Markdown$UnorderedList$getIntendedCodeItem = F4(
	function (markerStartPos, listMarker, markerEndPos, _v0) {
		var bodyStartPos = _v0.a;
		var item = _v0.b;
		var spaceNum = bodyStartPos - markerEndPos;
		if (spaceNum <= 4) {
			return _Utils_Tuple3(listMarker, bodyStartPos - markerStartPos, item);
		} else {
			var intendedCodeItem = function () {
				switch (item.$) {
					case 0:
						var completion = item.a;
						var string = item.b;
						return A2(
							$author$project$Markdown$ListItem$TaskItem,
							completion,
							_Utils_ap(
								A2($elm$core$String$repeat, spaceNum - 1, ' '),
								string));
					case 1:
						var string = item.a;
						return $author$project$Markdown$ListItem$PlainItem(
							_Utils_ap(
								A2($elm$core$String$repeat, spaceNum - 1, ' '),
								string));
					default:
						return $author$project$Markdown$ListItem$EmptyItem;
				}
			}();
			return _Utils_Tuple3(listMarker, (markerEndPos - markerStartPos) + 1, intendedCodeItem);
		}
	});
var $author$project$Markdown$UnorderedList$unorderedListEmptyItemParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$succeed(
		function (bodyStartPos) {
			return _Utils_Tuple2(bodyStartPos, $author$project$Markdown$ListItem$EmptyItem);
		}),
	A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getCol, $author$project$Helpers$lineEndOrEnd));
var $author$project$Markdown$ListItem$Complete = 1;
var $author$project$Markdown$ListItem$Incomplete = 0;
var $author$project$Markdown$ListItem$taskItemParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(1),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[x] ',
					$elm$parser$Parser$ExpectingSymbol('[x] ')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(1),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[X] ',
					$elm$parser$Parser$ExpectingSymbol('[X] ')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(0),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[ ] ',
					$elm$parser$Parser$ExpectingSymbol('[ ] '))))
		]));
var $author$project$Markdown$ListItem$parser = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($author$project$Markdown$ListItem$TaskItem),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$author$project$Markdown$ListItem$taskItemParser,
					$elm$parser$Parser$Advanced$chompWhile($author$project$Whitespace$isSpaceOrTab))),
				$elm$parser$Parser$Advanced$succeed($author$project$Markdown$ListItem$PlainItem)
			])),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($author$project$Helpers$chompUntilLineEndOrEnd),
		$author$project$Helpers$lineEndOrEnd));
var $author$project$Markdown$UnorderedList$unorderedListItemBodyParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (bodyStartPos, item) {
						return _Utils_Tuple2(bodyStartPos, item);
					})),
			$author$project$Parser$Extra$chompOneOrMore($author$project$Whitespace$isSpaceOrTab)),
		$elm$parser$Parser$Advanced$getCol),
	$author$project$Markdown$ListItem$parser);
var $author$project$Markdown$UnorderedList$Asterisk = 2;
var $author$project$Markdown$UnorderedList$Minus = 0;
var $author$project$Markdown$UnorderedList$Plus = 1;
var $author$project$Markdown$UnorderedList$unorderedListMarkerParser = $elm$parser$Parser$Advanced$oneOf(
	A2(
		$elm$core$List$map,
		function (_v0) {
			var tag = _v0.a;
			var token = _v0.b;
			return $elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(tag),
						A2($author$project$Parser$Extra$upTo, 3, $author$project$Whitespace$space)),
					$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							token,
							$elm$parser$Parser$ExpectingSymbol(token)))));
		},
		_List_fromArray(
			[
				_Utils_Tuple2(0, '-'),
				_Utils_Tuple2(1, '+'),
				_Utils_Tuple2(2, '*')
			])));
var $author$project$Markdown$UnorderedList$parser = function (previousWasBody) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed($author$project$Markdown$UnorderedList$getIntendedCodeItem),
					$elm$parser$Parser$Advanced$getCol),
				$elm$parser$Parser$Advanced$backtrackable($author$project$Markdown$UnorderedList$unorderedListMarkerParser)),
			$elm$parser$Parser$Advanced$getCol),
		previousWasBody ? $author$project$Markdown$UnorderedList$unorderedListItemBodyParser : $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[$author$project$Markdown$UnorderedList$unorderedListEmptyItemParser, $author$project$Markdown$UnorderedList$unorderedListItemBodyParser])));
};
var $author$project$Markdown$Parser$unorderedListBlock = function (previousWasBody) {
	var parseListItem = F3(
		function (listmarker, intended, unparsedListItem) {
			switch (unparsedListItem.$) {
				case 0:
					var completion = unparsedListItem.a;
					var body = unparsedListItem.b;
					return {
						ff: body,
						lL: listmarker,
						jc: $elm$core$Maybe$Just(
							function () {
								if (completion === 1) {
									return true;
								} else {
									return false;
								}
							}())
					};
				case 1:
					var body = unparsedListItem.a;
					return {ff: body, lL: listmarker, jc: $elm$core$Maybe$Nothing};
				default:
					return {ff: '', lL: listmarker, jc: $elm$core$Maybe$Nothing};
			}
		});
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (_v0) {
			var listmarker = _v0.a;
			var intended = _v0.b;
			var unparsedListItem = _v0.c;
			return A4(
				$author$project$Markdown$RawBlock$UnorderedListBlock,
				true,
				intended,
				_List_Nil,
				A3(parseListItem, listmarker, intended, unparsedListItem));
		},
		$author$project$Markdown$UnorderedList$parser(previousWasBody));
};
var $author$project$Markdown$Parser$childToBlocks = F2(
	function (node, blocks) {
		switch (node.$) {
			case 0:
				var tag = node.a;
				var attributes = node.b;
				var children = node.c;
				var _v99 = $author$project$Markdown$Parser$nodesToBlocks(children);
				if (!_v99.$) {
					var childrenAsBlocks = _v99.a;
					var block = $author$project$Markdown$Block$HtmlBlock(
						A3($author$project$Markdown$Block$HtmlElement, tag, attributes, childrenAsBlocks));
					return $elm$core$Result$Ok(
						A2($elm$core$List$cons, block, blocks));
				} else {
					var err = _v99.a;
					return $elm$core$Result$Err(err);
				}
			case 1:
				var innerText = node.a;
				var _v100 = $author$project$Markdown$Parser$parse(innerText);
				if (!_v100.$) {
					var value = _v100.a;
					return $elm$core$Result$Ok(
						_Utils_ap(
							$elm$core$List$reverse(value),
							blocks));
				} else {
					var error = _v100.a;
					return $elm$core$Result$Err(
						$elm$parser$Parser$Expecting(
							A2(
								$elm$core$String$join,
								'\n',
								A2($elm$core$List$map, $author$project$Markdown$Parser$deadEndToString, error))));
				}
			case 2:
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$author$project$Markdown$Block$HtmlBlock(
							$author$project$Markdown$Block$HtmlComment(string)),
						blocks));
			case 3:
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$author$project$Markdown$Block$HtmlBlock(
							$author$project$Markdown$Block$Cdata(string)),
						blocks));
			case 4:
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$author$project$Markdown$Block$HtmlBlock(
							$author$project$Markdown$Block$ProcessingInstruction(string)),
						blocks));
			default:
				var declarationType = node.a;
				var content = node.b;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$author$project$Markdown$Block$HtmlBlock(
							A2($author$project$Markdown$Block$HtmlDeclaration, declarationType, content)),
						blocks));
		}
	});
var $author$project$Markdown$Parser$completeBlocks = function (state) {
	var _v84 = state.g;
	_v84$5:
	while (true) {
		if (_v84.b) {
			switch (_v84.a.$) {
				case 11:
					var body2 = _v84.a.a;
					var rest = _v84.b;
					var _v85 = A2(
						$elm$parser$Parser$Advanced$run,
						$author$project$Markdown$Parser$cyclic$rawBlockParser(),
						body2);
					if (!_v85.$) {
						var value = _v85.a;
						return $elm$parser$Parser$Advanced$succeed(
							{
								f: _Utils_ap(state.f, value.f),
								g: A2(
									$elm$core$List$cons,
									$author$project$Markdown$RawBlock$ParsedBlockQuote(value.g),
									rest)
							});
					} else {
						var error = _v85.a;
						return $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Problem(
								$author$project$Markdown$Parser$deadEndsToString(error)));
					}
				case 3:
					var _v86 = _v84.a;
					var tight = _v86.a;
					var intended = _v86.b;
					var closeListItems = _v86.c;
					var openListItem = _v86.d;
					var rest = _v84.b;
					var _v87 = A2(
						$elm$parser$Parser$Advanced$run,
						$author$project$Markdown$Parser$cyclic$rawBlockParser(),
						openListItem.ff);
					if (!_v87.$) {
						var value = _v87.a;
						var tight2 = A2($elm$core$List$member, $author$project$Markdown$RawBlock$BlankLine, value.g) ? false : tight;
						return $elm$parser$Parser$Advanced$succeed(
							{
								f: _Utils_ap(state.f, value.f),
								g: A2(
									$elm$core$List$cons,
									A4(
										$author$project$Markdown$RawBlock$UnorderedListBlock,
										tight2,
										intended,
										A2(
											$elm$core$List$cons,
											{ff: value.g, jc: openListItem.jc},
											closeListItems),
										openListItem),
									rest)
							});
					} else {
						var e = _v87.a;
						return $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Problem(
								$author$project$Markdown$Parser$deadEndsToString(e)));
					}
				case 4:
					var _v92 = _v84.a;
					var tight = _v92.a;
					var intended = _v92.b;
					var marker = _v92.c;
					var order = _v92.d;
					var closeListItems = _v92.e;
					var openListItem = _v92.f;
					var rest = _v84.b;
					var _v93 = A2(
						$elm$parser$Parser$Advanced$run,
						$author$project$Markdown$Parser$cyclic$rawBlockParser(),
						openListItem);
					if (!_v93.$) {
						var value = _v93.a;
						var tight2 = A2($elm$core$List$member, $author$project$Markdown$RawBlock$BlankLine, value.g) ? false : tight;
						return $elm$parser$Parser$Advanced$succeed(
							{
								f: _Utils_ap(state.f, value.f),
								g: A2(
									$elm$core$List$cons,
									A6(
										$author$project$Markdown$RawBlock$OrderedListBlock,
										tight2,
										intended,
										marker,
										order,
										A2($elm$core$List$cons, value.g, closeListItems),
										openListItem),
									rest)
							});
					} else {
						var e = _v93.a;
						return $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Problem(
								$author$project$Markdown$Parser$deadEndsToString(e)));
					}
				case 10:
					if (_v84.b.b) {
						switch (_v84.b.a.$) {
							case 3:
								var _v88 = _v84.a;
								var _v89 = _v84.b;
								var _v90 = _v89.a;
								var tight = _v90.a;
								var intended = _v90.b;
								var closeListItems = _v90.c;
								var openListItem = _v90.d;
								var rest = _v89.b;
								var _v91 = A2(
									$elm$parser$Parser$Advanced$run,
									$author$project$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem.ff);
								if (!_v91.$) {
									var value = _v91.a;
									var tight2 = A2($elm$core$List$member, $author$project$Markdown$RawBlock$BlankLine, value.g) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											f: _Utils_ap(state.f, value.f),
											g: A2(
												$elm$core$List$cons,
												A4(
													$author$project$Markdown$RawBlock$UnorderedListBlock,
													tight2,
													intended,
													A2(
														$elm$core$List$cons,
														{ff: value.g, jc: openListItem.jc},
														closeListItems),
													openListItem),
												rest)
										});
								} else {
									var e = _v91.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$author$project$Markdown$Parser$deadEndsToString(e)));
								}
							case 4:
								var _v94 = _v84.a;
								var _v95 = _v84.b;
								var _v96 = _v95.a;
								var tight = _v96.a;
								var intended = _v96.b;
								var marker = _v96.c;
								var order = _v96.d;
								var closeListItems = _v96.e;
								var openListItem = _v96.f;
								var rest = _v95.b;
								var _v97 = A2(
									$elm$parser$Parser$Advanced$run,
									$author$project$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem);
								if (!_v97.$) {
									var value = _v97.a;
									var tight2 = A2($elm$core$List$member, $author$project$Markdown$RawBlock$BlankLine, value.g) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											f: _Utils_ap(state.f, value.f),
											g: A2(
												$elm$core$List$cons,
												A6(
													$author$project$Markdown$RawBlock$OrderedListBlock,
													tight2,
													intended,
													marker,
													order,
													A2($elm$core$List$cons, value.g, closeListItems),
													openListItem),
												rest)
										});
								} else {
									var e = _v97.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$author$project$Markdown$Parser$deadEndsToString(e)));
								}
							default:
								break _v84$5;
						}
					} else {
						break _v84$5;
					}
				default:
					break _v84$5;
			}
		} else {
			break _v84$5;
		}
	}
	return $elm$parser$Parser$Advanced$succeed(state);
};
var $author$project$Markdown$Parser$completeOrMergeBlocks = F2(
	function (state, newRawBlock) {
		var _v41 = _Utils_Tuple2(newRawBlock, state.g);
		_v41$13:
		while (true) {
			if (_v41.b.b) {
				switch (_v41.b.a.$) {
					case 5:
						if (_v41.a.$ === 5) {
							var block1 = _v41.a.a;
							var _v42 = _v41.b;
							var block2 = _v42.a.a;
							var rest = _v42.b;
							return $elm$parser$Parser$Advanced$succeed(
								{
									f: state.f,
									g: A2(
										$elm$core$List$cons,
										$author$project$Markdown$RawBlock$CodeBlock(
											{
												ff: A2($author$project$Markdown$Parser$joinStringsPreserveAll, block2.ff, block1.ff),
												g$: $elm$core$Maybe$Nothing
											}),
										rest)
								});
						} else {
							break _v41$13;
						}
					case 6:
						switch (_v41.a.$) {
							case 6:
								var block1 = _v41.a.a;
								var _v43 = _v41.b;
								var block2 = _v43.a.a;
								var rest = _v43.b;
								return $elm$parser$Parser$Advanced$succeed(
									{
										f: state.f,
										g: A2(
											$elm$core$List$cons,
											$author$project$Markdown$RawBlock$IndentedCodeBlock(
												A2($author$project$Markdown$Parser$joinStringsPreserveAll, block2, block1)),
											rest)
									});
							case 10:
								var _v44 = _v41.a;
								var _v45 = _v41.b;
								var block = _v45.a.a;
								var rest = _v45.b;
								return $elm$parser$Parser$Advanced$succeed(
									{
										f: state.f,
										g: A2(
											$elm$core$List$cons,
											$author$project$Markdown$RawBlock$IndentedCodeBlock(
												A2($author$project$Markdown$Parser$joinStringsPreserveAll, block, '\n')),
											rest)
									});
							default:
								break _v41$13;
						}
					case 11:
						var _v46 = _v41.b;
						var body2 = _v46.a.a;
						var rest = _v46.b;
						switch (newRawBlock.$) {
							case 11:
								var body1 = newRawBlock.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										f: state.f,
										g: A2(
											$elm$core$List$cons,
											$author$project$Markdown$RawBlock$BlockQuote(
												A2($author$project$Markdown$Parser$joinStringsPreserveAll, body2, body1)),
											rest)
									});
							case 1:
								var body1 = newRawBlock.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										f: state.f,
										g: A2(
											$elm$core$List$cons,
											$author$project$Markdown$RawBlock$BlockQuote(
												A3($author$project$Markdown$Parser$joinRawStringsWith, '\n', body2, body1)),
											rest)
									});
							default:
								var _v48 = A2(
									$elm$parser$Parser$Advanced$run,
									$author$project$Markdown$Parser$cyclic$rawBlockParser(),
									body2);
								if (!_v48.$) {
									var value = _v48.a;
									return $elm$parser$Parser$Advanced$succeed(
										{
											f: _Utils_ap(state.f, value.f),
											g: A2(
												$elm$core$List$cons,
												newRawBlock,
												A2(
													$elm$core$List$cons,
													$author$project$Markdown$RawBlock$ParsedBlockQuote(value.g),
													rest))
										});
								} else {
									var e = _v48.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$author$project$Markdown$Parser$deadEndsToString(e)));
								}
						}
					case 3:
						var _v49 = _v41.b;
						var _v50 = _v49.a;
						var tight = _v50.a;
						var intended1 = _v50.b;
						var closeListItems2 = _v50.c;
						var openListItem2 = _v50.d;
						var rest = _v49.b;
						switch (newRawBlock.$) {
							case 3:
								var intended2 = newRawBlock.b;
								var closeListItems1 = newRawBlock.c;
								var openListItem1 = newRawBlock.d;
								if (_Utils_eq(openListItem2.lL, openListItem1.lL)) {
									var _v52 = A2(
										$elm$parser$Parser$Advanced$run,
										$author$project$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2.ff);
									if (!_v52.$) {
										var value = _v52.a;
										return A2($elm$core$List$member, $author$project$Markdown$RawBlock$BlankLine, value.g) ? $elm$parser$Parser$Advanced$succeed(
											{
												f: _Utils_ap(state.f, value.f),
												g: A2(
													$elm$core$List$cons,
													A4(
														$author$project$Markdown$RawBlock$UnorderedListBlock,
														false,
														intended2,
														A2(
															$elm$core$List$cons,
															{ff: value.g, jc: openListItem2.jc},
															closeListItems2),
														openListItem1),
													rest)
											}) : $elm$parser$Parser$Advanced$succeed(
											{
												f: _Utils_ap(state.f, value.f),
												g: A2(
													$elm$core$List$cons,
													A4(
														$author$project$Markdown$RawBlock$UnorderedListBlock,
														tight,
														intended2,
														A2(
															$elm$core$List$cons,
															{ff: value.g, jc: openListItem2.jc},
															closeListItems2),
														openListItem1),
													rest)
											});
									} else {
										var e = _v52.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$author$project$Markdown$Parser$deadEndsToString(e)));
									}
								} else {
									var _v53 = A2(
										$elm$parser$Parser$Advanced$run,
										$author$project$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2.ff);
									if (!_v53.$) {
										var value = _v53.a;
										var tight2 = A2($elm$core$List$member, $author$project$Markdown$RawBlock$BlankLine, value.g) ? false : tight;
										return $elm$parser$Parser$Advanced$succeed(
											{
												f: _Utils_ap(state.f, value.f),
												g: A2(
													$elm$core$List$cons,
													newRawBlock,
													A2(
														$elm$core$List$cons,
														A4(
															$author$project$Markdown$RawBlock$UnorderedListBlock,
															tight2,
															intended1,
															A2(
																$elm$core$List$cons,
																{ff: value.g, jc: openListItem2.jc},
																closeListItems2),
															openListItem1),
														rest))
											});
									} else {
										var e = _v53.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$author$project$Markdown$Parser$deadEndsToString(e)));
									}
								}
							case 1:
								var body1 = newRawBlock.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										f: state.f,
										g: A2(
											$elm$core$List$cons,
											A4(
												$author$project$Markdown$RawBlock$UnorderedListBlock,
												tight,
												intended1,
												closeListItems2,
												_Utils_update(
													openListItem2,
													{
														ff: A3($author$project$Markdown$Parser$joinRawStringsWith, '\n', openListItem2.ff, body1)
													})),
											rest)
									});
							default:
								var _v54 = A2(
									$elm$parser$Parser$Advanced$run,
									$author$project$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem2.ff);
								if (!_v54.$) {
									var value = _v54.a;
									var tight2 = A2($elm$core$List$member, $author$project$Markdown$RawBlock$BlankLine, value.g) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											f: _Utils_ap(state.f, value.f),
											g: A2(
												$elm$core$List$cons,
												newRawBlock,
												A2(
													$elm$core$List$cons,
													A4(
														$author$project$Markdown$RawBlock$UnorderedListBlock,
														tight2,
														intended1,
														A2(
															$elm$core$List$cons,
															{ff: value.g, jc: openListItem2.jc},
															closeListItems2),
														openListItem2),
													rest))
										});
								} else {
									var e = _v54.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$author$project$Markdown$Parser$deadEndsToString(e)));
								}
						}
					case 4:
						var _v55 = _v41.b;
						var _v56 = _v55.a;
						var tight = _v56.a;
						var intended1 = _v56.b;
						var marker = _v56.c;
						var order = _v56.d;
						var closeListItems2 = _v56.e;
						var openListItem2 = _v56.f;
						var rest = _v55.b;
						switch (newRawBlock.$) {
							case 4:
								var intended2 = newRawBlock.b;
								var marker2 = newRawBlock.c;
								var closeListItems1 = newRawBlock.e;
								var openListItem1 = newRawBlock.f;
								if (_Utils_eq(marker, marker2)) {
									var _v58 = A2(
										$elm$parser$Parser$Advanced$run,
										$author$project$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2);
									if (!_v58.$) {
										var value = _v58.a;
										var tight2 = A2($elm$core$List$member, $author$project$Markdown$RawBlock$BlankLine, value.g) ? false : tight;
										return $elm$parser$Parser$Advanced$succeed(
											{
												f: _Utils_ap(state.f, value.f),
												g: A2(
													$elm$core$List$cons,
													A6(
														$author$project$Markdown$RawBlock$OrderedListBlock,
														tight2,
														intended2,
														marker,
														order,
														A2($elm$core$List$cons, value.g, closeListItems2),
														openListItem1),
													rest)
											});
									} else {
										var e = _v58.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$author$project$Markdown$Parser$deadEndsToString(e)));
									}
								} else {
									var _v59 = A2(
										$elm$parser$Parser$Advanced$run,
										$author$project$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2);
									if (!_v59.$) {
										var value = _v59.a;
										var tight2 = A2($elm$core$List$member, $author$project$Markdown$RawBlock$BlankLine, value.g) ? false : tight;
										return $elm$parser$Parser$Advanced$succeed(
											{
												f: _Utils_ap(state.f, value.f),
												g: A2(
													$elm$core$List$cons,
													newRawBlock,
													A2(
														$elm$core$List$cons,
														A6(
															$author$project$Markdown$RawBlock$OrderedListBlock,
															tight2,
															intended1,
															marker,
															order,
															A2($elm$core$List$cons, value.g, closeListItems2),
															openListItem2),
														rest))
											});
									} else {
										var e = _v59.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$author$project$Markdown$Parser$deadEndsToString(e)));
									}
								}
							case 1:
								var body1 = newRawBlock.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										f: state.f,
										g: A2(
											$elm$core$List$cons,
											A6($author$project$Markdown$RawBlock$OrderedListBlock, tight, intended1, marker, order, closeListItems2, openListItem2 + ('\n' + body1)),
											rest)
									});
							default:
								var _v60 = A2(
									$elm$parser$Parser$Advanced$run,
									$author$project$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem2);
								if (!_v60.$) {
									var value = _v60.a;
									var tight2 = A2($elm$core$List$member, $author$project$Markdown$RawBlock$BlankLine, value.g) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											f: _Utils_ap(state.f, value.f),
											g: A2(
												$elm$core$List$cons,
												newRawBlock,
												A2(
													$elm$core$List$cons,
													A6(
														$author$project$Markdown$RawBlock$OrderedListBlock,
														tight2,
														intended1,
														marker,
														order,
														A2($elm$core$List$cons, value.g, closeListItems2),
														openListItem2),
													rest))
										});
								} else {
									var e = _v60.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$author$project$Markdown$Parser$deadEndsToString(e)));
								}
						}
					case 1:
						switch (_v41.a.$) {
							case 1:
								var body1 = _v41.a.a;
								var _v61 = _v41.b;
								var body2 = _v61.a.a;
								var rest = _v61.b;
								return $elm$parser$Parser$Advanced$succeed(
									{
										f: state.f,
										g: A2(
											$elm$core$List$cons,
											$author$project$Markdown$RawBlock$OpenBlockOrParagraph(
												A3($author$project$Markdown$Parser$joinRawStringsWith, '\n', body2, body1)),
											rest)
									});
							case 13:
								if (!_v41.a.a) {
									var _v62 = _v41.a;
									var _v63 = _v62.a;
									var _v64 = _v41.b;
									var unparsedInlines = _v64.a.a;
									var rest = _v64.b;
									return $elm$parser$Parser$Advanced$succeed(
										{
											f: state.f,
											g: A2(
												$elm$core$List$cons,
												A2($author$project$Markdown$RawBlock$Heading, 1, unparsedInlines),
												rest)
										});
								} else {
									var _v65 = _v41.a;
									var _v66 = _v65.a;
									var _v67 = _v41.b;
									var unparsedInlines = _v67.a.a;
									var rest = _v67.b;
									return $elm$parser$Parser$Advanced$succeed(
										{
											f: state.f,
											g: A2(
												$elm$core$List$cons,
												A2($author$project$Markdown$RawBlock$Heading, 2, unparsedInlines),
												rest)
										});
								}
							case 9:
								var _v68 = _v41.a.a;
								var text = _v68.a;
								var alignments = _v68.b;
								var _v69 = _v41.b;
								var rawHeaders = _v69.a.a;
								var rest = _v69.b;
								var _v70 = A2(
									$author$project$Markdown$TableParser$parseHeader,
									A2($author$project$Markdown$Table$TableDelimiterRow, text, alignments),
									rawHeaders);
								if (!_v70.$) {
									var headers = _v70.a;
									return $elm$parser$Parser$Advanced$succeed(
										{
											f: state.f,
											g: A2(
												$elm$core$List$cons,
												$author$project$Markdown$RawBlock$Table(
													A2($author$project$Markdown$Table$Table, headers, _List_Nil)),
												rest)
										});
								} else {
									return $elm$parser$Parser$Advanced$succeed(
										{
											f: state.f,
											g: A2(
												$elm$core$List$cons,
												$author$project$Markdown$RawBlock$OpenBlockOrParagraph(
													A3($author$project$Markdown$Parser$joinRawStringsWith, '\n', rawHeaders, text.h6)),
												rest)
										});
								}
							default:
								break _v41$13;
						}
					case 8:
						if (_v41.a.$ === 8) {
							var updatedTable = _v41.a.a;
							var _v71 = _v41.b;
							var rest = _v71.b;
							return $elm$parser$Parser$Advanced$succeed(
								{
									f: state.f,
									g: A2(
										$elm$core$List$cons,
										$author$project$Markdown$RawBlock$Table(updatedTable),
										rest)
								});
						} else {
							break _v41$13;
						}
					case 10:
						if (_v41.b.b.b) {
							switch (_v41.b.b.a.$) {
								case 4:
									var _v72 = _v41.b;
									var _v73 = _v72.a;
									var _v74 = _v72.b;
									var _v75 = _v74.a;
									var tight = _v75.a;
									var intended1 = _v75.b;
									var marker = _v75.c;
									var order = _v75.d;
									var closeListItems2 = _v75.e;
									var openListItem2 = _v75.f;
									var rest = _v74.b;
									var _v76 = A2(
										$elm$parser$Parser$Advanced$run,
										$author$project$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2);
									if (!_v76.$) {
										var value = _v76.a;
										if (newRawBlock.$ === 4) {
											var intended2 = newRawBlock.b;
											var openListItem = newRawBlock.f;
											return $elm$parser$Parser$Advanced$succeed(
												{
													f: _Utils_ap(state.f, value.f),
													g: A2(
														$elm$core$List$cons,
														A6(
															$author$project$Markdown$RawBlock$OrderedListBlock,
															false,
															intended2,
															marker,
															order,
															A2($elm$core$List$cons, value.g, closeListItems2),
															openListItem),
														rest)
												});
										} else {
											return $elm$parser$Parser$Advanced$succeed(
												{
													f: _Utils_ap(state.f, value.f),
													g: A2(
														$elm$core$List$cons,
														newRawBlock,
														A2(
															$elm$core$List$cons,
															$author$project$Markdown$RawBlock$BlankLine,
															A2(
																$elm$core$List$cons,
																A6(
																	$author$project$Markdown$RawBlock$OrderedListBlock,
																	tight,
																	intended1,
																	marker,
																	order,
																	A2($elm$core$List$cons, value.g, closeListItems2),
																	openListItem2),
																rest)))
												});
										}
									} else {
										var e = _v76.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$author$project$Markdown$Parser$deadEndsToString(e)));
									}
								case 3:
									var _v78 = _v41.b;
									var _v79 = _v78.a;
									var _v80 = _v78.b;
									var _v81 = _v80.a;
									var tight = _v81.a;
									var intended1 = _v81.b;
									var closeListItems2 = _v81.c;
									var openListItem2 = _v81.d;
									var rest = _v80.b;
									var _v82 = A2(
										$elm$parser$Parser$Advanced$run,
										$author$project$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2.ff);
									if (!_v82.$) {
										var value = _v82.a;
										if (newRawBlock.$ === 3) {
											var openListItem = newRawBlock.d;
											return $elm$parser$Parser$Advanced$succeed(
												{
													f: _Utils_ap(state.f, value.f),
													g: A2(
														$elm$core$List$cons,
														A4(
															$author$project$Markdown$RawBlock$UnorderedListBlock,
															false,
															intended1,
															A2(
																$elm$core$List$cons,
																{ff: value.g, jc: openListItem2.jc},
																closeListItems2),
															openListItem),
														rest)
												});
										} else {
											return $elm$parser$Parser$Advanced$succeed(
												{
													f: _Utils_ap(state.f, value.f),
													g: A2(
														$elm$core$List$cons,
														newRawBlock,
														A2(
															$elm$core$List$cons,
															$author$project$Markdown$RawBlock$BlankLine,
															A2(
																$elm$core$List$cons,
																A4(
																	$author$project$Markdown$RawBlock$UnorderedListBlock,
																	tight,
																	intended1,
																	A2(
																		$elm$core$List$cons,
																		{ff: value.g, jc: openListItem2.jc},
																		closeListItems2),
																	openListItem2),
																rest)))
												});
										}
									} else {
										var e = _v82.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$author$project$Markdown$Parser$deadEndsToString(e)));
									}
								default:
									break _v41$13;
							}
						} else {
							break _v41$13;
						}
					default:
						break _v41$13;
				}
			} else {
				break _v41$13;
			}
		}
		return $elm$parser$Parser$Advanced$succeed(
			{
				f: state.f,
				g: A2($elm$core$List$cons, newRawBlock, state.g)
			});
	});
var $author$project$Markdown$Parser$inlineParseHelper = F2(
	function (referencesDict, _v36) {
		var unparsedInlines = _v36;
		var mappedReferencesDict = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$mapSecond(
					function (_v37) {
						var destination = _v37.kO;
						var title = _v37.jg;
						return _Utils_Tuple2(destination, title);
					}),
				referencesDict));
		return A2(
			$elm$core$List$map,
			$author$project$Markdown$Parser$mapInline,
			A2($author$project$Markdown$InlineParser$parse, mappedReferencesDict, unparsedInlines));
	});
var $author$project$Markdown$Parser$mapInline = function (inline) {
	switch (inline.$) {
		case 0:
			var string = inline.a;
			return $author$project$Markdown$Block$Text(string);
		case 1:
			return $author$project$Markdown$Block$HardLineBreak;
		case 2:
			var string = inline.a;
			return $author$project$Markdown$Block$CodeSpan(string);
		case 3:
			var string = inline.a;
			var maybeString = inline.b;
			var inlines = inline.c;
			return A3(
				$author$project$Markdown$Block$Link,
				string,
				maybeString,
				A2($elm$core$List$map, $author$project$Markdown$Parser$mapInline, inlines));
		case 4:
			var string = inline.a;
			var maybeString = inline.b;
			var inlines = inline.c;
			return A3(
				$author$project$Markdown$Block$Image,
				string,
				maybeString,
				A2($elm$core$List$map, $author$project$Markdown$Parser$mapInline, inlines));
		case 5:
			var node = inline.a;
			return $author$project$Markdown$Block$HtmlInline(
				$author$project$Markdown$Parser$nodeToRawBlock(node));
		case 6:
			var level = inline.a;
			var inlines = inline.b;
			switch (level) {
				case 1:
					return $author$project$Markdown$Block$Emphasis(
						A2($elm$core$List$map, $author$project$Markdown$Parser$mapInline, inlines));
				case 2:
					return $author$project$Markdown$Block$Strong(
						A2($elm$core$List$map, $author$project$Markdown$Parser$mapInline, inlines));
				default:
					return $author$project$Markdown$Helpers$isEven(level) ? $author$project$Markdown$Block$Strong(
						_List_fromArray(
							[
								$author$project$Markdown$Parser$mapInline(
								A2($author$project$Markdown$Inline$Emphasis, level - 2, inlines))
							])) : $author$project$Markdown$Block$Emphasis(
						_List_fromArray(
							[
								$author$project$Markdown$Parser$mapInline(
								A2($author$project$Markdown$Inline$Emphasis, level - 1, inlines))
							]));
			}
		default:
			var inlines = inline.a;
			return $author$project$Markdown$Block$Strikethrough(
				A2($elm$core$List$map, $author$project$Markdown$Parser$mapInline, inlines));
	}
};
var $author$project$Markdown$Parser$nodeToRawBlock = function (node) {
	switch (node.$) {
		case 1:
			var innerText = node.a;
			return $author$project$Markdown$Block$HtmlComment('TODO this never happens, but use types to drop this case.');
		case 0:
			var tag = node.a;
			var attributes = node.b;
			var children = node.c;
			var parseChild = function (child) {
				if (child.$ === 1) {
					var text = child.a;
					return $author$project$Markdown$Parser$textNodeToBlocks(text);
				} else {
					return _List_fromArray(
						[
							$author$project$Markdown$Block$HtmlBlock(
							$author$project$Markdown$Parser$nodeToRawBlock(child))
						]);
				}
			};
			return A3(
				$author$project$Markdown$Block$HtmlElement,
				tag,
				attributes,
				A2($elm$core$List$concatMap, parseChild, children));
		case 2:
			var string = node.a;
			return $author$project$Markdown$Block$HtmlComment(string);
		case 3:
			var string = node.a;
			return $author$project$Markdown$Block$Cdata(string);
		case 4:
			var string = node.a;
			return $author$project$Markdown$Block$ProcessingInstruction(string);
		default:
			var declarationType = node.a;
			var content = node.b;
			return A2($author$project$Markdown$Block$HtmlDeclaration, declarationType, content);
	}
};
var $author$project$Markdown$Parser$nodesToBlocks = function (children) {
	return A2($author$project$Markdown$Parser$nodesToBlocksHelp, children, _List_Nil);
};
var $author$project$Markdown$Parser$nodesToBlocksHelp = F2(
	function (remaining, soFar) {
		nodesToBlocksHelp:
		while (true) {
			if (remaining.b) {
				var node = remaining.a;
				var rest = remaining.b;
				var _v31 = A2($author$project$Markdown$Parser$childToBlocks, node, soFar);
				if (!_v31.$) {
					var newSoFar = _v31.a;
					var $temp$remaining = rest,
						$temp$soFar = newSoFar;
					remaining = $temp$remaining;
					soFar = $temp$soFar;
					continue nodesToBlocksHelp;
				} else {
					var e = _v31.a;
					return $elm$core$Result$Err(e);
				}
			} else {
				return $elm$core$Result$Ok(
					$elm$core$List$reverse(soFar));
			}
		}
	});
var $author$project$Markdown$Parser$parse = function (input) {
	var _v27 = A2(
		$elm$parser$Parser$Advanced$run,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$author$project$Markdown$Parser$cyclic$rawBlockParser(),
			$author$project$Helpers$endOfFile),
		input);
	if (_v27.$ === 1) {
		var e = _v27.a;
		return $elm$core$Result$Err(e);
	} else {
		var v = _v27.a;
		var _v28 = $author$project$Markdown$Parser$parseAllInlines(v);
		if (_v28.$ === 1) {
			var e = _v28.a;
			return A2(
				$elm$parser$Parser$Advanced$run,
				$elm$parser$Parser$Advanced$problem(e),
				'');
		} else {
			var blocks = _v28.a;
			var isNotEmptyParagraph = function (block) {
				if ((block.$ === 5) && (!block.a.b)) {
					return false;
				} else {
					return true;
				}
			};
			return $elm$core$Result$Ok(
				A2($elm$core$List$filter, isNotEmptyParagraph, blocks));
		}
	}
};
var $author$project$Markdown$Parser$parseAllInlines = function (state) {
	return A3($author$project$Markdown$Parser$parseAllInlinesHelp, state, state.g, _List_Nil);
};
var $author$project$Markdown$Parser$parseAllInlinesHelp = F3(
	function (state, rawBlocks, parsedBlocks) {
		parseAllInlinesHelp:
		while (true) {
			if (rawBlocks.b) {
				var rawBlock = rawBlocks.a;
				var rest = rawBlocks.b;
				var _v26 = A2($author$project$Markdown$Parser$parseInlines, state.f, rawBlock);
				switch (_v26.$) {
					case 1:
						var newParsedBlock = _v26.a;
						var $temp$state = state,
							$temp$rawBlocks = rest,
							$temp$parsedBlocks = A2($elm$core$List$cons, newParsedBlock, parsedBlocks);
						state = $temp$state;
						rawBlocks = $temp$rawBlocks;
						parsedBlocks = $temp$parsedBlocks;
						continue parseAllInlinesHelp;
					case 0:
						var $temp$state = state,
							$temp$rawBlocks = rest,
							$temp$parsedBlocks = parsedBlocks;
						state = $temp$state;
						rawBlocks = $temp$rawBlocks;
						parsedBlocks = $temp$parsedBlocks;
						continue parseAllInlinesHelp;
					default:
						var e = _v26.a;
						return $elm$core$Result$Err(e);
				}
			} else {
				return $elm$core$Result$Ok(parsedBlocks);
			}
		}
	});
var $author$project$Markdown$Parser$parseHeaderInlines = F2(
	function (linkReferences, header) {
		return A2(
			$elm$core$List$map,
			function (_v24) {
				var label = _v24.lA;
				var alignment = _v24.ck;
				return A3(
					$author$project$Markdown$Parser$parseRawInline,
					linkReferences,
					function (parsedHeaderLabel) {
						return {ck: alignment, lA: parsedHeaderLabel};
					},
					label);
			},
			header);
	});
var $author$project$Markdown$Parser$parseInlines = F2(
	function (linkReferences, rawBlock) {
		switch (rawBlock.$) {
			case 0:
				var level = rawBlock.a;
				var unparsedInlines = rawBlock.b;
				var _v17 = $author$project$Markdown$Parser$toHeading(level);
				if (!_v17.$) {
					var parsedLevel = _v17.a;
					return $author$project$Markdown$Parser$ParsedBlock(
						A2(
							$author$project$Markdown$Block$Heading,
							parsedLevel,
							A2($author$project$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines)));
				} else {
					var e = _v17.a;
					return $author$project$Markdown$Parser$InlineProblem(e);
				}
			case 1:
				var unparsedInlines = rawBlock.a;
				return $author$project$Markdown$Parser$ParsedBlock(
					$author$project$Markdown$Block$Paragraph(
						A2($author$project$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines)));
			case 2:
				var html = rawBlock.a;
				return $author$project$Markdown$Parser$ParsedBlock(
					$author$project$Markdown$Block$HtmlBlock(html));
			case 3:
				var tight = rawBlock.a;
				var intended = rawBlock.b;
				var unparsedItems = rawBlock.c;
				var parseItem = F2(
					function (rawBlockTask, rawBlocks) {
						var blocksTask = function () {
							if (!rawBlockTask.$) {
								if (!rawBlockTask.a) {
									return 1;
								} else {
									return 2;
								}
							} else {
								return 0;
							}
						}();
						var blocks = function () {
							var _v18 = $author$project$Markdown$Parser$parseAllInlines(
								{f: linkReferences, g: rawBlocks});
							if (!_v18.$) {
								var parsedBlocks = _v18.a;
								return parsedBlocks;
							} else {
								var e = _v18.a;
								return _List_Nil;
							}
						}();
						return A2($author$project$Markdown$Block$ListItem, blocksTask, blocks);
					});
				return $author$project$Markdown$Parser$ParsedBlock(
					A2(
						$author$project$Markdown$Block$UnorderedList,
						$author$project$Markdown$Parser$isTightBoolToListDisplay(tight),
						$elm$core$List$reverse(
							A2(
								$elm$core$List$map,
								function (item) {
									return A2(parseItem, item.jc, item.ff);
								},
								unparsedItems))));
			case 4:
				var tight = rawBlock.a;
				var startingIndex = rawBlock.d;
				var unparsedItems = rawBlock.e;
				var parseItem = function (rawBlocks) {
					var _v20 = $author$project$Markdown$Parser$parseAllInlines(
						{f: linkReferences, g: rawBlocks});
					if (!_v20.$) {
						var parsedBlocks = _v20.a;
						return parsedBlocks;
					} else {
						var e = _v20.a;
						return _List_Nil;
					}
				};
				return $author$project$Markdown$Parser$ParsedBlock(
					A3(
						$author$project$Markdown$Block$OrderedList,
						$author$project$Markdown$Parser$isTightBoolToListDisplay(tight),
						startingIndex,
						$elm$core$List$reverse(
							A2($elm$core$List$map, parseItem, unparsedItems))));
			case 5:
				var codeBlock = rawBlock.a;
				return $author$project$Markdown$Parser$ParsedBlock(
					$author$project$Markdown$Block$CodeBlock(codeBlock));
			case 7:
				return $author$project$Markdown$Parser$ParsedBlock($author$project$Markdown$Block$ThematicBreak);
			case 10:
				return $author$project$Markdown$Parser$EmptyBlock;
			case 11:
				var rawBlocks = rawBlock.a;
				return $author$project$Markdown$Parser$EmptyBlock;
			case 12:
				var rawBlocks = rawBlock.a;
				var _v21 = $author$project$Markdown$Parser$parseAllInlines(
					{f: linkReferences, g: rawBlocks});
				if (!_v21.$) {
					var parsedBlocks = _v21.a;
					return $author$project$Markdown$Parser$ParsedBlock(
						$author$project$Markdown$Block$BlockQuote(parsedBlocks));
				} else {
					var e = _v21.a;
					return $author$project$Markdown$Parser$InlineProblem(e);
				}
			case 6:
				var codeBlockBody = rawBlock.a;
				return $author$project$Markdown$Parser$ParsedBlock(
					$author$project$Markdown$Block$CodeBlock(
						{ff: codeBlockBody, g$: $elm$core$Maybe$Nothing}));
			case 8:
				var _v22 = rawBlock.a;
				var header = _v22.a;
				var rows = _v22.b;
				return $author$project$Markdown$Parser$ParsedBlock(
					A2(
						$author$project$Markdown$Block$Table,
						A2($author$project$Markdown$Parser$parseHeaderInlines, linkReferences, header),
						A2($author$project$Markdown$Parser$parseRowInlines, linkReferences, rows)));
			case 9:
				var _v23 = rawBlock.a;
				var text = _v23.a;
				return $author$project$Markdown$Parser$ParsedBlock(
					$author$project$Markdown$Block$Paragraph(
						A2($author$project$Markdown$Parser$inlineParseHelper, linkReferences, text.h6)));
			default:
				var raw = rawBlock.b;
				return $author$project$Markdown$Parser$ParsedBlock(
					$author$project$Markdown$Block$Paragraph(
						A2($author$project$Markdown$Parser$inlineParseHelper, linkReferences, raw)));
		}
	});
var $author$project$Markdown$Parser$parseRawInline = F3(
	function (linkReferences, wrap, unparsedInlines) {
		return wrap(
			A2($author$project$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines));
	});
var $author$project$Markdown$Parser$parseRowInlines = F2(
	function (linkReferences, rows) {
		return A2(
			$elm$core$List$map,
			function (row) {
				return A2(
					$elm$core$List$map,
					function (column) {
						return A3($author$project$Markdown$Parser$parseRawInline, linkReferences, $elm$core$Basics$identity, column);
					},
					row);
			},
			rows);
	});
var $author$project$Markdown$Parser$stepRawBlock = function (revStmts) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return $elm$parser$Parser$Advanced$Done(revStmts);
				},
				$author$project$Helpers$endOfFile),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (reference) {
					return $elm$parser$Parser$Advanced$Loop(
						A2($author$project$Markdown$Parser$addReference, revStmts, reference));
				},
				$elm$parser$Parser$Advanced$backtrackable($author$project$Markdown$LinkReferenceDefinition$parser)),
				function () {
				var _v3 = revStmts.g;
				_v3$6:
				while (true) {
					if (_v3.b) {
						switch (_v3.a.$) {
							case 1:
								return A2(
									$elm$parser$Parser$Advanced$map,
									function (block) {
										return $elm$parser$Parser$Advanced$Loop(block);
									},
									A2(
										$elm$parser$Parser$Advanced$andThen,
										$author$project$Markdown$Parser$completeOrMergeBlocks(revStmts),
										$author$project$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser()));
							case 8:
								var table = _v3.a.a;
								return A2(
									$elm$parser$Parser$Advanced$map,
									function (block) {
										return $elm$parser$Parser$Advanced$Loop(block);
									},
									A2(
										$elm$parser$Parser$Advanced$andThen,
										$author$project$Markdown$Parser$completeOrMergeBlocks(revStmts),
										$elm$parser$Parser$Advanced$oneOf(
											_List_fromArray(
												[
													$author$project$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser(),
													$author$project$Markdown$Parser$tableRowIfTableStarted(table)
												]))));
							case 3:
								var _v4 = _v3.a;
								var tight = _v4.a;
								var intended = _v4.b;
								var closeListItems = _v4.c;
								var openListItem = _v4.d;
								var rest = _v3.b;
								var completeOrMergeUnorderedListBlockBlankLine = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												g: A2(
													$elm$core$List$cons,
													$author$project$Markdown$RawBlock$BlankLine,
													A2(
														$elm$core$List$cons,
														A4(
															$author$project$Markdown$RawBlock$UnorderedListBlock,
															tight,
															intended,
															closeListItems,
															_Utils_update(
																openListItem,
																{
																	ff: A3($author$project$Markdown$Parser$joinRawStringsWith, '', openListItem.ff, newString)
																})),
														rest))
											});
									});
								var completeOrMergeUnorderedListBlock = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												g: A2(
													$elm$core$List$cons,
													A4(
														$author$project$Markdown$RawBlock$UnorderedListBlock,
														tight,
														intended,
														closeListItems,
														_Utils_update(
															openListItem,
															{
																ff: A3($author$project$Markdown$Parser$joinRawStringsWith, '\n', openListItem.ff, newString)
															})),
													rest)
											});
									});
								return $elm$parser$Parser$Advanced$oneOf(
									_List_fromArray(
										[
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												function (_v5) {
													return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
												},
												$author$project$Markdown$Parser$blankLine)),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												completeOrMergeUnorderedListBlock(revStmts),
												A2(
													$elm$parser$Parser$Advanced$keeper,
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
														$elm$parser$Parser$Advanced$symbol(
															A2(
																$elm$parser$Parser$Advanced$Token,
																A2($elm$core$String$repeat, intended, ' '),
																$elm$parser$Parser$ExpectingSymbol('Indentation')))),
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$getChompedString($author$project$Helpers$chompUntilLineEndOrEnd),
														$author$project$Helpers$lineEndOrEnd)))),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$andThen,
												$author$project$Markdown$Parser$completeOrMergeBlocks(revStmts),
												$author$project$Markdown$Parser$cyclic$mergeableBlockAfterList()))
										]));
							case 4:
								var _v10 = _v3.a;
								var tight = _v10.a;
								var intended = _v10.b;
								var marker = _v10.c;
								var order = _v10.d;
								var closeListItems = _v10.e;
								var openListItem = _v10.f;
								var rest = _v3.b;
								var completeOrMergeUnorderedListBlockBlankLine = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												g: A2(
													$elm$core$List$cons,
													$author$project$Markdown$RawBlock$BlankLine,
													A2(
														$elm$core$List$cons,
														A6($author$project$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
														rest))
											});
									});
								var completeOrMergeUnorderedListBlock = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												g: A2(
													$elm$core$List$cons,
													A6($author$project$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
													rest)
											});
									});
								return $elm$parser$Parser$Advanced$oneOf(
									_List_fromArray(
										[
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												function (_v11) {
													return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
												},
												$author$project$Markdown$Parser$blankLine)),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												completeOrMergeUnorderedListBlock(revStmts),
												A2(
													$elm$parser$Parser$Advanced$keeper,
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
														$elm$parser$Parser$Advanced$symbol(
															A2(
																$elm$parser$Parser$Advanced$Token,
																A2($elm$core$String$repeat, intended, ' '),
																$elm$parser$Parser$ExpectingSymbol('Indentation')))),
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$getChompedString($author$project$Helpers$chompUntilLineEndOrEnd),
														$author$project$Helpers$lineEndOrEnd)))),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$andThen,
												$author$project$Markdown$Parser$completeOrMergeBlocks(revStmts),
												$author$project$Markdown$Parser$cyclic$mergeableBlockAfterList()))
										]));
							case 10:
								if (_v3.b.b) {
									switch (_v3.b.a.$) {
										case 3:
											var _v6 = _v3.a;
											var _v7 = _v3.b;
											var _v8 = _v7.a;
											var tight = _v8.a;
											var intended = _v8.b;
											var closeListItems = _v8.c;
											var openListItem = _v8.d;
											var rest = _v7.b;
											var completeOrMergeUnorderedListBlockBlankLine = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															g: A2(
																$elm$core$List$cons,
																$author$project$Markdown$RawBlock$BlankLine,
																A2(
																	$elm$core$List$cons,
																	A4(
																		$author$project$Markdown$RawBlock$UnorderedListBlock,
																		tight,
																		intended,
																		closeListItems,
																		_Utils_update(
																			openListItem,
																			{
																				ff: A3($author$project$Markdown$Parser$joinRawStringsWith, '', openListItem.ff, newString)
																			})),
																	rest))
														});
												});
											var completeOrMergeUnorderedListBlock = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															g: A2(
																$elm$core$List$cons,
																A4(
																	$author$project$Markdown$RawBlock$UnorderedListBlock,
																	tight,
																	intended,
																	closeListItems,
																	_Utils_update(
																		openListItem,
																		{
																			ff: A3($author$project$Markdown$Parser$joinRawStringsWith, '\n', openListItem.ff, newString)
																		})),
																rest)
														});
												});
											return ($elm$core$String$trim(openListItem.ff) === '') ? A2(
												$elm$parser$Parser$Advanced$map,
												function (block) {
													return $elm$parser$Parser$Advanced$Loop(block);
												},
												A2(
													$elm$parser$Parser$Advanced$andThen,
													$author$project$Markdown$Parser$completeOrMergeBlocks(revStmts),
													$author$project$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser())) : $elm$parser$Parser$Advanced$oneOf(
												_List_fromArray(
													[
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															function (_v9) {
																return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
															},
															$author$project$Markdown$Parser$blankLine)),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															completeOrMergeUnorderedListBlock(revStmts),
															A2(
																$elm$parser$Parser$Advanced$keeper,
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
																	$elm$parser$Parser$Advanced$symbol(
																		A2(
																			$elm$parser$Parser$Advanced$Token,
																			A2($elm$core$String$repeat, intended, ' '),
																			$elm$parser$Parser$ExpectingSymbol('Indentation')))),
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$getChompedString($author$project$Helpers$chompUntilLineEndOrEnd),
																	$author$project$Helpers$lineEndOrEnd)))),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$andThen,
															$author$project$Markdown$Parser$completeOrMergeBlocks(revStmts),
															$author$project$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()))
													]));
										case 4:
											var _v12 = _v3.a;
											var _v13 = _v3.b;
											var _v14 = _v13.a;
											var tight = _v14.a;
											var intended = _v14.b;
											var marker = _v14.c;
											var order = _v14.d;
											var closeListItems = _v14.e;
											var openListItem = _v14.f;
											var rest = _v13.b;
											var completeOrMergeUnorderedListBlockBlankLine = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															g: A2(
																$elm$core$List$cons,
																$author$project$Markdown$RawBlock$BlankLine,
																A2(
																	$elm$core$List$cons,
																	A6($author$project$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
																	rest))
														});
												});
											var completeOrMergeUnorderedListBlock = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															g: A2(
																$elm$core$List$cons,
																A6($author$project$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
																rest)
														});
												});
											return ($elm$core$String$trim(openListItem) === '') ? A2(
												$elm$parser$Parser$Advanced$map,
												function (block) {
													return $elm$parser$Parser$Advanced$Loop(block);
												},
												A2(
													$elm$parser$Parser$Advanced$andThen,
													$author$project$Markdown$Parser$completeOrMergeBlocks(revStmts),
													$author$project$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser())) : $elm$parser$Parser$Advanced$oneOf(
												_List_fromArray(
													[
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															function (_v15) {
																return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
															},
															$author$project$Markdown$Parser$blankLine)),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															completeOrMergeUnorderedListBlock(revStmts),
															A2(
																$elm$parser$Parser$Advanced$keeper,
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
																	$elm$parser$Parser$Advanced$symbol(
																		A2(
																			$elm$parser$Parser$Advanced$Token,
																			A2($elm$core$String$repeat, intended, ' '),
																			$elm$parser$Parser$ExpectingSymbol('Indentation')))),
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$getChompedString($author$project$Helpers$chompUntilLineEndOrEnd),
																	$author$project$Helpers$lineEndOrEnd)))),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$andThen,
															$author$project$Markdown$Parser$completeOrMergeBlocks(revStmts),
															$author$project$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()))
													]));
										default:
											break _v3$6;
									}
								} else {
									break _v3$6;
								}
							default:
								break _v3$6;
						}
					} else {
						break _v3$6;
					}
				}
				return A2(
					$elm$parser$Parser$Advanced$map,
					function (block) {
						return $elm$parser$Parser$Advanced$Loop(block);
					},
					A2(
						$elm$parser$Parser$Advanced$andThen,
						$author$project$Markdown$Parser$completeOrMergeBlocks(revStmts),
						$author$project$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()));
			}(),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (block) {
					return $elm$parser$Parser$Advanced$Loop(block);
				},
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$author$project$Markdown$Parser$completeOrMergeBlocks(revStmts),
					$author$project$Markdown$Parser$openBlockOrParagraphParser))
			]));
};
var $author$project$Markdown$Parser$textNodeToBlocks = function (textNodeValue) {
	return A2(
		$elm$core$Result$withDefault,
		_List_Nil,
		$author$project$Markdown$Parser$parse(textNodeValue));
};
var $author$project$Markdown$Parser$xmlNodeToHtmlNode = function (xmlNode) {
	switch (xmlNode.$) {
		case 1:
			var innerText = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$author$project$Markdown$RawBlock$OpenBlockOrParagraph(innerText));
		case 0:
			var tag = xmlNode.a;
			var attributes = xmlNode.b;
			var children = xmlNode.c;
			var _v1 = $author$project$Markdown$Parser$nodesToBlocks(children);
			if (!_v1.$) {
				var parsedChildren = _v1.a;
				return $elm$parser$Parser$Advanced$succeed(
					$author$project$Markdown$RawBlock$Html(
						A3($author$project$Markdown$Block$HtmlElement, tag, attributes, parsedChildren)));
			} else {
				var err = _v1.a;
				return $elm$parser$Parser$Advanced$problem(err);
			}
		case 2:
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$author$project$Markdown$RawBlock$Html(
					$author$project$Markdown$Block$HtmlComment(string)));
		case 3:
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$author$project$Markdown$RawBlock$Html(
					$author$project$Markdown$Block$Cdata(string)));
		case 4:
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$author$project$Markdown$RawBlock$Html(
					$author$project$Markdown$Block$ProcessingInstruction(string)));
		default:
			var declarationType = xmlNode.a;
			var content = xmlNode.b;
			return $elm$parser$Parser$Advanced$succeed(
				$author$project$Markdown$RawBlock$Html(
					A2($author$project$Markdown$Block$HtmlDeclaration, declarationType, content)));
	}
};
function $author$project$Markdown$Parser$cyclic$rawBlockParser() {
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		$author$project$Markdown$Parser$completeBlocks,
		A2(
			$elm$parser$Parser$Advanced$loop,
			{f: _List_Nil, g: _List_Nil},
			$author$project$Markdown$Parser$stepRawBlock));
}
function $author$project$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$author$project$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$author$project$Markdown$Parser$blankLine,
				$author$project$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$author$project$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($author$project$Markdown$CodeBlock$parser)),
				$author$project$Markdown$Parser$indentedCodeBlock,
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v40) {
					return $author$project$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($author$project$ThematicBreak$parser)),
				$author$project$Markdown$Parser$unorderedListBlock(false),
				$author$project$Markdown$Parser$orderedListBlock(false),
				$elm$parser$Parser$Advanced$backtrackable($author$project$Markdown$Heading$parser),
				$author$project$Markdown$Parser$cyclic$htmlParser()
			]));
}
function $author$project$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$author$project$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$author$project$Markdown$Parser$blankLine,
				$author$project$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$author$project$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($author$project$Markdown$CodeBlock$parser)),
				$elm$parser$Parser$Advanced$backtrackable($author$project$Markdown$Parser$setextLineParser),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v39) {
					return $author$project$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($author$project$ThematicBreak$parser)),
				$author$project$Markdown$Parser$unorderedListBlock(true),
				$author$project$Markdown$Parser$orderedListBlock(true),
				$elm$parser$Parser$Advanced$backtrackable($author$project$Markdown$Heading$parser),
				$author$project$Markdown$Parser$cyclic$htmlParser(),
				$elm$parser$Parser$Advanced$backtrackable($author$project$Markdown$Parser$tableDelimiterInOpenParagraph)
			]));
}
function $author$project$Markdown$Parser$cyclic$mergeableBlockAfterList() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$author$project$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$author$project$Markdown$Parser$blankLine,
				$author$project$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$author$project$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($author$project$Markdown$CodeBlock$parser)),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v38) {
					return $author$project$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($author$project$ThematicBreak$parser)),
				$author$project$Markdown$Parser$unorderedListBlock(false),
				$author$project$Markdown$Parser$orderedListBlock(false),
				$elm$parser$Parser$Advanced$backtrackable($author$project$Markdown$Heading$parser),
				$author$project$Markdown$Parser$cyclic$htmlParser()
			]));
}
function $author$project$Markdown$Parser$cyclic$htmlParser() {
	return A2($elm$parser$Parser$Advanced$andThen, $author$project$Markdown$Parser$xmlNodeToHtmlNode, $author$project$HtmlParser$html);
}
var $author$project$Markdown$Parser$rawBlockParser = $author$project$Markdown$Parser$cyclic$rawBlockParser();
$author$project$Markdown$Parser$cyclic$rawBlockParser = function () {
	return $author$project$Markdown$Parser$rawBlockParser;
};
var $author$project$Markdown$Parser$mergeableBlockNotAfterOpenBlockOrParagraphParser = $author$project$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser();
$author$project$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser = function () {
	return $author$project$Markdown$Parser$mergeableBlockNotAfterOpenBlockOrParagraphParser;
};
var $author$project$Markdown$Parser$mergeableBlockAfterOpenBlockOrParagraphParser = $author$project$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser();
$author$project$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser = function () {
	return $author$project$Markdown$Parser$mergeableBlockAfterOpenBlockOrParagraphParser;
};
var $author$project$Markdown$Parser$mergeableBlockAfterList = $author$project$Markdown$Parser$cyclic$mergeableBlockAfterList();
$author$project$Markdown$Parser$cyclic$mergeableBlockAfterList = function () {
	return $author$project$Markdown$Parser$mergeableBlockAfterList;
};
var $author$project$Markdown$Parser$htmlParser = $author$project$Markdown$Parser$cyclic$htmlParser();
$author$project$Markdown$Parser$cyclic$htmlParser = function () {
	return $author$project$Markdown$Parser$htmlParser;
};
var $author$project$Markdown$Renderer$combineResults = A2(
	$elm$core$List$foldr,
	$elm$core$Result$map2($elm$core$List$cons),
	$elm$core$Result$Ok(_List_Nil));
var $author$project$Markdown$Block$foldl = F3(
	function (_function, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var block = list.a;
				var remainingBlocks = list.b;
				switch (block.$) {
					case 0:
						var html = block.a;
						if (!html.$) {
							var children = html.c;
							var $temp$function = _function,
								$temp$acc = A2(_function, block, acc),
								$temp$list = _Utils_ap(children, remainingBlocks);
							_function = $temp$function;
							acc = $temp$acc;
							list = $temp$list;
							continue foldl;
						} else {
							var $temp$function = _function,
								$temp$acc = A2(_function, block, acc),
								$temp$list = remainingBlocks;
							_function = $temp$function;
							acc = $temp$acc;
							list = $temp$list;
							continue foldl;
						}
					case 1:
						var tight = block.a;
						var blocks = block.b;
						var childBlocks = A2(
							$elm$core$List$concatMap,
							function (_v3) {
								var children = _v3.b;
								return children;
							},
							blocks);
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = _Utils_ap(childBlocks, remainingBlocks);
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 2:
						var _int = block.b;
						var blocks = block.c;
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = _Utils_ap(
							$elm$core$List$concat(blocks),
							remainingBlocks);
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 3:
						var blocks = block.a;
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = _Utils_ap(blocks, remainingBlocks);
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 4:
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 5:
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 6:
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 7:
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					default:
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
				}
			}
		}
	});
var $author$project$Markdown$Block$extractInlineBlockText = function (block) {
	switch (block.$) {
		case 5:
			var inlines = block.a;
			return $author$project$Markdown$Block$extractInlineText(inlines);
		case 0:
			var html = block.a;
			if (!html.$) {
				var blocks = html.c;
				return A3(
					$author$project$Markdown$Block$foldl,
					F2(
						function (nestedBlock, soFar) {
							return _Utils_ap(
								soFar,
								$author$project$Markdown$Block$extractInlineBlockText(nestedBlock));
						}),
					'',
					blocks);
			} else {
				return '';
			}
		case 1:
			var tight = block.a;
			var items = block.b;
			return A2(
				$elm$core$String$join,
				'\n',
				A2(
					$elm$core$List$map,
					function (_v4) {
						var task = _v4.a;
						var blocks = _v4.b;
						return A2(
							$elm$core$String$join,
							'\n',
							A2($elm$core$List$map, $author$project$Markdown$Block$extractInlineBlockText, blocks));
					},
					items));
		case 2:
			var tight = block.a;
			var _int = block.b;
			var items = block.c;
			return A2(
				$elm$core$String$join,
				'\n',
				A2(
					$elm$core$List$map,
					function (blocks) {
						return A2(
							$elm$core$String$join,
							'\n',
							A2($elm$core$List$map, $author$project$Markdown$Block$extractInlineBlockText, blocks));
					},
					items));
		case 3:
			var blocks = block.a;
			return A2(
				$elm$core$String$join,
				'\n',
				A2($elm$core$List$map, $author$project$Markdown$Block$extractInlineBlockText, blocks));
		case 4:
			var headingLevel = block.a;
			var inlines = block.b;
			return $author$project$Markdown$Block$extractInlineText(inlines);
		case 6:
			var header = block.a;
			var rows = block.b;
			return A2(
				$elm$core$String$join,
				'\n',
				$elm$core$List$concat(
					_List_fromArray(
						[
							A2(
							$elm$core$List$map,
							$author$project$Markdown$Block$extractInlineText,
							A2(
								$elm$core$List$map,
								function ($) {
									return $.lA;
								},
								header)),
							$elm$core$List$concat(
							A2(
								$elm$core$List$map,
								$elm$core$List$map($author$project$Markdown$Block$extractInlineText),
								rows))
						])));
		case 7:
			var body = block.a.ff;
			return body;
		default:
			return '';
	}
};
var $author$project$Markdown$Block$extractInlineText = function (inlines) {
	return A3($elm$core$List$foldl, $author$project$Markdown$Block$extractTextHelp, '', inlines);
};
var $author$project$Markdown$Block$extractTextHelp = F2(
	function (inline, text) {
		switch (inline.$) {
			case 7:
				var str = inline.a;
				return _Utils_ap(text, str);
			case 8:
				return text + ' ';
			case 6:
				var str = inline.a;
				return _Utils_ap(text, str);
			case 1:
				var inlines = inline.c;
				return _Utils_ap(
					text,
					$author$project$Markdown$Block$extractInlineText(inlines));
			case 2:
				var inlines = inline.c;
				return _Utils_ap(
					text,
					$author$project$Markdown$Block$extractInlineText(inlines));
			case 0:
				var html = inline.a;
				if (!html.$) {
					var blocks = html.c;
					return A3(
						$author$project$Markdown$Block$foldl,
						F2(
							function (block, soFar) {
								return _Utils_ap(
									soFar,
									$author$project$Markdown$Block$extractInlineBlockText(block));
							}),
						text,
						blocks);
				} else {
					return text;
				}
			case 4:
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$author$project$Markdown$Block$extractInlineText(inlines));
			case 3:
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$author$project$Markdown$Block$extractInlineText(inlines));
			default:
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$author$project$Markdown$Block$extractInlineText(inlines));
		}
	});
var $author$project$Markdown$Renderer$renderHtml = F5(
	function (tagName, attributes, children, _v0, renderedChildren) {
		var htmlRenderer = _v0;
		return A2(
			$elm$core$Result$andThen,
			function (okChildren) {
				return A2(
					$elm$core$Result$map,
					function (myRenderer) {
						return myRenderer(okChildren);
					},
					A3(htmlRenderer, tagName, attributes, children));
			},
			$author$project$Markdown$Renderer$combineResults(renderedChildren));
	});
var $author$project$Markdown$Renderer$foldThing = F3(
	function (renderer, topLevelInline, soFar) {
		var _v12 = A2($author$project$Markdown$Renderer$renderSingleInline, renderer, topLevelInline);
		if (!_v12.$) {
			var inline = _v12.a;
			return A2($elm$core$List$cons, inline, soFar);
		} else {
			return soFar;
		}
	});
var $author$project$Markdown$Renderer$renderHelper = F2(
	function (renderer, blocks) {
		return A2(
			$elm$core$List$filterMap,
			$author$project$Markdown$Renderer$renderHelperSingle(renderer),
			blocks);
	});
var $author$project$Markdown$Renderer$renderHelperSingle = function (renderer) {
	return function (block) {
		switch (block.$) {
			case 4:
				var level = block.a;
				var content = block.b;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						function (children) {
							return renderer.lb(
								{
									cv: children,
									lD: level,
									mm: $author$project$Markdown$Block$extractInlineText(content)
								});
						},
						A2($author$project$Markdown$Renderer$renderStyled, renderer, content)));
			case 5:
				var content = block.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.l8,
						A2($author$project$Markdown$Renderer$renderStyled, renderer, content)));
			case 0:
				var html = block.a;
				if (!html.$) {
					var tag = html.a;
					var attributes = html.b;
					var children = html.c;
					return $elm$core$Maybe$Just(
						A4($author$project$Markdown$Renderer$renderHtmlNode, renderer, tag, attributes, children));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			case 1:
				var tight = block.a;
				var items = block.b;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						function (listItems) {
							return renderer.nv(
								A2(
									$elm$core$List$map,
									function (_v7) {
										var task = _v7.a;
										var children = _v7.b;
										return A2(
											$author$project$Markdown$Block$ListItem,
											task,
											$elm$core$List$concat(children));
									},
									listItems));
						},
						$author$project$Markdown$Renderer$combineResults(
							A2(
								$elm$core$List$map,
								function (_v4) {
									var task = _v4.a;
									var children = _v4.b;
									return A2(
										$elm$core$Result$map,
										$author$project$Markdown$Block$ListItem(task),
										$author$project$Markdown$Renderer$combineResults(
											function (blocks) {
												return A2(
													$elm$core$List$filterMap,
													function (listItemBlock) {
														var _v5 = _Utils_Tuple2(tight, listItemBlock);
														if ((_v5.a === 1) && (_v5.b.$ === 5)) {
															var _v6 = _v5.a;
															var content = _v5.b.a;
															return $elm$core$Maybe$Just(
																A2($author$project$Markdown$Renderer$renderStyled, renderer, content));
														} else {
															return A2(
																$elm$core$Maybe$map,
																$elm$core$Result$map($elm$core$List$singleton),
																A2($author$project$Markdown$Renderer$renderHelperSingle, renderer, listItemBlock));
														}
													},
													blocks);
											}(children)));
								},
								items))));
			case 2:
				var tight = block.a;
				var startingIndex = block.b;
				var items = block.c;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						function (listItems) {
							return A2(
								renderer.l6,
								startingIndex,
								A2(
									$elm$core$List$map,
									function (children) {
										return $elm$core$List$concat(children);
									},
									listItems));
						},
						$author$project$Markdown$Renderer$combineResults(
							A2(
								$elm$core$List$map,
								function (itemsblocks) {
									return $author$project$Markdown$Renderer$combineResults(
										function (blocks) {
											return A2(
												$elm$core$List$filterMap,
												function (listItemBlock) {
													var _v8 = _Utils_Tuple2(tight, listItemBlock);
													if ((_v8.a === 1) && (_v8.b.$ === 5)) {
														var _v9 = _v8.a;
														var content = _v8.b.a;
														return $elm$core$Maybe$Just(
															A2($author$project$Markdown$Renderer$renderStyled, renderer, content));
													} else {
														return A2(
															$elm$core$Maybe$map,
															$elm$core$Result$map($elm$core$List$singleton),
															A2($author$project$Markdown$Renderer$renderHelperSingle, renderer, listItemBlock));
													}
												},
												blocks);
										}(itemsblocks));
								},
								items))));
			case 7:
				var codeBlock = block.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.kr(codeBlock)));
			case 8:
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(renderer.nm));
			case 3:
				var nestedBlocks = block.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.j8,
						$author$project$Markdown$Renderer$combineResults(
							A2($author$project$Markdown$Renderer$renderHelper, renderer, nestedBlocks))));
			default:
				var header = block.a;
				var rows = block.b;
				var renderedHeaderCells = $author$project$Markdown$Renderer$combineResults(
					A2(
						$elm$core$List$map,
						function (_v11) {
							var label = _v11.lA;
							var alignment = _v11.ck;
							return A2(
								$elm$core$Result$map,
								$elm$core$Tuple$pair(alignment),
								A2($author$project$Markdown$Renderer$renderStyled, renderer, label));
						},
						header));
				var renderedHeader = A2(
					$elm$core$Result$map,
					function (listListView) {
						return renderer.m5(
							$elm$core$List$singleton(
								renderer.m7(
									A2(
										$elm$core$List$map,
										function (_v10) {
											var maybeAlignment = _v10.a;
											var item = _v10.b;
											return A2(renderer.m6, maybeAlignment, item);
										},
										listListView))));
					},
					renderedHeaderCells);
				var renderedBody = function (r) {
					return $elm$core$List$isEmpty(r) ? _List_Nil : _List_fromArray(
						[
							renderer.m3(r)
						]);
				};
				var alignmentForColumn = function (columnIndex) {
					return A2(
						$elm$core$Maybe$andThen,
						function ($) {
							return $.ck;
						},
						$elm$core$List$head(
							A2($elm$core$List$drop, columnIndex, header)));
				};
				var renderRow = function (cells) {
					return A2(
						$elm$core$Result$map,
						renderer.m7,
						A2(
							$elm$core$Result$map,
							$elm$core$List$indexedMap(
								F2(
									function (index, cell) {
										return A2(
											renderer.m4,
											alignmentForColumn(index),
											cell);
									})),
							$author$project$Markdown$Renderer$combineResults(
								A2(
									$elm$core$List$map,
									$author$project$Markdown$Renderer$renderStyled(renderer),
									cells))));
				};
				var renderedRows = $author$project$Markdown$Renderer$combineResults(
					A2($elm$core$List$map, renderRow, rows));
				return $elm$core$Maybe$Just(
					A3(
						$elm$core$Result$map2,
						F2(
							function (h, r) {
								return renderer.m2(
									A2(
										$elm$core$List$cons,
										h,
										renderedBody(r)));
							}),
						renderedHeader,
						renderedRows));
		}
	};
};
var $author$project$Markdown$Renderer$renderHtmlNode = F4(
	function (renderer, tag, attributes, children) {
		return A5(
			$author$project$Markdown$Renderer$renderHtml,
			tag,
			attributes,
			children,
			renderer.lh,
			A2($author$project$Markdown$Renderer$renderHelper, renderer, children));
	});
var $author$project$Markdown$Renderer$renderSingleInline = F2(
	function (renderer, inline) {
		switch (inline.$) {
			case 4:
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.m$,
						A2($author$project$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 3:
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.kW,
						A2($author$project$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 5:
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.m_,
						A2($author$project$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 2:
				var src = inline.a;
				var title = inline.b;
				var children = inline.c;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.lj(
							{
								e3: $author$project$Markdown$Block$extractInlineText(children),
								de: src,
								jg: title
							})));
			case 7:
				var string = inline.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.aD(string)));
			case 6:
				var string = inline.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.ks(string)));
			case 1:
				var destination = inline.a;
				var title = inline.b;
				var inlines = inline.c;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$andThen,
						function (children) {
							return $elm$core$Result$Ok(
								A2(
									renderer.lF,
									{kO: destination, jg: title},
									children));
						},
						A2($author$project$Markdown$Renderer$renderStyled, renderer, inlines)));
			case 8:
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(renderer.la));
			default:
				var html = inline.a;
				if (!html.$) {
					var tag = html.a;
					var attributes = html.b;
					var children = html.c;
					return $elm$core$Maybe$Just(
						A4($author$project$Markdown$Renderer$renderHtmlNode, renderer, tag, attributes, children));
				} else {
					return $elm$core$Maybe$Nothing;
				}
		}
	});
var $author$project$Markdown$Renderer$renderStyled = F2(
	function (renderer, styledStrings) {
		return $author$project$Markdown$Renderer$combineResults(
			A3(
				$elm$core$List$foldr,
				$author$project$Markdown$Renderer$foldThing(renderer),
				_List_Nil,
				styledStrings));
	});
var $author$project$Markdown$Renderer$render = F2(
	function (renderer, ast) {
		return $author$project$Markdown$Renderer$combineResults(
			A2($author$project$Markdown$Renderer$renderHelper, renderer, ast));
	});
var $author$project$Frontend$Markdown$viewViaDefaultHtmlRenderer = F2(
	function (_v0, markdown) {
		var containerClassName = _v0.kz;
		return A2(
			$elm$core$Result$map,
			$elm$core$List$map(
				A2(
					$elm$core$Basics$composeR,
					$mdgriffith$elm_ui$Element$html,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$singleton,
						$mdgriffith$elm_ui$Element$paragraph(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'line-height', '1.5')),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									$elm$html$Html$Attributes$class(containerClassName))
								]))))),
			A2(
				$elm$core$Result$andThen,
				$author$project$Markdown$Renderer$render($author$project$Markdown$Renderer$defaultHtmlRenderer),
				A2(
					$elm$core$Result$mapError,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$map($author$project$Markdown$Parser$deadEndToString),
						$elm$core$String$join('\n')),
					$author$project$Markdown$Parser$parse(markdown))));
	});
var $author$project$Frontend$Visuals$wrapInPreformatted = A2(
	$elm$core$Basics$composeR,
	$elm$html$Html$text,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$singleton,
		$elm$html$Html$pre(
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin', '0'),
					A2($elm$html$Html$Attributes$style, 'white-space', 'pre-wrap'),
					A2($elm$html$Html$Attributes$style, 'font-family', 'monospace, monospace'),
					A2($elm$html$Html$Attributes$style, 'line-height', 'normal')
				]))));
var $author$project$Frontend$RunBot$viewBotDescriptionText = function (bot) {
	var _v0 = bot.bB.aL;
	if (_v0.$ === 1) {
		return $mdgriffith$elm_ui$Element$text('The selected bot does not contain a description');
	} else {
		var descriptionText = _v0.a;
		var fallbackRendering = function (errorDesc) {
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$errorColor)
							]),
						$mdgriffith$elm_ui$Element$text(errorDesc)),
						$mdgriffith$elm_ui$Element$html(
						$author$project$Frontend$Visuals$wrapInPreformatted(descriptionText))
					]));
		};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($author$project$Frontend$Visuals$statusTextFromBotBackgroundColor),
					$mdgriffith$elm_ui$Element$padding($author$project$Frontend$Visuals$defaultFontSize),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$solid,
					$mdgriffith$elm_ui$Element$Border$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 111, 111, 111)),
					$mdgriffith$elm_ui$Element$Border$rounded(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
				]),
			_List_fromArray(
				[
					function () {
					var _v1 = A2(
						$author$project$Frontend$Markdown$viewViaDefaultHtmlRenderer,
						{kz: 'markdown-body'},
						descriptionText);
					if (_v1.$ === 1) {
						var error = _v1.a;
						return fallbackRendering('Failed viewing markdown: ' + error);
					} else {
						var rendered = _v1.a;
						return A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							rendered);
					}
				}()
				]));
	}
};
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$circleCheck = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'circle-check',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$circleCheck = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$circleCheck);
var $lattyware$elm_fontawesome$FontAwesome$Solid$checkCircle = $lattyware$elm_fontawesome$FontAwesome$Solid$circleCheck;
var $author$project$Frontend$Visuals$successColor = A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.9, 0.1);
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$circleXmark = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'circle-xmark',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$circleXmark = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$circleXmark);
var $lattyware$elm_fontawesome$FontAwesome$Solid$xmarkCircle = $lattyware$elm_fontawesome$FontAwesome$Solid$circleXmark;
var $author$project$Frontend$RunBot$viewBotSettingsDialogTestResult = F3(
	function (dialogState, viewState, selectedBot) {
		var lastEditAgeSeconds = (($elm$time$Time$posixToMillis(viewState.s) - $elm$time$Time$posixToMillis(dialogState.ah.s)) / 1000) | 0;
		var _v0 = A3($author$project$Frontend$RunBot$getTestBotSettingsResult, viewState, dialogState, selectedBot);
		if (_v0.$ === 1) {
			var testSettingsResponse = _v0.a;
			var _v1 = function () {
				var _v2 = testSettingsResponse.mq;
				if (_v2.$ === 1) {
					var err = _v2.a;
					return _Utils_Tuple3($author$project$Frontend$Visuals$errorColor, err, $lattyware$elm_fontawesome$FontAwesome$Solid$xmarkCircle);
				} else {
					var ok = _v2.a;
					return _Utils_Tuple3($author$project$Frontend$Visuals$successColor, ok, $lattyware$elm_fontawesome$FontAwesome$Solid$checkCircle);
				}
			}();
			var color = _v1.a;
			var text = _v1.b;
			var icon = _v1.c;
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color(color),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
						$mdgriffith$elm_ui$Element$clip,
						$mdgriffith$elm_ui$Element$htmlAttribute(
						A2($elm$html$Html$Attributes$style, 'flex-shrink', '1'))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size($author$project$Frontend$Visuals$defaultFontSize * 2),
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$alpha(0.6)
							]),
						$mdgriffith$elm_ui$Element$html(
							$lattyware$elm_fontawesome$FontAwesome$view(icon))),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$scrollbarY,
								$author$project$Frontend$Visuals$mitigate_2024_09_scrollbar_issue
							]),
						$author$project$Frontend$Visuals$textFormattedAsInConsoleElement(text))
					]));
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$Font$italic, $author$project$Frontend$Visuals$userSelectNone]),
				$mdgriffith$elm_ui$Element$text(
					'Testing these settings.' + A2(
						$elm$core$String$repeat,
						A2($elm$core$Basics$min, 10, lastEditAgeSeconds),
						'.')));
		}
	});
var $author$project$Frontend$RunBot$UserInputCancelConfigureSessionPopup = {$: 4};
var $mdgriffith$elm_ui$Internal$Model$Bottom = 2;
var $mdgriffith$elm_ui$Element$alignBottom = $mdgriffith$elm_ui$Internal$Model$AlignY(2);
var $mdgriffith$elm_ui$Element$Border$roundEach = function (_v0) {
	var topLeft = _v0.np;
	var topRight = _v0.nq;
	var bottomLeft = _v0.kg;
	var bottomRight = _v0.kh;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + ($elm$core$String$fromInt(topLeft) + ('-' + ($elm$core$String$fromInt(topRight) + ($elm$core$String$fromInt(bottomLeft) + ('-' + $elm$core$String$fromInt(bottomRight)))))),
			'border-radius',
			$elm$core$String$fromInt(topLeft) + ('px ' + ($elm$core$String$fromInt(topRight) + ('px ' + ($elm$core$String$fromInt(bottomRight) + ('px ' + ($elm$core$String$fromInt(bottomLeft) + 'px'))))))));
};
var $elm$html$Html$textarea = _VirtualDom_node('textarea');
var $author$project$Frontend$RunBot$viewBotSettingsDialog = F4(
	function (dialogState, viewState, configureSessionState, selectedBot) {
		var sessionConfiguration = configureSessionState.mF;
		var selectedBotDisplayName = A2($elm$core$String$left, 8, selectedBot.av.bj);
		var resultElement = A3($author$project$Frontend$RunBot$viewBotSettingsDialogTestResult, dialogState, viewState, selectedBot);
		var botSettingsElement = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$html(
					A2(
						$elm$html$Html$textarea,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$value(dialogState.ah.aD),
								$elm$html$Html$Events$onInput(
								function (botSettings) {
									return _Utils_update(
										dialogState,
										{
											ah: {aD: botSettings, s: viewState.s}
										});
								}),
								A2($elm$html$Html$Attributes$style, 'white-space', 'pre'),
								A2($elm$html$Html$Attributes$style, 'font-family', 'monospace, monospace'),
								A2($elm$html$Html$Attributes$style, 'font-size', '100%'),
								A2($elm$html$Html$Attributes$style, 'padding', '0.4em'),
								A2($elm$html$Html$Attributes$style, 'width', '100%'),
								A2($elm$html$Html$Attributes$style, 'height', '7.5em'),
								A2($elm$html$Html$Attributes$style, 'resize', 'none'),
								A2($elm$html$Html$Attributes$style, '-webkit-box-sizing', 'border-box'),
								A2($elm$html$Html$Attributes$style, '-moz-box-sizing', 'border-box'),
								A2($elm$html$Html$Attributes$style, 'box-sizing', 'border-box'),
								A2($elm$html$Html$Attributes$style, 'overflow', 'scroll'),
								A2($elm$html$Html$Attributes$style, 'color', 'whitesmoke'),
								A2($elm$html$Html$Attributes$style, 'background', '#111'),
								$elm$html$Html$Attributes$spellcheck(false)
							]),
						_List_Nil))
				]));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
				]),
			_List_fromArray(
				[
					$author$project$Frontend$RunBot$guideParagraphFromElements(
					$elm$core$List$singleton(
						$mdgriffith$elm_ui$Element$text(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									['Here you can customize the behavior of the bot for this session.', 'The bot-settings language is specific to the selected bot.', 'To learn about the settings language of bot ' + (selectedBotDisplayName + ', see the bot description above, or contact its author.')]))))),
					A2(
					$mdgriffith$elm_ui$Element$map,
					A2($elm$core$Basics$composeR, $author$project$Frontend$RunBot$BotSettingsPopup, $author$project$Frontend$RunBot$UserInputEnterConfigureSessionPopup),
					botSettingsElement),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px($author$project$Frontend$Visuals$defaultFontSize * 6))
						]),
					resultElement),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$author$project$Frontend$Visuals$buttonElement,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignLeft]),
							{
								bo: false,
								lA: $mdgriffith$elm_ui$Element$text('Clear'),
								by: $elm$core$Maybe$Just(
									$author$project$Frontend$RunBot$UserInputEnterConfigureSessionPopup(
										$author$project$Frontend$RunBot$BotSettingsPopup(
											_Utils_update(
												dialogState,
												{
													ah: {aD: '', s: viewState.s}
												}))))
							}),
							A2(
							$author$project$Frontend$Visuals$buttonElement,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignRight]),
							{
								bo: false,
								lA: $mdgriffith$elm_ui$Element$text('Save'),
								by: $elm$core$Maybe$Just(
									$author$project$Frontend$RunBot$UserInputSetPlaySessionConfig(
										_Utils_update(
											sessionConfiguration,
											{ke: dialogState.ah.aD})))
							})
						]))
				]));
	});
var $elm_community$result_extra$Result$Extra$isErr = function (x) {
	if (!x.$) {
		return false;
	} else {
		return true;
	}
};
var $author$project$Frontend$RunBot$viewPauseBotKeysDialog = F2(
	function (dialogState, configureSessionState) {
		var sessionConfiguration = configureSessionState.mF;
		var parseResult = $author$project$Frontend$RunBot$parsePauseBotKeyCodesFromAggregateString(dialogState.bt);
		var inputFontColor = A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0);
		var inputBackgroundColor = A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9);
		var pauseBotKeysElement = A2(
			$mdgriffith$elm_ui$Element$Input$text,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px($author$project$Frontend$Visuals$defaultFontSize * 20)),
					$mdgriffith$elm_ui$Element$Font$color(inputFontColor),
					$mdgriffith$elm_ui$Element$Background$color(inputBackgroundColor),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'font-family', 'monospace, monospace'))
				]),
			{
				lA: $mdgriffith$elm_ui$Element$Input$labelHidden('Input field for the key combination to pause the bot'),
				lZ: function (pauseBotKeys) {
					return _Utils_update(
						dialogState,
						{bt: pauseBotKeys});
				},
				mf: $elm$core$Maybe$Nothing,
				aD: dialogState.bt
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
				]),
			_List_fromArray(
				[
					$author$project$Frontend$RunBot$guideParagraphFromElements(
					$elm$core$List$singleton(
						$mdgriffith$elm_ui$Element$text(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									['Combination of keys to press to pause the bot.']))))),
					A2(
					$mdgriffith$elm_ui$Element$map,
					A2($elm$core$Basics$composeR, $author$project$Frontend$RunBot$PauseBotKeysPopup, $author$project$Frontend$RunBot$UserInputEnterConfigureSessionPopup),
					pauseBotKeysElement),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$author$project$Frontend$Visuals$buttonElement,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignLeft]),
							{
								bo: false,
								lA: $mdgriffith$elm_ui$Element$text('Reset'),
								by: $elm$core$Maybe$Just(
									$author$project$Frontend$RunBot$UserInputEnterConfigureSessionPopup(
										$author$project$Frontend$RunBot$PauseBotKeysPopup(
											_Utils_update(
												dialogState,
												{
													bt: $author$project$Frontend$RunBot$keyNamesTextInputFromKeyCodes($author$project$BotConfig$defaultPlaySessionConfig.me)
												}))))
							}),
							A2(
							$author$project$Frontend$Visuals$buttonElement,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignRight]),
							{
								bo: $elm_community$result_extra$Result$Extra$isErr(parseResult),
								lA: $mdgriffith$elm_ui$Element$text('Save'),
								by: $elm$core$Result$toMaybe(
									A2(
										$elm$core$Result$map,
										function (parsedKeyCodes) {
											return $author$project$Frontend$RunBot$UserInputSetPlaySessionConfig(
												_Utils_update(
													sessionConfiguration,
													{me: parsedKeyCodes}));
										},
										parseResult))
							})
						]))
				]));
	});
var $author$project$Frontend$View$integerOffsetButtons = function (eventFromButtonWeight) {
	var buttonFromWeight = function (buttonWeight) {
		var signText = (buttonWeight < 0) ? '-' : '+';
		return A2(
			$author$project$Frontend$Visuals$buttonElement,
			_List_Nil,
			{
				bo: false,
				lA: $mdgriffith$elm_ui$Element$text(
					signText + (' ' + $elm$core$String$fromInt(
						$elm$core$Basics$abs(buttonWeight)))),
				by: $elm$core$Maybe$Just(
					eventFromButtonWeight(buttonWeight))
			});
	};
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$List$map(buttonFromWeight),
		$mdgriffith$elm_ui$Element$row(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
				])));
};
var $author$project$Frontend$RunBot$viewSessionLengthLimitDialog = F2(
	function (dialogState, configureSessionState) {
		var sessionConfiguration = configureSessionState.mF;
		var isNegative = $elm$core$Basics$gt(0);
		var eventFromOffset = function (inputOffset) {
			return $author$project$Frontend$RunBot$UserInputEnterConfigureSessionPopup(
				$author$project$Frontend$RunBot$SessionLengthLimitPopup(
					_Utils_update(
						dialogState,
						{
							aS: A2(
								$elm$core$Basics$max,
								0,
								A2($elm$core$Basics$min, (3 * 24) * 60, dialogState.aS + inputOffset))
						})));
		};
		var currentHours = (dialogState.aS / 60) | 0;
		var currentMinutes = dialogState.aS - (currentHours * 60);
		var unitsRows = _List_fromArray(
			[
				{
				fm: _List_fromArray(
					[-10, -1, 1, 10]),
				dJ: currentHours,
				cZ: 60,
				c_: 'Hours'
			},
				{
				fm: _List_fromArray(
					[-10, -1, 1, 10]),
				dJ: currentMinutes,
				cZ: 1,
				c_: 'Minutes'
			}
			]);
		var inputsElement = A2(
			$mdgriffith$elm_ui$Element$table,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					$author$project$Frontend$Visuals$userSelectNone
				]),
			{
				kv: _List_fromArray(
					[
						{
						aw: $mdgriffith$elm_ui$Element$none,
						eG: function (inputRowConfig) {
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerY,
										A2($mdgriffith$elm_ui$Element$paddingXY, $author$project$Frontend$Visuals$defaultFontSize, 0)
									]),
								$mdgriffith$elm_ui$Element$text(inputRowConfig.c_));
						},
						u: $mdgriffith$elm_ui$Element$shrink
					},
						{
						aw: $mdgriffith$elm_ui$Element$none,
						eG: function (inputRowConfig) {
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$centerX]),
								A2(
									$author$project$Frontend$View$integerOffsetButtons,
									A2(
										$elm$core$Basics$composeR,
										$elm$core$Basics$mul(inputRowConfig.cZ),
										eventFromOffset),
									A2($elm$core$List$filter, isNegative, inputRowConfig.fm)));
						},
						u: $mdgriffith$elm_ui$Element$shrink
					},
						{
						aw: $mdgriffith$elm_ui$Element$none,
						eG: function (inputRowConfig) {
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$alignRight,
										$mdgriffith$elm_ui$Element$centerY,
										A2($mdgriffith$elm_ui$Element$paddingXY, $author$project$Frontend$Visuals$defaultFontSize, 0)
									]),
								$mdgriffith$elm_ui$Element$text(
									$elm$core$String$fromInt(inputRowConfig.dJ)));
						},
						u: $mdgriffith$elm_ui$Element$shrink
					},
						{
						aw: $mdgriffith$elm_ui$Element$none,
						eG: function (inputRowConfig) {
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$centerX]),
								A2(
									$author$project$Frontend$View$integerOffsetButtons,
									A2(
										$elm$core$Basics$composeR,
										$elm$core$Basics$mul(inputRowConfig.cZ),
										eventFromOffset),
									A2(
										$elm$core$List$filter,
										A2($elm$core$Basics$composeR, isNegative, $elm$core$Basics$not),
										inputRowConfig.fm)));
						},
						u: $mdgriffith$elm_ui$Element$shrink
					}
					]),
				kF: unitsRows
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
				]),
			_List_fromArray(
				[
					$author$project$Frontend$RunBot$guideParagraphFromElements(
					$elm$core$List$singleton(
						$mdgriffith$elm_ui$Element$text(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									['The BotLab client automatically enforces a limit for the session duration.', 'If nothing else stops the bot earlier, the framework will stop the bot and finish the session when reaching this duration.']))))),
					inputsElement,
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$author$project$Frontend$Visuals$buttonElement,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignLeft]),
							{
								bo: false,
								lA: $mdgriffith$elm_ui$Element$text('Reset'),
								by: $elm$core$Maybe$Just(
									$author$project$Frontend$RunBot$UserInputEnterConfigureSessionPopup(
										$author$project$Frontend$RunBot$SessionLengthLimitPopup(
											_Utils_update(
												dialogState,
												{aS: $author$project$BotConfig$defaultPlaySessionConfig.mG}))))
							}),
							A2(
							$author$project$Frontend$Visuals$buttonElement,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignRight]),
							{
								bo: false,
								lA: $mdgriffith$elm_ui$Element$text('Save'),
								by: $elm$core$Maybe$Just(
									$author$project$Frontend$RunBot$UserInputSetPlaySessionConfig(
										_Utils_update(
											sessionConfiguration,
											{mG: dialogState.aS})))
							})
						]))
				]));
	});
var $author$project$Frontend$RunBot$viewConfigureSessionPopup = F4(
	function (popup, viewState, configureSessionState, selectedBot) {
		var closeButtonElement = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size((($author$project$Frontend$Visuals$defaultFontSize * 3) / 2) | 0),
					$mdgriffith$elm_ui$Element$centerY
				]),
			$author$project$Frontend$Visuals$popupCloseButton(
				{fA: $author$project$Frontend$RunBot$UserInputCancelConfigureSessionPopup, jg: 'Cancel'}));
		var _v0 = function () {
			switch (popup.$) {
				case 0:
					var dialogState = popup.a;
					return _Utils_Tuple2(
						'Bot Settings',
						A4($author$project$Frontend$RunBot$viewBotSettingsDialog, dialogState, viewState, configureSessionState, selectedBot));
				case 1:
					var dialogState = popup.a;
					return _Utils_Tuple2(
						'Pause Bot Keys',
						A2($author$project$Frontend$RunBot$viewPauseBotKeysDialog, dialogState, configureSessionState));
				default:
					var dialogState = popup.a;
					return _Utils_Tuple2(
						'Session Length Limit',
						A2($author$project$Frontend$RunBot$viewSessionLengthLimitDialog, dialogState, configureSessionState));
			}
		}();
		var popupTitle = _v0.a;
		var dialogElement = _v0.b;
		var foregroundElement = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($author$project$Frontend$Visuals$backgroundColor),
					$mdgriffith$elm_ui$Element$alignBottom,
					$mdgriffith$elm_ui$Element$Border$roundEach(
					{kg: 0, kh: 0, np: 20, nq: 20})
				]),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$padding($author$project$Frontend$Visuals$defaultFontSize),
						$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize * 2)
							]),
						_List_fromArray(
							[
								closeButtonElement,
								A2(
								$mdgriffith$elm_ui$Element$el,
								A2(
									$elm$core$List$cons,
									$author$project$Frontend$Visuals$userSelectNone,
									$author$project$Frontend$Visuals$headingAttributes(3)),
								$mdgriffith$elm_ui$Element$text(popupTitle))
							])),
						$author$project$Frontend$RunBot$greySeparatorElementFromHeight(2),
						dialogElement
					])));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
					$mdgriffith$elm_ui$Element$Background$color(
					A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.6)),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'backdrop-filter', 'blur(1px)')),
					$mdgriffith$elm_ui$Element$inFront(foregroundElement)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Events$onClick($author$project$Frontend$RunBot$UserInputCancelConfigureSessionPopup)
						]),
					_List_Nil)
				]));
	});
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$plus = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'plus',
	_Utils_Tuple2(448, 512),
	_Utils_Tuple2('M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32V224H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H192V432c0 17.7 14.3 32 32 32s32-14.3 32-32V288H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$plus = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$plus);
var $author$project$Frontend$RunBot$viewPauseBotKeysElement = function (pauseBotKeyCodes) {
	var plusElement = A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size($author$project$Frontend$Visuals$defaultFontSize),
				$mdgriffith$elm_ui$Element$padding(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
			]),
		$mdgriffith$elm_ui$Element$html(
			$lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Solid$plus)));
	var pauseBotKeyElementFromKeyCode = function (keyCode) {
		var displayText = A2(
			$elm$core$Maybe$withDefault,
			'key code ' + $elm$core$String$fromInt(keyCode),
			$author$project$Frontend$RunBot$displayNameFromVirtualKeyCode(keyCode));
		var backgroundColor = A3($mdgriffith$elm_ui$Element$rgb, 0.25, 0.25, 0.25);
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
					$mdgriffith$elm_ui$Element$Background$color(backgroundColor),
					$mdgriffith$elm_ui$Element$Border$rounded(3)
				]),
			$mdgriffith$elm_ui$Element$text(displayText));
	};
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$author$project$Frontend$Visuals$userSelectNone
			]),
		A2(
			$elm$core$List$intersperse,
			plusElement,
			A2(
				$elm$core$List$map,
				pauseBotKeyElementFromKeyCode,
				$elm$core$Set$toList(
					$elm$core$Set$fromList(pauseBotKeyCodes)))));
};
var $author$project$Frontend$RunBot$viewConfigureSessionLoadBotOk = F3(
	function (viewState, state, selectedBot) {
		var startPlayButton = A2(
			$author$project$Frontend$Visuals$buttonElement,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX]),
			{
				bo: false,
				lA: A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Element$paddingXY, $author$project$Frontend$Visuals$defaultFontSize * 2, ($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
						]),
					$mdgriffith$elm_ui$Element$text('Start Play Session')),
				by: $elm$core$Maybe$Just(
					$author$project$Frontend$RunBot$UserInputStartPlaySessionEvent(
						{bE: false}))
			});
		var sessionConfiguration = state.mF;
		var sessionLengthLimitHours = (sessionConfiguration.mG / 60) | 0;
		var sessionLengthLimitMinutesInHour = sessionConfiguration.mG - (sessionLengthLimitHours * 60);
		var popupElement = A2(
			$elm$core$Maybe$map,
			A2(
				$elm$core$Basics$composeR,
				$author$project$Frontend$RunBot$viewConfigureSessionPopup,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Basics$apR(viewState),
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Basics$apR(state),
						$elm$core$Basics$apR(selectedBot)))),
			state.kx);
		var onlineSessionElement = A2(
			$mdgriffith$elm_ui$Element$map,
			$author$project$Frontend$RunBot$UserInputSetPlaySessionConfig,
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$radio,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
							]),
						{
							lA: $mdgriffith$elm_ui$Element$Input$labelHidden('online session enabled'),
							lZ: function (onlineEnabled) {
								return _Utils_update(
									sessionConfiguration,
									{l2: onlineEnabled});
							},
							hE: _List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$option,
									false,
									A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$Font$bold]),
												$mdgriffith$elm_ui$Element$text('offline')),
												$author$project$Frontend$RunBot$guideParagraphFromElements(
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('Start an offline session limited to fifteen minutes.')
													]))
											]))),
									A2(
									$mdgriffith$elm_ui$Element$Input$option,
									true,
									A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$Font$bold]),
												$mdgriffith$elm_ui$Element$text('online')),
												$author$project$Frontend$RunBot$guideParagraphFromElements(
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('Connect to the BotLab Reactor and start an online session.')
													]))
											])))
								]),
							iF: $elm$core$Maybe$Just(sessionConfiguration.l2)
						}),
						$author$project$Frontend$RunBot$guideParagraphFromElements(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('To learn more about online sessions, see '),
								A2(
								$author$project$Frontend$Visuals$linkElementFromHref,
								{lX: true},
								$author$project$Frontend$View$guideOnlineSessionUrl)
							]))
					])));
		var inputFocusSchedulingElement = A2(
			$mdgriffith$elm_ui$Element$map,
			$author$project$Frontend$RunBot$UserInputSetPlaySessionConfig,
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$radio,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
							]),
						{
							lA: $mdgriffith$elm_ui$Element$Input$labelHidden('disable input focus scheduling'),
							lZ: function (disableScheduling) {
								return _Utils_update(
									sessionConfiguration,
									{kT: disableScheduling});
							},
							hE: _List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$option,
									false,
									A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$Font$bold]),
												$mdgriffith$elm_ui$Element$text('enabled'))
											]))),
									A2(
									$mdgriffith$elm_ui$Element$Input$option,
									true,
									A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$Font$bold]),
												$mdgriffith$elm_ui$Element$text('disabled'))
											])))
								]),
							iF: $elm$core$Maybe$Just(sessionConfiguration.kT)
						}),
						$author$project$Frontend$RunBot$guideParagraphFromElements(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('Coordination with other bot instances on the same (virtual) machine. To learn more about input focus scheduling, see '),
								A2(
								$author$project$Frontend$Visuals$linkElementFromHref,
								{lX: true},
								$author$project$Frontend$View$guideInputFocusSchedulingUrl)
							]))
					])));
		var frameworkElement = function () {
			var frameworkLinkElements = function () {
				var _v0 = selectedBot.bB.aO;
				if (_v0.$ === 1) {
					return _List_Nil;
				} else {
					var frameworkId = _v0.a;
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(' ('),
							A2(
							$author$project$Frontend$Visuals$linkElementFromHref,
							{lX: true},
							$author$project$Frontend$View$catalogLinkShortFromArtifactId(frameworkId)),
							$mdgriffith$elm_ui$Element$text(')')
						]);
				}
			}();
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$alignLeft, $author$project$Frontend$Visuals$userSelectText]),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$text('Framework: '),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$text(
							A2(
								$elm$core$Maybe$withDefault,
								'Nothing',
								A2(
									$elm$core$Maybe$map,
									$elm$core$String$left(10),
									selectedBot.bB.aO))),
						frameworkLinkElements)));
		}();
		var editButtonFromClickEvent = function (clickEvent) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$underline,
						$mdgriffith$elm_ui$Element$Font$bold,
						$mdgriffith$elm_ui$Element$Events$onClick(clickEvent),
						$mdgriffith$elm_ui$Element$alignRight,
						$mdgriffith$elm_ui$Element$pointer,
						$author$project$Frontend$Visuals$userSelectNone
					]),
				$mdgriffith$elm_ui$Element$text('Edit'));
		};
		var currentSessionLengthLimitTextMinutes = $elm$core$String$fromInt(sessionLengthLimitMinutesInHour) + ' minute(s)';
		var currentSessionLengthLimitText = (sessionLengthLimitHours < 1) ? currentSessionLengthLimitTextMinutes : A2(
			$elm$core$String$join,
			'',
			$elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						[
							$elm$core$String$fromInt(sessionLengthLimitHours),
							' hour(s)'
						]),
						(sessionLengthLimitMinutesInHour < 1) ? _List_Nil : _List_fromArray(
						[' and ', currentSessionLengthLimitTextMinutes])
					])));
		var currentSessionLengthLimitElement = $mdgriffith$elm_ui$Element$text(currentSessionLengthLimitText);
		var sessionLengthLimitElement = A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
				]),
			_List_fromArray(
				[
					currentSessionLengthLimitElement,
					editButtonFromClickEvent(
					$author$project$Frontend$RunBot$UserInputEnterConfigureSessionPopup(
						$author$project$Frontend$RunBot$SessionLengthLimitPopup(
							{aS: sessionConfiguration.mG})))
				]));
		var currentPauseBotKeysElement = $author$project$Frontend$RunBot$viewPauseBotKeysElement(sessionConfiguration.me);
		var pauseBotKeysElement = A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
				]),
			_List_fromArray(
				[
					currentPauseBotKeysElement,
					editButtonFromClickEvent(
					$author$project$Frontend$RunBot$UserInputEnterConfigureSessionPopup(
						$author$project$Frontend$RunBot$PauseBotKeysPopup(
							{
								bt: $author$project$Frontend$RunBot$keyNamesTextInputFromKeyCodes(sessionConfiguration.me)
							})))
				]));
		var currentBotSettingsResultElement = A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px($author$project$Frontend$Visuals$defaultFontSize * 5))
				]),
			A3(
				$author$project$Frontend$RunBot$viewBotSettingsDialogTestResult,
				{
					ah: {aD: sessionConfiguration.ke, s: state.lp}
				},
				viewState,
				selectedBot));
		var currentBotSettingsElement = (sessionConfiguration.ke === '') ? A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$italic, $author$project$Frontend$Visuals$userSelectNone]),
			$mdgriffith$elm_ui$Element$text('Default settings (empty)')) : A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.1, 0.1, 0.1)),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(110)),
					$mdgriffith$elm_ui$Element$scrollbarY,
					$author$project$Frontend$Visuals$mitigate_2024_09_scrollbar_issue
				]),
			$mdgriffith$elm_ui$Element$html(
				A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'white-space', 'pre'),
							A2($elm$html$Html$Attributes$style, 'font-family', 'monospace, monospace'),
							A2($elm$html$Html$Attributes$style, 'font-size', '100%'),
							A2($elm$html$Html$Attributes$style, 'line-height', 'normal')
						]),
					$elm$core$List$singleton(
						$elm$html$Html$text(sessionConfiguration.ke)))));
		var configSectionElement = function (configSectionConfig) {
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
					]),
				_List_fromArray(
					[
						$author$project$Frontend$RunBot$greySeparatorElementFromHeight(3),
						A2(
						$mdgriffith$elm_ui$Element$el,
						A2(
							$elm$core$List$cons,
							$author$project$Frontend$Visuals$userSelectNone,
							$author$project$Frontend$Visuals$headingAttributes(3)),
						$mdgriffith$elm_ui$Element$text(configSectionConfig.jg)),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$padding($author$project$Frontend$Visuals$defaultFontSize)
							]),
						configSectionConfig.bv)
					]));
		};
		var botSettingsElement = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
				]),
			_List_fromArray(
				[
					$author$project$Frontend$RunBot$guideParagraphFromElements(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Settings to customize the bot\'s behavior in this session.')
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
						]),
					_List_fromArray(
						[
							currentBotSettingsElement,
							editButtonFromClickEvent(
							$author$project$Frontend$RunBot$UserInputEnterConfigureSessionPopup(
								$author$project$Frontend$RunBot$BotSettingsPopup(
									{
										ah: {aD: sessionConfiguration.ke, s: viewState.s}
									})))
						])),
					currentBotSettingsResultElement
				]));
		var authorsElements = $author$project$Frontend$RunBot$viewBotAuthorsElements(selectedBot.bB);
		var authorsElement = _Utils_eq(authorsElements, _List_Nil) ? $mdgriffith$elm_ui$Element$none : A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$alignLeft, $author$project$Frontend$Visuals$userSelectText]),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$text('Author: '),
				A2(
					$elm$core$List$intersperse,
					$mdgriffith$elm_ui$Element$text(' , '),
					authorsElements)));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
					$mdgriffith$elm_ui$Element$inFront(
					A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$none, popupElement))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignLeft, $author$project$Frontend$Visuals$userSelectNone]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Catalog link when public: '),
							A2(
							$author$project$Frontend$Visuals$linkElementFromHref,
							{lX: true},
							$author$project$Frontend$View$catalogLinkShortFromArtifactId(selectedBot.av.bj))
						])),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$scrollbarY,
							$mdgriffith$elm_ui$Element$padding(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
							$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
							$author$project$Frontend$Visuals$mitigate_2024_09_scrollbar_issue
						]),
					_List_fromArray(
						[
							frameworkElement,
							authorsElement,
							A2(
							$mdgriffith$elm_ui$Element$el,
							A2(
								$elm$core$List$cons,
								$author$project$Frontend$Visuals$userSelectNone,
								$author$project$Frontend$Visuals$headingAttributes(3)),
							$mdgriffith$elm_ui$Element$text('Bot Description')),
							$author$project$Frontend$RunBot$viewBotDescriptionText(selectedBot),
							configSectionElement(
							{bv: botSettingsElement, jg: 'Bot Settings'}),
							configSectionElement(
							{bv: onlineSessionElement, jg: 'Online Session'}),
							configSectionElement(
							{bv: pauseBotKeysElement, jg: 'Pause Bot Keys'}),
							configSectionElement(
							{bv: sessionLengthLimitElement, jg: 'Session Length Limit'}),
							configSectionElement(
							{bv: inputFocusSchedulingElement, jg: 'Input Focus Scheduling'}),
							$author$project$Frontend$RunBot$greySeparatorElementFromHeight(4),
							startPlayButton
						]))
				]));
	});
var $author$project$Frontend$Visuals$viewTextWithHtmlStyles = function (styles) {
	return A2(
		$elm$core$Basics$composeR,
		$elm$html$Html$text,
		A2(
			$elm$core$Basics$composeR,
			$mdgriffith$elm_ui$Element$html,
			$mdgriffith$elm_ui$Element$el(
				A2(
					$elm$core$List$map,
					function (_v0) {
						var property = _v0.a;
						var value = _v0.b;
						return $mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, property, value));
					},
					styles))));
};
var $author$project$Frontend$Visuals$viewTextWithTypicalPreformattedStyle = $author$project$Frontend$Visuals$viewTextWithHtmlStyles(
	_List_fromArray(
		[
			_Utils_Tuple2('white-space', 'pre-wrap'),
			_Utils_Tuple2('word-break', 'break-word'),
			_Utils_Tuple2('line-height', 'normal')
		]));
var $author$project$Frontend$RunBot$viewConfigureSession = F2(
	function (viewState, state) {
		var sourceElement = function () {
			var _v3 = state.mC;
			switch (_v3.$) {
				case 0:
					var inputPath = _v3.a;
					var botSourceRequestedPath = A2($elm$core$Maybe$withDefault, 'error-no-requested-path', state.kf);
					var originalInputElement = _Utils_eq(inputPath, botSourceRequestedPath) ? $mdgriffith$elm_ui$Element$none : A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('('),
								$author$project$Frontend$View$botSourcePathLinkElement(inputPath),
								$mdgriffith$elm_ui$Element$text(')')
							]));
					return A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								$author$project$Frontend$View$botSourcePathLinkElement(botSourceRequestedPath),
								$mdgriffith$elm_ui$Element$text(' '),
								originalInputElement
							]));
				case 1:
					return $mdgriffith$elm_ui$Element$text('bundle');
				default:
					var fromLiteral = _v3.a;
					return $mdgriffith$elm_ui$Element$text(fromLiteral.eg);
			}
		}();
		var _v0 = function () {
			var _v2 = state.g7;
			if (_v2.$ === 1) {
				return _Utils_Tuple3(
					'Loading Bot',
					_Utils_Tuple2('Loading', false),
					$mdgriffith$elm_ui$Element$text('This can take a few seconds...'));
			} else {
				if (_v2.a.$ === 1) {
					var error = _v2.a.a;
					return _Utils_Tuple3(
						'Loading Bot',
						_Utils_Tuple2('Loading', false),
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$errorColor)
								]),
							$author$project$Frontend$Visuals$viewTextWithTypicalPreformattedStyle('Failed to load:\n' + error)));
				} else {
					var loadOk = _v2.a.a;
					return _Utils_Tuple3(
						'Configure Session',
						_Utils_Tuple2(
							'Selected bot ' + A2($elm$core$String$left, 10, loadOk.av.bj),
							true),
						A3($author$project$Frontend$RunBot$viewConfigureSessionLoadBotOk, viewState, state, loadOk));
				}
			}
		}();
		var title = _v0.a;
		var _v1 = _v0.b;
		var sourceLabel = _v1.a;
		var loadingCompleted = _v1.b;
		var mainContent = _v0.c;
		return {
			ff: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX, $author$project$Frontend$Visuals$userSelectNone]),
						A2(
							$mdgriffith$elm_ui$Element$paragraph,
							$author$project$Frontend$Visuals$headingAttributes(2),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text(title)
								]))),
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$alignLeft, $author$project$Frontend$Visuals$userSelectNone]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(sourceLabel),
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$alpha(
										loadingCompleted ? 0.5 : 1)
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(' from '),
										sourceElement
									]))
							])),
						mainContent
					])),
			jg: $elm$core$Maybe$Just('Configure Session')
		};
	});
var $author$project$Frontend$RunBot$UserInputEnterOnlineKeyEvent = function (a) {
	return {$: 10, a: a};
};
var $author$project$Frontend$RunBot$inputOnlineKeyElementId = 'input-online-key';
var $author$project$Frontend$Visuals$onKeyDownEnter = function (msg) {
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		A2(
			$elm$html$Html$Events$on,
			'keydown',
			A2(
				$elm$json$Json$Decode$andThen,
				function (key) {
					return (key === 'Enter') ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('Not the enter key');
				},
				A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string))));
};
var $author$project$Frontend$RunBot$viewEnterOnlineKey = function (state) {
	var userInputTestKey = $author$project$Frontend$RunBot$UserInputStartPlaySessionEvent(
		{bE: false});
	var testResultElement = function () {
		var _v0 = state.bH;
		if (_v0.$ === 1) {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			if (!_v0.a.$) {
				return A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Testing this key. This might take a few seconds...')
						]));
			} else {
				if (!_v0.a.b.$) {
					var _v1 = _v0.a;
					return $mdgriffith$elm_ui$Element$none;
				} else {
					var _v2 = _v0.a;
					var error = _v2.b.a;
					return A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$errorColor)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('The given key cannot be used to start an online session: ' + error)
							]));
				}
			}
		}
	}();
	return {
		ff: A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX, $author$project$Frontend$Visuals$userSelectNone]),
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						$author$project$Frontend$Visuals$headingAttributes(2),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('Confirm Online Session')
							]))),
					A2(
					$mdgriffith$elm_ui$Element$textColumn,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$author$project$Frontend$Visuals$userSelectNone
						]),
					A2(
						$elm$core$List$map,
						$mdgriffith$elm_ui$Element$paragraph(_List_Nil),
						_List_fromArray(
							[
								_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('You have chosen the option for an '),
									$author$project$Frontend$Visuals$linkElementFromUrlAndTextLabel(
									{bW: 'online session', lX: true, eC: $author$project$Frontend$View$guideOnlineSessionUrl}),
									$mdgriffith$elm_ui$Element$text('. Please enter an online session key below.')
								]),
								_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('(To get keys for your account, open '),
									A2(
									$author$project$Frontend$Visuals$linkElementFromHref,
									{lX: true},
									'https://reactor.botlab.org'),
									$mdgriffith$elm_ui$Element$text(' and scroll to \'Online play session keys\')')
								])
							]))),
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color($author$project$Frontend$Visuals$backgroundColor),
							$author$project$Frontend$Visuals$onKeyDownEnter(userInputTestKey),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$id($author$project$Frontend$RunBot$inputOnlineKeyElementId)),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{
						lA: $mdgriffith$elm_ui$Element$Input$labelHidden('online session key'),
						lZ: $author$project$Frontend$RunBot$UserInputEnterOnlineKeyEvent,
						mf: $elm$core$Maybe$Just(
							A2(
								$mdgriffith$elm_ui$Element$Input$placeholder,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text('online session key'))),
						aD: state.bq
					}),
					A2(
					$author$project$Frontend$Visuals$buttonElement,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight]),
					{
						bo: false,
						lA: $mdgriffith$elm_ui$Element$text('Start Online Session With This Key'),
						by: $elm$core$Maybe$Just(
							$author$project$Frontend$RunBot$UserInputStartPlaySessionEvent(
								{bE: false}))
					}),
					testResultElement,
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$padding($author$project$Frontend$Visuals$defaultFontSize)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[$author$project$Frontend$Visuals$userSelectNone]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Don\'t have a key at hand right now? You can also start the selected bot in an offline session.')
								])),
							A2(
							$author$project$Frontend$Visuals$buttonElement,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignRight]),
							{
								bo: false,
								lA: $mdgriffith$elm_ui$Element$text('Start Offline Session'),
								by: $elm$core$Maybe$Just(
									$author$project$Frontend$RunBot$UserInputStartPlaySessionEvent(
										{bE: true}))
							})
						]))
				])),
		jg: $elm$core$Maybe$Just('Confirm Online Session')
	};
};
var $author$project$Frontend$Visuals$abbreviateArtifactIdForDisplay = function (originalId) {
	return A2($elm$core$String$left, 10, originalId) + '...';
};
var $author$project$Frontend$RunBot$viewLinkToCatalogFromArtifactId = function (artifactId) {
	return $author$project$Frontend$Visuals$linkElementFromUrlAndTextLabel(
		{
			bW: $author$project$Frontend$Visuals$abbreviateArtifactIdForDisplay(artifactId),
			lX: true,
			eC: $author$project$Frontend$View$catalogLinkFromArtifactId(artifactId)
		});
};
var $author$project$Frontend$RunBot$BotDescriptionStage = 0;
var $author$project$Frontend$RunBot$UserInputGetHelpWithBotSessionEvent = function (a) {
	return {$: 9, a: a};
};
var $author$project$Frontend$RunBot$UserInputEnterDevToolsSessionEvent = {$: 11};
var $author$project$Frontend$RunBot$enterDevToolsButton = A2(
	$author$project$Frontend$Visuals$buttonElement,
	_List_Nil,
	{
		bo: false,
		lA: $mdgriffith$elm_ui$Element$text('Enter DevTools and Inspect Session'),
		by: $elm$core$Maybe$Just($author$project$Frontend$RunBot$UserInputEnterDevToolsSessionEvent)
	});
var $author$project$Frontend$Visuals$indentElementAttribute = function (amount) {
	return $mdgriffith$elm_ui$Element$paddingEach(
		{cp: 0, cV: amount, c9: 0, $7: 0});
};
var $author$project$Frontend$RunBot$UserInputContinueBotEvent = {$: 7};
var $author$project$Frontend$RunBot$sessionControlsElement = F2(
	function (playSessionConfig, buttonsEnabled) {
		var pauseBotKeyLabelFromCode = function (keyCode) {
			return A2(
				$elm$core$Maybe$withDefault,
				'Code ' + $elm$core$String$fromInt(keyCode),
				$author$project$Frontend$RunBot$displayNameFromVirtualKeyCode(keyCode));
		};
		var pauseBotButton = A2(
			$author$project$Frontend$Visuals$buttonElement,
			_List_Nil,
			{
				bo: !buttonsEnabled.ej,
				lA: $mdgriffith$elm_ui$Element$text(
					'Pause Bot (' + (A2(
						$elm$core$String$join,
						' + ',
						A2($elm$core$List$map, pauseBotKeyLabelFromCode, playSessionConfig.me)) + ')')),
				by: $elm$core$Maybe$Just($author$project$Frontend$RunBot$UserInputPauseBotEvent)
			});
		var endSessionButton = A2(
			$author$project$Frontend$Visuals$buttonElement,
			_List_Nil,
			{
				bo: !buttonsEnabled.ev,
				lA: $mdgriffith$elm_ui$Element$text('End Session'),
				by: $elm$core$Maybe$Just($author$project$Frontend$RunBot$UserInputEndSessionEvent)
			});
		var continueBotButton = A2(
			$author$project$Frontend$Visuals$buttonElement,
			_List_Nil,
			{
				bo: !buttonsEnabled.dG,
				lA: $mdgriffith$elm_ui$Element$text('Continue Bot'),
				by: $elm$core$Maybe$Just($author$project$Frontend$RunBot$UserInputContinueBotEvent)
			});
		return A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					endSessionButton,
					pauseBotButton,
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$alignRight]),
					continueBotButton)
				]));
	});
var $author$project$Frontend$RunBot$ReportOrShareSessionStage = 1;
var $mdgriffith$elm_ui$Element$download = F2(
	function (attrs, _v0) {
		var url = _v0.eC;
		var label = _v0.lA;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$download('')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cD),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.aK),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Frontend$View$linkToBotLabForum = $author$project$Frontend$Visuals$linkElementFromUrlAndTextLabel(
	{bW: 'online forum', lX: true, eC: 'https://forum.botlab.org'});
var $author$project$Frontend$RunBot$viewBotAuthorsElementsWithSeparatorText = A2(
	$elm$core$Basics$composeR,
	$author$project$Frontend$RunBot$viewBotAuthorsElements,
	$elm$core$List$intersperse(
		$mdgriffith$elm_ui$Element$text(' , ')));
var $author$project$Frontend$RunBot$viewPlaySessionGetHelp = F2(
	function (stage, state) {
		var botIdDisplayText = A2($elm$core$String$left, 10, state.ae.av.bj);
		if (!stage) {
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX, $author$project$Frontend$Visuals$userSelectNone]),
						A2(
							$mdgriffith$elm_ui$Element$paragraph,
							$author$project$Frontend$Visuals$headingAttributes(3),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Get Help With This Session')
								]))),
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[$author$project$Frontend$Visuals$userSelectNone]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('Do you see a problem that is specific to bot ' + (botIdDisplayText + ('? Below is the description included with that bot. It might contain instructions to help with setup and resolving issues with ' + (botIdDisplayText + '.'))))
							])),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$scrollbarY,
								$author$project$Frontend$Visuals$mitigate_2024_09_scrollbar_issue
							]),
						$author$project$Frontend$RunBot$viewBotDescriptionText(state.ae)),
						A2(
						$author$project$Frontend$Visuals$buttonElement,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$alignRight]),
						{
							bo: false,
							lA: $mdgriffith$elm_ui$Element$text('Report Problem or Share Session'),
							by: $elm$core$Maybe$Just(
								$author$project$Frontend$RunBot$UserInputGetHelpWithBotSessionEvent(1))
						})
					]));
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX, $author$project$Frontend$Visuals$userSelectNone]),
						A2(
							$mdgriffith$elm_ui$Element$paragraph,
							$author$project$Frontend$Visuals$headingAttributes(3),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Report Problem or Share Session')
								]))),
						A2(
						$mdgriffith$elm_ui$Element$textColumn,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
							]),
						A2(
							$elm$core$List$map,
							$mdgriffith$elm_ui$Element$paragraph(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									])),
							_List_fromArray(
								[
									_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('Here you can export the data to report a problem or share information about the current session with others. '),
										$mdgriffith$elm_ui$Element$text('(For past play sessions already finished, you would instead use the DevTools to export the recording)')
									]),
									_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('You can use this information when contacting the author of ' + (botIdDisplayText + ' or to ask for help on the ')),
										$author$project$Frontend$View$linkToBotLabForum
									]),
									_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_Nil,
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$text('Author of ' + (botIdDisplayText + ': ')),
											$author$project$Frontend$RunBot$viewBotAuthorsElementsWithSeparatorText(state.ae.bB)))
									])
								]))),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
								$mdgriffith$elm_ui$Element$padding(4)
							]),
						A2(
							$mdgriffith$elm_ui$Element$download,
							_List_Nil,
							{
								lA: A2(
									$author$project$Frontend$Visuals$buttonElement,
									_List_Nil,
									{
										bo: false,
										lA: $author$project$Frontend$View$exportButtonLabelFromText('Export summary of this session'),
										by: $elm$core$Maybe$Nothing
									}),
								eC: $author$project$Frontend$View$urlFromPath(
									_List_fromArray(
										['current-play-session', 'export-session-summary.json']))
							}))
					]));
		}
	});
var $author$project$Frontend$RunBot$viewSessionControlState = function (controlState) {
	switch (controlState.$) {
		case 0:
			return _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Running')
				]);
		case 1:
			return _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Paused')
				]);
		default:
			var finishedReason = controlState.a;
			return A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$text('Finished: '),
				function () {
					switch (finishedReason.$) {
						case 0:
							return _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Bot finished the session')
								]);
						case 1:
							return _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('User stopped the session')
								]);
						case 2:
							return _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Session has reached configured time limit')
								]);
						case 3:
							return _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Reached maximum duration for offline session. To run longer sessions, see '),
									A2(
									$author$project$Frontend$Visuals$linkElementFromHref,
									{lX: true},
									$author$project$Frontend$View$guideOnlineSessionUrl)
								]);
						case 4:
							var error = finishedReason.a;
							return _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Failed to continue online session:' + error)
								]);
						case 5:
							return _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Simulation complete')
								]);
						default:
							var exception = finishedReason.a;
							return _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Runtime exception: ' + exception)
								]);
					}
				}());
	}
};
var $author$project$Frontend$RunBot$viewPlaySessionStarted = F3(
	function (viewState, state, lastStatus) {
		var lastBotStepAgeSeconds = (($elm$time$Time$posixToMillis(viewState.s) - lastStatus.cT) / 1000) | 0;
		var statusDetailsElement = function () {
			var _v6 = state.mR.F.kZ;
			if (!_v6.$) {
				return $mdgriffith$elm_ui$Element$text(
					'Last bot step was ' + ($elm$core$String$fromInt(lastBotStepAgeSeconds) + (' seconds ago. ' + ($elm$core$String$fromInt(
						$elm$core$List$length(lastStatus.dj)) + ' tasks in progress.'))));
			} else {
				return $mdgriffith$elm_ui$Element$text(
					$elm$core$String$fromInt(lastStatus.c5) + ' events remaining in queue.');
			}
		}();
		var inputFocusSchedulingElement = function () {
			var _v3 = viewState.bZ;
			if (_v3.$ === 1) {
				return A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(
							A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.6)),
							$author$project$Frontend$Visuals$userSelectNone
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Searching other local instances...')
						]));
			} else {
				var _v4 = _v3.a;
				var localBotLabInstancesLastSnapshot = _v4.b;
				if (_Utils_eq(localBotLabInstancesLastSnapshot.hK, _List_Nil)) {
					return A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color(
								A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.6)),
								$author$project$Frontend$Visuals$userSelectNone
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('No other local instances - no scheduling required')
							]));
				} else {
					var schedulingText = function () {
						if (state.mR.F.kT) {
							return 'disabled by session config';
						} else {
							var _v5 = localBotLabInstancesLastSnapshot.iv;
							if (_v5.$ === 1) {
								return 'not required';
							} else {
								var schedulingInstanceContactInfo = _v5.a;
								return 'via pid ' + ($elm$core$String$fromInt(schedulingInstanceContactInfo.Q) + (_Utils_eq(schedulingInstanceContactInfo.Q, localBotLabInstancesLastSnapshot.dd.Q) ? ' (self)' : ''));
							}
						}
					}();
					var otherInstancesRequiringInputFocus = A2(
						$elm$core$List$filter,
						function ($) {
							return $.ih;
						},
						localBotLabInstancesLastSnapshot.hK);
					return A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color(
								A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.6)),
								$author$project$Frontend$Visuals$userSelectNone
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(
								$elm$core$String$fromInt(
									$elm$core$List$length(localBotLabInstancesLastSnapshot.hK)) + (' other local instances, with ' + ($elm$core$String$fromInt(
									$elm$core$List$length(otherInstancesRequiringInputFocus)) + (' requiring input focus - scheduling ' + schedulingText))))
							]));
				}
			}
		}();
		var belowControlsElement = function () {
			var _v2 = state.bM;
			if (_v2.$ === 1) {
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
						]),
					_List_fromArray(
						[
							A2(
							$author$project$Frontend$Visuals$buttonElement,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignRight]),
							{
								bo: false,
								lA: $mdgriffith$elm_ui$Element$text('Get Help With This Session'),
								by: $elm$core$Maybe$Just(
									$author$project$Frontend$RunBot$UserInputGetHelpWithBotSessionEvent(0))
							}),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$author$project$Frontend$Visuals$userSelectNone]),
									$mdgriffith$elm_ui$Element$text('Status text from bot')),
									A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$author$project$Frontend$Visuals$indentElementAttribute($author$project$Frontend$Visuals$defaultFontSize),
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Border$width(1),
													$mdgriffith$elm_ui$Element$Border$color(
													A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.3)),
													$mdgriffith$elm_ui$Element$Border$rounded(4),
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
													$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
												]),
											A2(
												$author$project$Frontend$Visuals$statusTextFromBotElement,
												{kX: true},
												lastStatus.co))
										]))
								]))
						]));
			} else {
				var getHelpStage = _v2.a;
				return A2($author$project$Frontend$RunBot$viewPlaySessionGetHelp, getHelpStage, state);
			}
		}();
		var _v0 = function () {
			var _v1 = lastStatus.cF;
			switch (_v1.$) {
				case 0:
					return _Utils_Tuple2(
						_List_fromArray(
							[statusDetailsElement]),
						A2(
							$author$project$Frontend$RunBot$sessionControlsElement,
							state.mR.F,
							{dG: false, ej: true, ev: true}));
				case 1:
					return _Utils_Tuple2(
						_List_fromArray(
							[statusDetailsElement]),
						A2(
							$author$project$Frontend$RunBot$sessionControlsElement,
							state.mR.F,
							{dG: true, ej: false, ev: true}));
				default:
					return _Utils_Tuple2(
						_List_Nil,
						A2(
							$mdgriffith$elm_ui$Element$wrappedRow,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[$author$project$Frontend$Visuals$userSelectNone]),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text('Session finished.')
										])),
									$author$project$Frontend$RunBot$enterDevToolsButton
								])));
			}
		}();
		var startedStatusDetailElements = _v0.a;
		var controlsElement = _v0.b;
		var statusElements = $elm$core$List$concat(
			_List_fromArray(
				[
					$author$project$Frontend$RunBot$viewSessionControlState(lastStatus.cF),
					_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alpha(0.6)
							]),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$text(' - '),
							startedStatusDetailElements))
					])
				]));
		return {
			cm: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
					]),
				_List_fromArray(
					[controlsElement, inputFocusSchedulingElement, belowControlsElement])),
			c$: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(' as '),
					$author$project$Frontend$View$onlineOfflineSessionLinkElement(lastStatus)
				]),
			df: statusElements
		};
	});
var $author$project$Frontend$RunBot$viewPlaySession = F2(
	function (viewState, state) {
		var _v0 = function () {
			var _v1 = state.mS;
			if (_v1.$ === 1) {
				return {
					cm: $mdgriffith$elm_ui$Element$none,
					c$: _List_Nil,
					df: _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Starting...')
						])
				};
			} else {
				if (_v1.a.b.$ === 1) {
					var _v2 = _v1.a;
					var error = _v2.b.a;
					return {
						cm: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$errorColor)
								]),
							$author$project$Frontend$Visuals$viewTextWithTypicalPreformattedStyle('Failed to start session:\n' + error)),
						c$: _List_Nil,
						df: _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('Failed to start')
							])
					};
				} else {
					var _v3 = _v1.a;
					var startOk = _v3.b.a;
					return A3(
						$author$project$Frontend$RunBot$viewPlaySessionStarted,
						viewState,
						state,
						A2(
							$elm$core$Maybe$withDefault,
							startOk,
							A2($elm$core$Maybe$map, $elm$core$Tuple$second, state.lC)));
				}
			}
		}();
		var statusElements = _v0.df;
		var offlineOnlineElements = _v0.c$;
		var belowStatusElement = _v0.cm;
		return {
			ff: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX, $author$project$Frontend$Visuals$userSelectNone]),
						A2(
							$mdgriffith$elm_ui$Element$paragraph,
							$author$project$Frontend$Visuals$headingAttributes(2),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Play Session ' + state.mR.bD)
								]))),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 3) | 0),
								$author$project$Frontend$Visuals$userSelectNone
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_Nil,
								$elm$core$List$concat(
									_List_fromArray(
										[
											offlineOnlineElements,
											_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(' using bot '),
												$author$project$Frontend$RunBot$viewLinkToCatalogFromArtifactId(state.ae.av.bj)
											])
										]))),
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[$author$project$Frontend$Visuals$userSelectNone]),
								$elm$core$List$concat(
									_List_fromArray(
										[
											_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Status: ')
											]),
											statusElements
										])))
							])),
						belowStatusElement
					])),
			jg: $elm$core$Maybe$Just(
				A2(
					$elm$core$String$join,
					' - ',
					_List_fromArray(
						[
							A2(
							$elm$core$String$join,
							' ',
							_List_fromArray(
								[
									'play',
									function () {
									var _v4 = state.mR.F.kZ;
									if (!_v4.$) {
										return 'live';
									} else {
										return 'sim';
									}
								}()
								])),
							'Bot ' + A2($elm$core$String$left, 10, state.ae.av.bj)
						])))
		};
	});
var $author$project$Frontend$RunBot$SelectBotFromBundle = function (a) {
	return {$: 1, a: a};
};
var $author$project$Frontend$RunBot$SelectBotFromLiteral = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $author$project$Frontend$RunBot$UserInputSelectBotEnterPath = function (a) {
	return {$: 0, a: a};
};
var $author$project$Frontend$RunBot$UserInputSelectBotEvent = function (a) {
	return {$: 1, a: a};
};
var $elm_community$list_extra$List$Extra$findIndexHelp = F3(
	function (index, predicate, list) {
		findIndexHelp:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$index = index + 1,
						$temp$predicate = predicate,
						$temp$list = xs;
					index = $temp$index;
					predicate = $temp$predicate;
					list = $temp$list;
					continue findIndexHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$findIndex = $elm_community$list_extra$List$Extra$findIndexHelp(0);
var $elm_community$list_extra$List$Extra$elemIndex = function (x) {
	return $elm_community$list_extra$List$Extra$findIndex(
		$elm$core$Basics$eq(x));
};
var $elm$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _v0) {
				var trues = _v0.a;
				var falses = _v0.b;
				return pred(x) ? _Utils_Tuple2(
					A2($elm$core$List$cons, x, trues),
					falses) : _Utils_Tuple2(
					trues,
					A2($elm$core$List$cons, x, falses));
			});
		return A3(
			$elm$core$List$foldr,
			step,
			_Utils_Tuple2(_List_Nil, _List_Nil),
			list);
	});
var $elm_community$list_extra$List$Extra$gatherWith = F2(
	function (testFn, list) {
		var helper = F2(
			function (scattered, gathered) {
				helper:
				while (true) {
					if (!scattered.b) {
						return $elm$core$List$reverse(gathered);
					} else {
						var toGather = scattered.a;
						var population = scattered.b;
						var _v1 = A2(
							$elm$core$List$partition,
							testFn(toGather),
							population);
						var gathering = _v1.a;
						var remaining = _v1.b;
						var $temp$scattered = remaining,
							$temp$gathered = A2(
							$elm$core$List$cons,
							_Utils_Tuple2(toGather, gathering),
							gathered);
						scattered = $temp$scattered;
						gathered = $temp$gathered;
						continue helper;
					}
				}
			});
		return A2(helper, list, _List_Nil);
	});
var $elm_community$list_extra$List$Extra$gatherEqualsBy = F2(
	function (extract, list) {
		return A2(
			$elm_community$list_extra$List$Extra$gatherWith,
			F2(
				function (a, b) {
					return _Utils_eq(
						extract(a),
						extract(b));
				}),
			list);
	});
var $author$project$Frontend$RunBot$inputSourcePathElementId = 'input-source-path';
var $author$project$Frontend$RunBot$viewDerivedFromRecentSessions = function (config) {
	var _v0 = A3(
		$elm$core$List$foldl,
		F2(
			function (_v1, aggregate) {
				var playSessionName = _v1.a;
				var maybePlaySession = _v1.b;
				if (maybePlaySession.$ === 1) {
					return A2(
						$elm$core$Tuple$mapSecond,
						$elm$core$List$cons(playSessionName),
						aggregate);
				} else {
					if (!maybePlaySession.a.$) {
						var loadingCompleteOk = maybePlaySession.a.a;
						return A2(
							$elm$core$Tuple$mapFirst,
							$elm$core$List$cons(
								A2($elm$core$Tuple$pair, playSessionName, loadingCompleteOk)),
							aggregate);
					} else {
						return aggregate;
					}
				}
			}),
		_Utils_Tuple2(_List_Nil, _List_Nil),
		A2(
			$elm$core$List$take,
			config.lE,
			$elm$core$List$reverse(
				A2(
					$elm$core$List$sortBy,
					$elm$core$Tuple$first,
					$elm$core$Dict$toList(config.cX)))));
	var recentPlaySessionsLoaded = _v0.a;
	var recentPlaySessionsLoading = _v0.b;
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
			]),
		_List_fromArray(
			[
				(_Utils_eq(recentPlaySessionsLoaded, _List_Nil) && _Utils_eq(recentPlaySessionsLoading, _List_Nil)) ? config.nx : config.ny(recentPlaySessionsLoaded),
				$elm$core$List$isEmpty(recentPlaySessionsLoading) ? $mdgriffith$elm_ui$Element$none : A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alpha(0.5),
						$mdgriffith$elm_ui$Element$padding(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
						$mdgriffith$elm_ui$Element$Font$center,
						$author$project$Frontend$Visuals$userSelectNone
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(
						'Loading from ' + ($elm$core$String$fromInt(
							$elm$core$List$length(recentPlaySessionsLoading)) + ' more recent play sessions...'))
					]))
			]));
};
var $elm_community$string_extra$String$Extra$ellipsis = F2(
	function (howLong, string) {
		return A3($elm_community$string_extra$String$Extra$ellipsisWith, howLong, '...', string);
	});
var $elm$core$String$lines = _String_lines;
var $author$project$Frontend$View$selectableAttributes = function (clickAttribute) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Events$onClick(clickAttribute),
			$mdgriffith$elm_ui$Element$Border$width(1),
			$mdgriffith$elm_ui$Element$Border$color(
			A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
			$mdgriffith$elm_ui$Element$mouseOver(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(
					A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.1)),
					$mdgriffith$elm_ui$Element$Border$color(
					A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.2))
				])),
			$mdgriffith$elm_ui$Element$pointer
		]);
};
var $author$project$Frontend$RunBot$viewSelectBotOption = function (_v0) {
	var source = _v0.a;
	var bot = _v0.b;
	var fromElement = function () {
		switch (source.$) {
			case 0:
				var sourcePath = source.a;
				return A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'word-break', 'break-word'))
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('From '),
							$author$project$Frontend$View$botSourcePathLinkElement(sourcePath)
						]));
			case 1:
				return $mdgriffith$elm_ui$Element$none;
			default:
				var fromLiteral = source.a;
				return A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'word-break', 'break-word'))
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('From ' + fromLiteral.eg)
						]));
		}
	}();
	var descriptionPartForTitle = A2(
		$elm_community$string_extra$String$Extra$ellipsis,
		85,
		A2(
			$elm$core$Maybe$withDefault,
			'',
			$elm$core$List$head(
				$elm$core$String$lines(
					$elm$core$String$trim(
						A2($elm$core$Maybe$withDefault, '', bot.bB.aL))))));
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
					$mdgriffith$elm_ui$Element$padding(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
				]),
			$author$project$Frontend$View$selectableAttributes(
				$author$project$Frontend$RunBot$UserInputSelectBotEvent(source))),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alpha(0.4)
							]),
						$mdgriffith$elm_ui$Element$text(
							A2($elm$core$String$left, 10, bot.av.bj))),
						$mdgriffith$elm_ui$Element$text(' ' + descriptionPartForTitle)
					])),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alpha(0.5),
						$author$project$Frontend$Visuals$elementFontSizePercent(90)
					]),
				fromElement)
			]));
};
var $author$project$Frontend$RunBot$viewSelectBot = F2(
	function (viewState, state) {
		var submitEvent = $author$project$Frontend$RunBot$UserInputSelectBotEvent(
			$author$project$Frontend$RunBot$SelectBotFromPath(state.bG));
		var optionsElementFromBots = F2(
			function (_v4, offeredBots) {
				var prefix = _v4.em;
				var appendix = _v4.dx;
				var offeredBotsCount = $elm$core$List$length(offeredBots);
				return (offeredBotsCount < 1) ? $mdgriffith$elm_ui$Element$none : A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
							$author$project$Frontend$Visuals$userSelectNone
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							$author$project$Frontend$Visuals$headingAttributes(3),
							$mdgriffith$elm_ui$Element$text(
								A2(
									$elm$core$String$join,
									' ',
									A2(
										$elm$core$List$filter,
										A2($elm$core$Basics$composeR, $elm$core$String$isEmpty, $elm$core$Basics$not),
										_List_fromArray(
											[
												prefix,
												$elm$core$String$fromInt(offeredBotsCount),
												appendix,
												(offeredBotsCount < 2) ? 'Bot' : 'Bots'
											]))))),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							A2($elm$core$List$map, $author$project$Frontend$RunBot$viewSelectBotOption, offeredBots))
						]));
			});
		var recentSessionsLoadedBotsElement = function (sessionsLoadingCompleted) {
			var offeredBotsFromPlaySessions = A2(
				$elm$core$List$map,
				function (_v1) {
					var _v2 = _v1.a;
					var mostRecentPlaySessionName = _v2.a;
					var _v3 = _v2.b;
					var mostRecentPlaySessionSummary = _v3.a;
					var loadBotOk = _v3.b;
					var otherPlaySessions = _v1.b;
					return _Utils_Tuple2(
						A2(
							$author$project$Frontend$RunBot$SelectBotFromLiteral,
							{eg: 'play-session-' + mostRecentPlaySessionName},
							loadBotOk),
						loadBotOk);
				},
				$elm$core$List$reverse(
					A2(
						$elm$core$List$sortBy,
						A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $elm$core$Tuple$first),
						A2(
							$elm_community$list_extra$List$Extra$gatherEqualsBy,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Tuple$second,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Tuple$second,
									A2(
										$elm$core$Basics$composeR,
										function ($) {
											return $.av;
										},
										function ($) {
											return $.bj;
										}))),
							A2(
								$elm$core$List$filterMap,
								function (_v0) {
									var playSessionName = _v0.a;
									var playSession = _v0.b;
									return A2(
										$elm$core$Maybe$map,
										A2(
											$elm$core$Basics$composeR,
											$elm$core$Tuple$pair(playSession),
											$elm$core$Tuple$pair(playSessionName)),
										$elm$core$Result$toMaybe(playSession.g7));
								},
								$elm$core$List$reverse(
									A2($elm$core$List$sortBy, $elm$core$Tuple$first, sessionsLoadingCompleted)))))));
			var botIdsContainedInBotsFromPlaySessions = $elm$core$Set$fromList(
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Tuple$second,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.av;
							},
							function ($) {
								return $.bj;
							})),
					offeredBotsFromPlaySessions));
			var offeredBotsFromLoadSuccesses = A2(
				$elm$core$List$filter,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Tuple$second,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.av;
						},
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.bj;
							},
							A2(
								$elm$core$Basics$composeR,
								$elm$core$Set$member,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Basics$apR(botIdsContainedInBotsFromPlaySessions),
									$elm$core$Basics$not))))),
				A2(
					$elm$core$List$sortBy,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Tuple$second,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.av;
							},
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.bj;
								},
								A2(
									$elm$core$Basics$composeR,
									$elm_community$list_extra$List$Extra$elemIndex,
									A2(
										$elm$core$Basics$composeR,
										$elm$core$Basics$apR(viewState.mB),
										$elm$core$Maybe$withDefault(9999)))))),
					A2(
						$elm$core$List$map,
						$elm$core$Tuple$mapFirst($author$project$Frontend$RunBot$SelectBotFromPath),
						$elm$core$Dict$toList(viewState.a4))));
			return A2(
				optionsElementFromBots,
				{dx: 'Recently used', em: ''},
				_Utils_ap(offeredBotsFromPlaySessions, offeredBotsFromLoadSuccesses));
		};
		var recentSessionsElement = $author$project$Frontend$RunBot$viewDerivedFromRecentSessions(
			{
				lE: $author$project$Frontend$RunBot$playSessionsLoadingAutomaticallyLimitInSelectBotView,
				cX: viewState.cX,
				nx: recentSessionsLoadedBotsElement(_List_Nil),
				ny: recentSessionsLoadedBotsElement
			});
		var offeredBotsFromBundledBots = A2(
			$elm$core$List$map,
			function (loadedBot) {
				return _Utils_Tuple2(
					$author$project$Frontend$RunBot$SelectBotFromBundle(
						{bj: loadedBot.av.bj}),
					loadedBot);
			},
			A2($elm$core$List$filterMap, $elm$core$Result$toMaybe, viewState.bm));
		var bundledBotsElement = A2(
			optionsElementFromBots,
			{dx: 'Bundled', em: 'Found'},
			offeredBotsFromBundledBots);
		return {
			ff: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						A2(
							$elm$core$List$cons,
							$author$project$Frontend$Visuals$userSelectNone,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$centerX,
								$author$project$Frontend$Visuals$headingAttributes(2))),
						$mdgriffith$elm_ui$Element$text('Select Bot')),
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[$author$project$Frontend$Visuals$userSelectNone]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('Enter the name of a bot or a path or URL to a bot program below.')
							])),
						A2(
						$mdgriffith$elm_ui$Element$Input$text,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color($author$project$Frontend$Visuals$backgroundColor),
								$author$project$Frontend$Visuals$onKeyDownEnter(submitEvent),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								$elm$html$Html$Attributes$id($author$project$Frontend$RunBot$inputSourcePathElementId))
							]),
						{
							lA: $mdgriffith$elm_ui$Element$Input$labelHidden('bot name or path to files with a bot program'),
							lZ: $author$project$Frontend$RunBot$UserInputSelectBotEnterPath,
							mf: $elm$core$Maybe$Just(
								A2(
									$mdgriffith$elm_ui$Element$Input$placeholder,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text('bot name or path to files with a bot program'))),
							aD: state.bG
						}),
						A2(
						$mdgriffith$elm_ui$Element$textColumn,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$author$project$Frontend$Visuals$userSelectNone
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_Nil,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('Not sure what to enter as bot source? You can enter bots names as found on the catalog at '),
										A2(
										$author$project$Frontend$Visuals$linkElementFromHref,
										{lX: true},
										'https://catalog.botlab.org')
									])),
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_Nil,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('Besides sources from '),
										$author$project$Frontend$Visuals$linkElementFromUrlAndTextLabel(
										{bW: 'GitHub', lX: true, eC: 'https://github.com/'}),
										$mdgriffith$elm_ui$Element$text(', local files, and the catalog, you can also use a bookmark link from '),
										$author$project$Frontend$Visuals$linkElementFromUrlAndTextLabel(
										{bW: 'Elm Editor', lX: true, eC: 'https://elm-editor.com/'})
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Element$paddingXY, $author$project$Frontend$Visuals$defaultFontSize, 0),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						A2(
							$author$project$Frontend$Visuals$buttonElement,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$padding($author$project$Frontend$Visuals$defaultFontSize)
								]),
							{
								bo: $elm$core$String$trim(state.bG) === '',
								lA: A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$centerX]),
									$mdgriffith$elm_ui$Element$text('Load Bot')),
								by: $elm$core$Maybe$Just(submitEvent)
							})),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$scrollbarY,
								$author$project$Frontend$Visuals$mitigate_2024_09_scrollbar_issue
							]),
						_List_fromArray(
							[bundledBotsElement, recentSessionsElement]))
					])),
			jg: $elm$core$Maybe$Just('Select Bot')
		};
	});
var $author$project$Frontend$RunBot$view = F2(
	function (viewState, state) {
		var _v0 = state.bU;
		switch (_v0.$) {
			case 0:
				var selectBot = _v0.a;
				return A2($author$project$Frontend$RunBot$viewSelectBot, viewState, selectBot);
			case 1:
				var configureSession = _v0.a;
				return A2($author$project$Frontend$RunBot$viewConfigureSession, viewState, configureSession);
			case 2:
				var enterOnlineKey = _v0.a;
				return $author$project$Frontend$RunBot$viewEnterOnlineKey(enterOnlineKey);
			case 3:
				var playSession = _v0.a;
				return A2($author$project$Frontend$RunBot$viewPlaySession, viewState, playSession);
			default:
				var devTools = _v0.a;
				return A2(
					$author$project$Frontend$View$documentMap,
					$author$project$Frontend$RunBot$UserInputDevToolsEvent,
					A2($author$project$Frontend$DevTools$view, viewState, devTools));
		}
	});
var $author$project$Frontend$Main$UserInputInstallEvent = {$: 5};
var $author$project$Frontend$Main$UserInputSkipInstallationEvent = {$: 6};
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$gear = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'gear',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160 80 80 0 1 0 0 160z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$gear = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$gear);
var $author$project$Frontend$Main$buttonEnterSettings = A2(
	$author$project$Frontend$Visuals$buttonElement,
	_List_Nil,
	{
		bo: false,
		lA: A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerY]),
					$mdgriffith$elm_ui$Element$html(
						$lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Solid$gear))),
					$mdgriffith$elm_ui$Element$text('Client Settings')
				])),
		by: $elm$core$Maybe$Just(
			$author$project$Frontend$Main$UserInputEnterClientSettingsEvent($elm$core$Maybe$Nothing))
	});
var $author$project$Frontend$Main$UserInputEnterRunBot = {$: 7};
var $author$project$Frontend$Main$UserInputImportPlaySession = {$: 8};
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$fileImport = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'file-import',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M128 64c0-35.3 28.7-64 64-64H352V128c0 17.7 14.3 32 32 32H512V448c0 35.3-28.7 64-64 64H192c-35.3 0-64-28.7-64-64V336H302.1l-39 39c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l80-80c9.4-9.4 9.4-24.6 0-33.9l-80-80c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l39 39H128V64zm0 224v48H24c-13.3 0-24-10.7-24-24s10.7-24 24-24H128zM512 128H384V0L512 128z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$fileImport = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$fileImport);
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$gamepad = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'gamepad',
	_Utils_Tuple2(640, 512),
	_Utils_Tuple2('M192 64C86 64 0 150 0 256S86 448 192 448H448c106 0 192-86 192-192s-86-192-192-192H192zM496 168a40 40 0 1 1 0 80 40 40 0 1 1 0-80zM392 304a40 40 0 1 1 80 0 40 40 0 1 1 -80 0zM168 200c0-13.3 10.7-24 24-24s24 10.7 24 24v32h32c13.3 0 24 10.7 24 24s-10.7 24-24 24H216v32c0 13.3-10.7 24-24 24s-24-10.7-24-24V280H136c-13.3 0-24-10.7-24-24s10.7-24 24-24h32V200z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$gamepad = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$gamepad);
var $author$project$Frontend$Main$viewMainMenuGetStarted = A2(
	$mdgriffith$elm_ui$Element$column,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize * 2),
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$scrollbarY,
			$author$project$Frontend$Visuals$userSelectNone,
			$author$project$Frontend$Visuals$mitigate_2024_09_scrollbar_issue
		]),
	A2(
		$elm$core$List$map,
		function (option) {
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$author$project$Frontend$Visuals$userSelectNone
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						$author$project$Frontend$View$viewLargeButton(
							{
								ki: $elm$core$Maybe$Just(option.ki),
								kP: option.kP,
								aa: option.aa,
								jg: option.jg
							}))
					]));
		},
		_List_fromArray(
			[
				{
				ki: $author$project$Frontend$Main$UserInputEnterRunBot,
				kP: $elm$core$Maybe$Just('Run a bot to play a game, automating inputs in a game client'),
				aa: $lattyware$elm_fontawesome$FontAwesome$Solid$gamepad,
				jg: 'Run bot'
			},
				{ki: $author$project$Frontend$Main$UserInputImportPlaySession, kP: $elm$core$Maybe$Nothing, aa: $lattyware$elm_fontawesome$FontAwesome$Solid$fileImport, jg: 'Import play session'}
			])));
var $author$project$Frontend$Main$UserInputOpenPlaySession = function (a) {
	return {$: 9, a: a};
};
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$clock = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'clock',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M256 0a256 256 0 1 1 0 512A256 256 0 1 1 256 0zM232 120V256c0 8 4 15.5 10.7 20l96 64c11 7.4 25.9 4.4 33.3-6.7s4.4-25.9-6.7-33.3L280 243.2V120c0-13.3-10.7-24-24-24s-24 10.7-24 24z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$clock = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$clock);
var $author$project$Frontend$Visuals$formatDurationTextSingleUnit = function (_v0) {
	var totalSeconds = _v0.nr;
	var minutes = (totalSeconds / 60) | 0;
	var hours = (minutes / 60) | 0;
	return A2(
		$elm$core$String$join,
		' ',
		(hours > 0) ? _List_fromArray(
			[
				$elm$core$String$fromInt(hours),
				(hours === 1) ? 'hour' : 'hours'
			]) : ((minutes > 0) ? _List_fromArray(
			[
				$elm$core$String$fromInt(minutes),
				(minutes === 1) ? 'minute' : 'minutes'
			]) : _List_fromArray(
			[
				$elm$core$String$fromInt(totalSeconds),
				(totalSeconds === 1) ? 'second' : 'seconds'
			])));
};
var $author$project$Frontend$Main$viewSessionInMainMenu = F2(
	function (_v0, _v1) {
		var selectEvent = _v0.iD;
		var sessionName = _v1.a;
		var sessionSummary = _v1.b;
		var topRow = sessionSummary.d4 ? A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alpha(0.5)
						]),
					$mdgriffith$elm_ui$Element$html(
						$lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Solid$fileImport))),
					$mdgriffith$elm_ui$Element$text(sessionName)
				])) : $mdgriffith$elm_ui$Element$none;
		var startTimeTexts = A2(
			$elm$core$Maybe$withDefault,
			{fn: '', fo: ''},
			A2(
				$elm$core$Maybe$map,
				A2($elm$core$Basics$composeR, $elm$time$Time$millisToPosix, $author$project$Frontend$View$sessionSummaryTimeText),
				sessionSummary.av.f8));
		var timeRow = A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(startTimeTexts.fn),
					$mdgriffith$elm_ui$Element$text(startTimeTexts.fo),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$author$project$Frontend$Visuals$elementFontSizePercent(90),
							$mdgriffith$elm_ui$Element$alpha(0.8)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Element$paddingXY, ($author$project$Frontend$Visuals$defaultFontSize / 2) | 0, 0)
								]),
							$mdgriffith$elm_ui$Element$html(
								$lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Solid$clock))),
							$mdgriffith$elm_ui$Element$text(
							$author$project$Frontend$Visuals$formatDurationTextSingleUnit(
								{nr: sessionSummary.av.fT}))
						]))
				]));
		var onlineSessionElement = A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_Nil,
			_List_fromArray(
				[
					$author$project$Frontend$View$onlineOfflineSessionLinkElement(sessionSummary.av)
				]));
		var botDescriptionText = function () {
			var _v2 = sessionSummary.g7;
			if (_v2.$ === 1) {
				var err = _v2.a;
				return 'Failed to load bot: ' + err;
			} else {
				var bot = _v2.a;
				return A2(
					$elm_community$string_extra$String$Extra$ellipsis,
					85,
					A2(
						$elm$core$Maybe$withDefault,
						'',
						$elm$core$List$head(
							$elm$core$String$lines(
								$elm$core$String$trim(
									A2($elm$core$Maybe$withDefault, '', bot.bB.aL))))));
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
						$mdgriffith$elm_ui$Element$padding(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
					]),
				$author$project$Frontend$View$selectableAttributes(selectEvent)),
			_List_fromArray(
				[
					topRow,
					timeRow,
					onlineSessionElement,
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alpha(0.6)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(botDescriptionText)
						]))
				]));
	});
var $author$project$Frontend$Main$viewMainMenuOpenRecent = function (viewState) {
	var sessionListElement = $author$project$Frontend$RunBot$viewDerivedFromRecentSessions(
		{
			lE: $author$project$Frontend$RunBot$playSessionsLoadingAutomaticallyLimitInSelectBotView,
			cX: viewState.cX,
			nx: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
						$mdgriffith$elm_ui$Element$alpha(0.6),
						$mdgriffith$elm_ui$Element$padding($author$project$Frontend$Visuals$defaultFontSize),
						$mdgriffith$elm_ui$Element$Font$center,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						$author$project$Frontend$Visuals$headingAttributes(2),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('No recordings found')
							])),
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('To start your first play session, use the \'Run bot\' button')
							]))
					])),
			ny: function (loadedSessions) {
				var viewSessionsList = A2(
					$elm$core$Basics$composeR,
					$elm$core$List$sortBy($elm$core$Tuple$first),
					A2(
						$elm$core$Basics$composeR,
						$elm$core$List$reverse,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$List$map(
								function (_v2) {
									var sessionName = _v2.a;
									var sessionSummary = _v2.b;
									return A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
											]),
										A2(
											$author$project$Frontend$Main$viewSessionInMainMenu,
											{
												iD: $author$project$Frontend$Main$UserInputOpenPlaySession(sessionName)
											},
											_Utils_Tuple2(sessionName, sessionSummary)));
								}),
							$mdgriffith$elm_ui$Element$column(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0)
									])))));
				var _v0 = A2(
					$elm$core$List$partition,
					function (_v1) {
						var sessionSummary = _v1.b;
						return sessionSummary.d4;
					},
					loadedSessions);
				var imported = _v0.a;
				var notImported = _v0.b;
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
							$mdgriffith$elm_ui$Element$padding(4)
						]),
					_List_fromArray(
						[
							viewSessionsList(imported),
							viewSessionsList(notImported)
						]));
			}
		});
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$author$project$Frontend$Visuals$userSelectNone,
				$mdgriffith$elm_ui$Element$scrollbarY,
				$author$project$Frontend$Visuals$mitigate_2024_09_scrollbar_issue
			]),
		sessionListElement);
};
var $author$project$Frontend$Main$viewMainMenu = function (viewState) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize * 1)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize * 3)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$fillPortion(3)),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize * 2),
								$author$project$Frontend$Visuals$userSelectNone
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								$author$project$Frontend$Visuals$headingAttributes(2),
								$mdgriffith$elm_ui$Element$text('Open recent play session')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$clip,
										$mdgriffith$elm_ui$Element$htmlAttribute(
										A2($elm$html$Html$Attributes$style, 'flex-shrink', '1'))
									]),
								$author$project$Frontend$Main$viewMainMenuOpenRecent(viewState))
							])),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize * 2),
								$mdgriffith$elm_ui$Element$width(
								A2(
									$mdgriffith$elm_ui$Element$minimum,
									250,
									$mdgriffith$elm_ui$Element$fillPortion(2))),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$author$project$Frontend$Visuals$userSelectNone
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								$author$project$Frontend$Visuals$headingAttributes(2),
								$mdgriffith$elm_ui$Element$text('Get started')),
								$author$project$Frontend$Main$viewMainMenuGetStarted,
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$alignBottom]),
								$author$project$Frontend$Main$buttonEnterSettings)
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$alignBottom,
						$mdgriffith$elm_ui$Element$alpha(0.6),
						$author$project$Frontend$Visuals$userSelectNone
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text('Need help? Have a look at the guides at '),
						A2(
						$author$project$Frontend$Visuals$linkElementFromHref,
						{lX: true},
						'https://to.botlab.org/guide'),
						$mdgriffith$elm_ui$Element$text(' or visit us on the '),
						$author$project$Frontend$View$linkToBotLabForum
					]))
			]));
};
var $author$project$Frontend$Main$viewInstallationOrMainMenu = function (state) {
	var installDialogButton = function (config) {
		return A2(
			$author$project$Frontend$Visuals$buttonElement,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding($author$project$Frontend$Visuals$defaultFontSize),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			{
				bo: false,
				lA: A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					$mdgriffith$elm_ui$Element$text(config.lA)),
				by: $elm$core$Maybe$Just(config.by)
			});
	};
	var continueWithMainMenu = {
		ff: $author$project$Frontend$Main$viewMainMenu(
			$author$project$Frontend$Main$viewStateFromState(state)),
		jg: $elm$core$Maybe$Nothing
	};
	var continueWithInstallation = function (content) {
		return {
			ff: content,
			jg: $elm$core$Maybe$Just('Installation')
		};
	};
	var _v0 = state.aQ;
	switch (_v0.$) {
		case 0:
			return continueWithInstallation(
				$mdgriffith$elm_ui$Element$text('Checking installation...'));
		case 1:
			var checkedInstallation = _v0.a;
			return checkedInstallation.gU ? continueWithMainMenu : continueWithInstallation(
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							A2(
								$elm$core$List$cons,
								$author$project$Frontend$Visuals$userSelectNone,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$centerX,
									$author$project$Frontend$Visuals$headingAttributes(2))),
							$mdgriffith$elm_ui$Element$text('BotLab client not installed')),
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[$author$project$Frontend$Visuals$userSelectNone]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('I see the BotLab client is not installed on this machine. I recommend installing this client to support running scripts and configurations downloaded from the catalog.')
								])),
							installDialogButton(
							{lA: 'Install and Continue', by: $author$project$Frontend$Main$UserInputInstallEvent}),
							installDialogButton(
							{lA: 'Continue without Installing', by: $author$project$Frontend$Main$UserInputSkipInstallationEvent})
						])));
		case 3:
			var installResult = _v0.a;
			var detailsElement = function () {
				if (installResult.$ === 1) {
					var err = installResult.a;
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$errorColor)
							]),
						$author$project$Frontend$Visuals$viewTextWithTypicalPreformattedStyle('Failed installation:\n' + err));
				} else {
					var ok = installResult.a;
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$successColor)
							]),
						$author$project$Frontend$Visuals$viewTextWithTypicalPreformattedStyle('Completed installation:\n' + ok));
				}
			}();
			return continueWithInstallation(
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							detailsElement,
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alignBottom,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							installDialogButton(
								{lA: 'Continue', by: $author$project$Frontend$Main$UserInputSkipInstallationEvent}))
						])));
		default:
			return continueWithMainMenu;
	}
};
var $author$project$Frontend$Main$viewNavigationBranch = F2(
	function (state, maybeBranch) {
		if (maybeBranch.$ === 1) {
			return $author$project$Frontend$Main$viewInstallationOrMainMenu(state);
		} else {
			if (!maybeBranch.a.$) {
				var runBot = maybeBranch.a.a;
				return A2(
					$author$project$Frontend$View$documentMap,
					$author$project$Frontend$Main$RunBotEvent,
					A2(
						$author$project$Frontend$RunBot$view,
						$author$project$Frontend$Main$viewStateFromState(state),
						runBot));
			} else {
				var devTools = maybeBranch.a.a;
				return A2(
					$author$project$Frontend$View$documentMap,
					$author$project$Frontend$Main$DevToolsEvent,
					A2(
						$author$project$Frontend$DevTools$view,
						$author$project$Frontend$Main$viewStateFromState(state),
						devTools));
			}
		}
	});
var $author$project$Frontend$Main$view = function (state) {
	var navigationDocument = A2($author$project$Frontend$Main$viewNavigationBranch, state, state.q);
	var navigateBackConfirmationDialog = function () {
		var _v3 = state.bw;
		if (_v3.$ === 1) {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var implicationToConfirm = _v3.a;
			var implicationElements = $author$project$Frontend$Main$describeNavigateBackImplication(implicationToConfirm);
			var popupElement = A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Frontend$Visuals$backgroundColor),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$padding($author$project$Frontend$Visuals$defaultFontSize),
						$mdgriffith$elm_ui$Element$Border$width(2),
						$mdgriffith$elm_ui$Element$Border$color(
						A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.3)),
						$mdgriffith$elm_ui$Element$Border$rounded(8)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$errorColor),
								$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$size($author$project$Frontend$Visuals$defaultFontSize * 2)
									]),
								$mdgriffith$elm_ui$Element$html(
									$lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Solid$triangleExclamation))),
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_Nil,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(implicationElements.gp)
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Element$paddingXY, $author$project$Frontend$Visuals$defaultFontSize, 0),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						A2(
							$author$project$Frontend$Visuals$buttonElement,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX]),
							{
								bo: false,
								lA: A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_Nil,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(implicationElements.eS)
										])),
								by: $elm$core$Maybe$Just(
									$author$project$Frontend$Main$SequenceEvent(
										_List_fromArray(
											[
												implicationElements.gE,
												$author$project$Frontend$Main$UserInputNavigateBackEvent(
												$elm$core$Maybe$Just(implicationToConfirm))
											])))
							}))
					]));
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
						$mdgriffith$elm_ui$Element$Background$color(
						A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.5)),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						A2($elm$html$Html$Attributes$style, 'backdrop-filter', 'blur(1px)')),
						$mdgriffith$elm_ui$Element$inFront(popupElement)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Events$onClick($author$project$Frontend$Main$UserInputCancelNavigateBackEvent)
							]),
						_List_Nil)
					]));
		}
	}();
	var messageToHostErrorsOverlay = function () {
		var _v1 = A2(
			$elm$core$List$sortBy,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Tuple$second,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.f9;
					},
					$elm$time$Time$posixToMillis)),
			$elm$core$Dict$toList(state.ay));
		if (!_v1.b) {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var _v2 = _v1.a;
			var messageToHostError = _v2.a;
			var messageAggregate = _v2.b;
			var totalMessagesCount = $elm$core$Dict$size(state.ay);
			var remainingCountElement = (totalMessagesCount < 2) ? $mdgriffith$elm_ui$Element$none : A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alpha(0.6),
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$defaultFontColor)
					]),
				$mdgriffith$elm_ui$Element$text(
					'1 / ' + $elm$core$String$fromInt(totalMessagesCount)));
			var countElement = (messageAggregate.bT < 2) ? $mdgriffith$elm_ui$Element$none : A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color(
						A4($mdgriffith$elm_ui$Element$rgba, 0.5, 0.5, 0.5, 0.3)),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$defaultFontColor),
						A2($mdgriffith$elm_ui$Element$paddingXY, 6, 2),
						$mdgriffith$elm_ui$Element$Border$rounded(3)
					]),
				$mdgriffith$elm_ui$Element$text(
					'x ' + $elm$core$String$fromInt(messageAggregate.bT)));
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Frontend$Visuals$backgroundColor),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Border$width(2),
						$mdgriffith$elm_ui$Element$Border$color(
						A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0.3)),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height(
						A2($mdgriffith$elm_ui$Element$maximum, 200, $mdgriffith$elm_ui$Element$fill))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$errorColor),
								$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
								$mdgriffith$elm_ui$Element$padding($author$project$Frontend$Visuals$defaultFontSize),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$size($author$project$Frontend$Visuals$defaultFontSize * 2),
												$mdgriffith$elm_ui$Element$alignTop
											]),
										$mdgriffith$elm_ui$Element$html(
											$lattyware$elm_fontawesome$FontAwesome$view($lattyware$elm_fontawesome$FontAwesome$Solid$triangleExclamation))),
										remainingCountElement
									])),
								A2(
								$mdgriffith$elm_ui$Element$textColumn,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$errorColor),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$scrollbarY,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$spacing(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
										$author$project$Frontend$Visuals$mitigate_2024_09_scrollbar_issue
									]),
								A2(
									$elm$core$List$map,
									A2(
										$elm$core$Basics$composeR,
										$elm$core$List$singleton,
										$mdgriffith$elm_ui$Element$paragraph(_List_Nil)),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing($author$project$Frontend$Visuals$defaultFontSize),
													$mdgriffith$elm_ui$Element$Font$bold
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[$mdgriffith$elm_ui$Element$centerY]),
													$mdgriffith$elm_ui$Element$text('Failed message to host ')),
													countElement
												])),
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$htmlAttribute(
													A2($elm$html$Html$Attributes$style, 'white-space', 'pre-wrap')),
													$mdgriffith$elm_ui$Element$htmlAttribute(
													A2($elm$html$Html$Attributes$style, 'word-break', 'break-word'))
												]),
											$mdgriffith$elm_ui$Element$html(
												$elm$html$Html$text(messageToHostError)))
										])))
							])),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$author$project$Frontend$Visuals$elementFontSizePercent(140),
								$mdgriffith$elm_ui$Element$padding(($author$project$Frontend$Visuals$defaultFontSize / 2) | 0),
								$mdgriffith$elm_ui$Element$alignRight,
								$mdgriffith$elm_ui$Element$alignTop
							]),
						$author$project$Frontend$Visuals$popupCloseButton(
							{
								fA: $author$project$Frontend$Main$UserInputForgetMessageToHostError(messageToHostError),
								jg: 'Clear Notification (Delete)'
							}))
					]));
		}
	}();
	var clientSettingsElement = A2(
		$elm$core$Maybe$withDefault,
		$mdgriffith$elm_ui$Element$none,
		A2($elm$core$Maybe$map, $author$project$Frontend$Main$viewClientSettingsModal, state.aI));
	var buttonNavigateBackElement = function () {
		var _v0 = state.q;
		if (_v0.$ === 1) {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			return $author$project$Frontend$Main$buttonNavigateBack;
		}
	}();
	return {
		ff: A2(
			$mdgriffith$elm_ui$Element$layout,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$family(
					A2($elm$core$List$map, $mdgriffith$elm_ui$Element$Font$typeface, $author$project$Frontend$Visuals$rootFontFamily)),
					$mdgriffith$elm_ui$Element$Font$size($author$project$Frontend$Visuals$defaultFontSize),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Frontend$Visuals$defaultFontColor),
					$mdgriffith$elm_ui$Element$Background$color($author$project$Frontend$Visuals$backgroundColor),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$inFront(buttonNavigateBackElement),
						$mdgriffith$elm_ui$Element$inFront(clientSettingsElement),
						$mdgriffith$elm_ui$Element$inFront(messageToHostErrorsOverlay),
						$mdgriffith$elm_ui$Element$inFront(navigateBackConfirmationDialog)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$html($lattyware$elm_fontawesome$FontAwesome$Styles$css),
						$mdgriffith$elm_ui$Element$html($author$project$Frontend$Visuals$globalCssStyleHtmlElement),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(10),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
							]),
						navigationDocument.ff)
					]))),
		jg: navigationDocument.jg
	};
};
var $author$project$Frontend$Main$update = F2(
	function (event, stateBefore) {
		var _v11 = A2($author$project$Frontend$Main$updateExceptTitle, event, stateBefore);
		var state = _v11.a;
		var cmd = _v11.b;
		var appWindowTitle = $author$project$Frontend$Main$view(state).jg;
		var setTitleCmd = _Utils_eq(
			$author$project$Frontend$Main$view(stateBefore).jg,
			appWindowTitle) ? $elm$core$Platform$Cmd$none : $author$project$Frontend$Main$sendMessageToHostCmd(
			$author$project$HostInterface$SetAppWindowTitle(
				A2($elm$core$Maybe$withDefault, '', appWindowTitle)));
		var currentlyViewedBots = function () {
			var _v15 = state.q;
			if ((!_v15.$) && (!_v15.a.$)) {
				var runBotBefore = _v15.a.a;
				var _v16 = runBotBefore.bU;
				if (_v16.$ === 1) {
					var configureSession = _v16.a;
					var _v17 = configureSession.g7;
					if (_v17.$ === 1) {
						return _List_Nil;
					} else {
						if (_v17.a.$ === 1) {
							return _List_Nil;
						} else {
							var loadedBot = _v17.a.a;
							return _List_fromArray(
								[loadedBot.av.bj]);
						}
					}
				} else {
					return _List_Nil;
				}
			} else {
				return _List_Nil;
			}
		}();
		var recentlyViewedBotsArtifactIds = $elm_community$list_extra$List$Extra$unique(
			_Utils_ap(currentlyViewedBots, stateBefore.b7));
		var localPlaySessionsNames = $elm$core$List$reverse(
			$elm$core$List$sort(
				A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.ek;
						},
						state.bu))));
		var messageToHostTimeout = function (messageTime) {
			return _Utils_cmp(
				60 * 1000,
				$elm$time$Time$posixToMillis(state.s) - $elm$time$Time$posixToMillis(messageTime)) < 0;
		};
		var messagesToHostInProgressRemainingAfterTimeout = A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Tuple$first,
				A2($elm$core$Basics$composeR, messageToHostTimeout, $elm$core$Basics$not)),
			state.a7);
		var playSessionsSelectedInDevTools = function () {
			var _v13 = state.q;
			if (_v13.$ === 1) {
				return _List_Nil;
			} else {
				if (_v13.a.$ === 1) {
					var devToolsBranch = _v13.a.a;
					return _List_fromArray(
						[devToolsBranch.V]);
				} else {
					var runBotBranch = _v13.a.a;
					var _v14 = runBotBranch.bU;
					if (_v14.$ === 4) {
						var devToolsStage = _v14.a;
						return _List_fromArray(
							[devToolsStage.V]);
					} else {
						return _List_Nil;
					}
				}
			}
		}();
		var playSessionsToLoad = A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Dict$member,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Basics$apR(state.a5),
					$elm$core$Basics$not)),
			A2(
				$elm$core$List$take,
				$author$project$Frontend$Main$playSessionsLoadingAutomaticallyLimit(stateBefore),
				_Utils_ap(
					A2(
						$elm$core$List$map,
						function ($) {
							return $.p;
						},
						playSessionsSelectedInDevTools),
					localPlaySessionsNames)));
		var sendListPlaySessionsMessage = function () {
			var _v12 = state.bu;
			if (_v12.$ === 1) {
				return true;
			} else {
				var lastResponse = _v12.a;
				return _Utils_cmp(
					$elm$time$Time$posixToMillis(lastResponse.s) + (120 * 1000),
					$elm$time$Time$posixToMillis(state.s)) < 0;
			}
		}();
		var messagesToLoad = $elm$core$List$concat(
			_List_fromArray(
				[
					A2(
					$elm$core$List$map,
					$author$project$HostInterface$LoadPlaySessionSummary,
					A2($elm$core$List$take, 1, playSessionsToLoad)),
					sendListPlaySessionsMessage ? _List_fromArray(
					[$author$project$HostInterface$ListLocalPlaySessionsNames]) : _List_Nil
				]));
		var messagesToHostInProgressNew = A2(
			$elm$core$List$filter,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$member,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Basics$apR(
						A2($elm$core$List$map, $elm$core$Tuple$second, state.a7)),
					$elm$core$Basics$not)),
			messagesToLoad);
		var messagesToHostInProgress = _Utils_ap(
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$pair(state.s),
				messagesToHostInProgressNew),
			messagesToHostInProgressRemainingAfterTimeout);
		var messagesToHostInProgressNewCmds = A2($elm$core$List$map, $author$project$Frontend$Main$sendMessageToHostCmd, messagesToHostInProgressNew);
		return _Utils_Tuple2(
			_Utils_update(
				state,
				{a7: messagesToHostInProgress, b7: recentlyViewedBotsArtifactIds}),
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						cmd,
						setTitleCmd,
						$elm$core$Platform$Cmd$batch(messagesToHostInProgressNewCmds)
					])));
	});
var $author$project$Frontend$Main$updateExceptTitle = F2(
	function (event, stateBefore) {
		switch (event.$) {
			case 13:
				var posixTime = event.a;
				var runBotMessagesToHost = function () {
					var _v6 = stateBefore.q;
					if ((!_v6.$) && (!_v6.a.$)) {
						var runBot = _v6.a.a;
						return A2(
							$author$project$Frontend$RunBot$getMessagesToHost,
							$author$project$Frontend$Main$viewStateFromState(stateBefore),
							runBot);
					} else {
						return _List_Nil;
					}
				}();
				var runBotMessagesToHostCmd = $elm$core$Platform$Cmd$batch(
					A2($elm$core$List$map, $author$project$Frontend$Main$sendMessageToHostCmd, runBotMessagesToHost));
				var getPlaySessionStatusCmd = function () {
					var _v1 = stateBefore.q;
					if ((!_v1.$) && (!_v1.a.$)) {
						var runBot = _v1.a.a;
						var _v2 = runBot.bU;
						if (_v2.$ === 3) {
							var playSession = _v2.a;
							var _v3 = playSession.mS;
							if ((!_v3.$) && (!_v3.a.b.$)) {
								var _v4 = _v3.a;
								var _v5 = A2(
									$elm$core$Maybe$map,
									A2(
										$elm$core$Basics$composeR,
										$elm$core$Tuple$second,
										function ($) {
											return $.cF;
										}),
									playSession.lC);
								if ((!_v5.$) && (_v5.a.$ === 2)) {
									return $elm$core$Platform$Cmd$none;
								} else {
									return $author$project$Frontend$Main$sendMessageToHostCmd(
										$author$project$HostInterface$ConfirmPlaySessionNotFinished(playSession.mR.bD));
								}
							} else {
								return $elm$core$Platform$Cmd$none;
							}
						} else {
							return $elm$core$Platform$Cmd$none;
						}
					} else {
						return $elm$core$Platform$Cmd$none;
					}
				}();
				return _Utils_Tuple2(
					_Utils_update(
						stateBefore,
						{s: posixTime}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[getPlaySessionStatusCmd, runBotMessagesToHostCmd])));
			case 14:
				var size = event.a;
				return _Utils_Tuple2(
					_Utils_update(
						stateBefore,
						{eJ: size}),
					$elm$core$Platform$Cmd$none);
			case 0:
				var confirmedImplication = event.a;
				return A2($author$project$Frontend$Main$updateNavigateBack, confirmedImplication, stateBefore);
			case 3:
				return _Utils_Tuple2(
					_Utils_update(
						stateBefore,
						{bw: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none);
			case 4:
				var message = event.a;
				return _Utils_Tuple2(
					_Utils_update(
						stateBefore,
						{
							ay: A2($elm$core$Dict$remove, message, stateBefore.ay)
						}),
					$elm$core$Platform$Cmd$none);
			case 5:
				return _Utils_Tuple2(
					stateBefore,
					$author$project$Frontend$Main$sendMessageToHostCmd($author$project$HostInterface$Install));
			case 6:
				return _Utils_Tuple2(
					_Utils_update(
						stateBefore,
						{aQ: $author$project$Frontend$Main$SkippedInstallation}),
					$elm$core$Platform$Cmd$none);
			case 1:
				var maybeSettings = event.a;
				var cmd = $author$project$Frontend$Main$sendMessageToHostCmd(
					A2(
						$elm$core$Maybe$withDefault,
						$author$project$HostInterface$ReadClientSettingsRequest,
						A2($elm$core$Maybe$map, $author$project$HostInterface$StoreClientSettingsRequest, maybeSettings)));
				var clientSettingsDialogBefore = A2($elm$core$Maybe$withDefault, $author$project$Frontend$ClientSettings$init, stateBefore.aI);
				var lastEnteredSettings = A2(
					$elm_community$maybe_extra$Maybe$Extra$orElse,
					clientSettingsDialogBefore.d5,
					A2(
						$elm$core$Maybe$map,
						$elm$core$Tuple$pair(stateBefore.s),
						maybeSettings));
				return _Utils_Tuple2(
					_Utils_update(
						stateBefore,
						{
							aI: $elm$core$Maybe$Just(
								_Utils_update(
									clientSettingsDialogBefore,
									{d5: lastEnteredSettings}))
						}),
					cmd);
			case 2:
				return _Utils_Tuple2(
					_Utils_update(
						stateBefore,
						{aI: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none);
			case 7:
				return _Utils_Tuple2(
					_Utils_update(
						stateBefore,
						{
							q: $elm$core$Maybe$Just(
								$author$project$Frontend$Main$RunBotBranch($author$project$Frontend$RunBot$init))
						}),
					$elm$core$Platform$Cmd$none);
			case 9:
				var sessionId = event.a;
				return _Utils_Tuple2(
					_Utils_update(
						stateBefore,
						{
							q: $elm$core$Maybe$Just(
								$author$project$Frontend$Main$DevToolsBranch(
									{
										V: A2(
											$author$project$Frontend$DevTools$initSelectedSession,
											$author$project$Frontend$Main$viewStateFromState(stateBefore),
											{p: sessionId})
									}))
						}),
					$elm$core$Platform$Cmd$none);
			case 8:
				return _Utils_Tuple2(
					stateBefore,
					$author$project$Frontend$Main$sendMessageToHostCmd($author$project$HostInterface$ImportPlaySession));
			case 10:
				var runBotEvent = event.a;
				var _v7 = stateBefore.q;
				if (_v7.$ === 1) {
					return _Utils_Tuple2(stateBefore, $elm$core$Platform$Cmd$none);
				} else {
					if (!_v7.a.$) {
						var runBotBefore = _v7.a.a;
						var _v8 = A3(
							$author$project$Frontend$RunBot$update,
							$author$project$Frontend$Main$viewStateFromState(stateBefore),
							runBotEvent,
							runBotBefore);
						var runBot = _v8.a;
						var runBotCmds = _v8.b;
						return _Utils_Tuple2(
							_Utils_update(
								stateBefore,
								{
									q: $elm$core$Maybe$Just(
										$author$project$Frontend$Main$RunBotBranch(runBot))
								}),
							$elm$core$Platform$Cmd$batch(
								A2($elm$core$List$map, $author$project$Frontend$Main$cmdFromRunBotCmd, runBotCmds)));
					} else {
						return _Utils_Tuple2(stateBefore, $elm$core$Platform$Cmd$none);
					}
				}
			case 11:
				var devToolsEvent = event.a;
				var _v9 = stateBefore.q;
				if (_v9.$ === 1) {
					return _Utils_Tuple2(stateBefore, $elm$core$Platform$Cmd$none);
				} else {
					if (!_v9.a.$) {
						return _Utils_Tuple2(stateBefore, $elm$core$Platform$Cmd$none);
					} else {
						var devtoolsStateBefore = _v9.a.a;
						var _v10 = A3(
							$author$project$Frontend$DevTools$update,
							$author$project$Frontend$Main$viewStateFromState(stateBefore),
							devToolsEvent,
							devtoolsStateBefore);
						var devToolsState = _v10.a;
						var devToolsCmds = _v10.b;
						return _Utils_Tuple2(
							_Utils_update(
								stateBefore,
								{
									q: $elm$core$Maybe$Just(
										$author$project$Frontend$Main$DevToolsBranch(devToolsState))
								}),
							$elm$core$Platform$Cmd$batch(
								A2($elm$core$List$map, $author$project$Frontend$Main$cmdFromDevToolsCmd, devToolsCmds)));
					}
				}
			case 12:
				var messageToHost = event.a;
				var result = event.b;
				return A3($author$project$Frontend$Main$updateForMessageToHostResultEvent, messageToHost, result, stateBefore);
			case 15:
				return _Utils_Tuple2(stateBefore, $elm$core$Platform$Cmd$none);
			case 16:
				var result = event.a;
				return _Utils_Tuple2(
					_Utils_update(
						stateBefore,
						{
							bX: $elm$core$Maybe$Just(
								{mo: result, s: stateBefore.s})
						}),
					$elm$core$Platform$Cmd$none);
			default:
				var events = event.a;
				return A2(
					$author$project$Frontend$Main$batchUpdates,
					A2($elm$core$List$map, $author$project$Frontend$Main$update, events),
					stateBefore);
		}
	});
var $author$project$Frontend$Main$mainWithCustomizedInitAndUpdate = F2(
	function (customizeInit, customizeUpdate) {
		var customUpdate = customizeUpdate($author$project$Frontend$Main$update);
		return $author$project$Frontend$BrowserElementInitWithTime$element(
			{
				lo: F2(
					function (flags, time) {
						var customInit = customizeInit(
							$author$project$Frontend$Main$init(flags));
						var _v0 = customInit(time);
						var customInitState = _v0.a;
						var customInitCmd = _v0.b;
						return _Utils_Tuple2(customInitState, customInitCmd);
					}),
				ey: $author$project$Frontend$Main$subscriptions,
				dq: customUpdate,
				eG: A2(
					$elm$core$Basics$composeR,
					$author$project$Frontend$Main$view,
					function ($) {
						return $.ff;
					}),
				jA: $elm$html$Html$text('Measuring time...')
			});
	});
var $author$project$Frontend$Main$mainWithCustomInit = function (customInit) {
	return A2(
		$author$project$Frontend$Main$mainWithCustomizedInitAndUpdate,
		function (normalInit) {
			return function (time) {
				var _v0 = A2(
					$elm$core$Tuple$mapFirst,
					customInit,
					normalInit(time));
				var _v1 = _v0.a;
				var state = _v1.a;
				var customCmd = _v1.b;
				var cmd = _v0.b;
				return _Utils_Tuple2(
					state,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[cmd, customCmd])));
			};
		},
		$elm$core$Basics$identity);
};
var $author$project$Frontend$Main$main = $author$project$Frontend$Main$mainWithCustomInit(
	A2(
		$elm$core$Basics$composeR,
		$elm$core$Basics$identity,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Tuple$pair,
			$elm$core$Basics$apR($elm$core$Platform$Cmd$none))));
_Platform_export({'Frontend':{'Main':{'init':$author$project$Frontend$Main$main(
	$elm$json$Json$Decode$succeed(0))(0)}}});}(this));

  var app = Elm.Frontend.Main.init({ node: document.getElementById("elm") });
}
catch (e)
{
  // display initialization errors (e.g. bad flags, infinite recursion)
  var header = document.createElement("h1");
  header.style.fontFamily = "monospace";
  header.innerText = "Initialization Error";
  var pre = document.getElementById("elm");
  document.body.insertBefore(header, pre);
  pre.innerText = e;
  throw e;
}
</script>

</body>
</html>